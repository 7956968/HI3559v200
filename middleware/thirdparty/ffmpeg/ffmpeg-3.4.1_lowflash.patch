diff -uparN ffmpeg-3.4.1/adapt_liteos_config.sh ffmpeg-y/adapt_liteos_config.sh
--- ffmpeg-3.4.1/adapt_liteos_config.sh	1970-01-01 08:00:00.000000000 +0800
+++ ffmpeg-y/adapt_liteos_config.sh	2019-02-22 15:07:00.000000000 +0800
@@ -0,0 +1,60 @@
+#!/bin/sh
+
+
+function cancel_opt
+{
+    pattern=$1
+    sed -i "s/$pattern 1/$pattern 0/g" config.h
+    sed -i "s/$pattern/!$pattern/g" ffbuild/config.mak
+}
+
+function effect_opt
+{
+    pattern=$1
+    echo $pattern
+    sed -i "s/$pattern 0/$pattern 1/g" config.h
+    sed -i "s/!$pattern/$pattern/g" ffbuild/config.mak
+}
+
+function adapt_liteos
+{
+echo "adapt ffmpeg for liteos"
+
+sed -i "/^CFLAGS=/ s/$/ \$(LITEOS_MACRO) \$(LITEOS_OSDRV_INCLUDE) \$(LITEOS_USR_INCLUDE) \$(LITEOS_CMACRO) \$(LITEOS_INCLUDE) \-I\$(LITEOSTOPDIR)\/lib\/cxxstl\/gccinclude/g" ffbuild/config.mak
+
+sed -i "s:atomics\/gcc:atomics\/pthread:g" ffbuild/config.mak
+
+sed -i "/getenv/ s:^://:g" config.h
+
+effect_opt HAVE_UNISTD_H
+effect_opt HAVE_CBRT
+effect_opt HAVE_CBRTF
+effect_opt HAVE_COPYSIGN
+effect_opt HAVE_ERF
+effect_opt HAVE_HYPOT
+effect_opt HAVE_RINT
+effect_opt HAVE_LRINT
+effect_opt HAVE_LRINTF
+effect_opt HAVE_ROUND
+effect_opt HAVE_ROUNDF
+effect_opt HAVE_TRUNC
+effect_opt HAVE_TRUNCF
+effect_opt HAVE_GMTIME_R
+effect_opt HAVE_LOCALTIME_R
+effect_opt HAVE_PTHREAD_CANCEL
+effect_opt HAVE_PTHREADS
+effect_opt HAVE_THREADS
+effect_opt HAVE_SIMD_ALIGN_16
+
+cancel_opt HAVE_SYSCONF
+cancel_opt HAVE_SYSCTL
+cancel_opt HAVE_ATOMICS_NATIVE
+cancel_opt HAVE_LLRINTF
+cancel_opt HAVE_MMAP
+
+make clean
+
+echo "already adapt ffmpeg to liteos"
+}
+CURDIR=$(pwd)
+adapt_liteos
diff -uparN ffmpeg-3.4.1/compat/atomics/pthread/stdatomic.h ffmpeg-y/compat/atomics/pthread/stdatomic.h
--- ffmpeg-3.4.1/compat/atomics/pthread/stdatomic.h	2017-12-11 05:35:06.000000000 +0800
+++ ffmpeg-y/compat/atomics/pthread/stdatomic.h	2019-02-22 15:07:00.000000000 +0800
@@ -26,6 +26,8 @@
 
 #include <stdint.h>
 
+#define UNUSED(x) (void)x
+
 #define ATOMIC_FLAG_INIT 0
 
 #define ATOMIC_VAR_INIT(value) (value)
@@ -84,6 +86,7 @@ void avpriv_atomic_unlock(void);
 
 static inline void atomic_thread_fence(int order)
 {
+    UNUSED(order);
     avpriv_atomic_lock();
     avpriv_atomic_unlock();
 }
diff -uparN ffmpeg-3.4.1/disable_decoder_config.sh ffmpeg-y/disable_decoder_config.sh
--- ffmpeg-3.4.1/disable_decoder_config.sh	1970-01-01 08:00:00.000000000 +0800
+++ ffmpeg-y/disable_decoder_config.sh	2019-02-22 15:46:17.118289986 +0800
@@ -0,0 +1,72 @@
+echo `pwd`
+CUR_DIR=$(pwd)
+HIBERRY_DIR=$(pwd)/../../..
+source ${HIBERRY_DIR}/cfg.mak
+
+configure_attr=" --prefix=./install \
+    --enable-cross-compile \
+    --disable-doc \
+    --target-os=linux \
+    --enable-static \
+    --disable-shared \
+    --disable-debug \
+    --disable-iconv  \
+    --enable-small \
+    --disable-network \
+    --disable-filters \
+    --disable-devices \
+    --disable-programs \
+    --disable-swresample \
+    --disable-swscale \
+    --disable-avdevice \
+    --disable-postproc \
+    --disable-avfilter \
+    --enable-pic   \
+   --disable-everything   \
+   --enable-protocol=file \
+   --enable-demuxer=mov\
+   --disable-neon \
+   --disable-inline-asm \
+   --disable-asm \
+   --disable-armv6 \
+   --disable-armv6t2 \
+   --disable-armv5te \
+   --disable-vfp \
+   --disable-hardcoded-tables \
+   --disable-mediacodec
+   --enable-bsf=h264_mp4toannexb \
+   --enable-bsf=hevc_mp4toannexb \
+   --disable-pixelutils \
+   --enable-demuxer=wav \
+   --enable-muxer=wav \
+   --disable-gpl "
+
+
+if [ ${CFG_CHIP_TYPE} == "hi3559av100" ]; then
+echo "hi3559av100 =? ${CFG_CHIP_TYPE}"
+configure_attr+=" --arch=arm64  --cross-prefix=${CFG_SDK_TOOLCHAIN} "
+fi
+
+if [ ${CFG_CHIP_TYPE} == "hi3559"  -o  ${CFG_CHIP_TYPE} == "hi3556" ]; then
+echo "hi3559/hi3556 =? ${CFG_CHIP_TYPE}"
+configure_attr+=" --cpu=cortex-a7 --arch=armv7-a --cross-prefix=${CFG_SDK_TOOLCHAIN} "
+fi
+
+if [ ${CFG_CHIP_TYPE} == "hi3556av100" ]; then
+echo "hi3556av100 =? ${CFG_CHIP_TYPE}"
+configure_attr+=" --arch=armv7-a --cross-prefix=${CFG_SDK_TOOLCHAIN} "
+fi
+
+if [ ${CFG_CHIP_TYPE} == "hi3559v200" ]; then
+echo "hi3556av100 =? ${CFG_CHIP_TYPE}"
+configure_attr+=" --cpu=cortex-a7 --arch=armv7-a --cross-prefix=${CFG_SDK_TOOLCHAIN} "
+fi
+
+if [ ${CFG_CHIP_TYPE} == "hi3519av100" ]; then
+echo "hi3519av100 =? ${CFG_CHIP_TYPE}"
+configure_attr+=" --arch=armv7-a --cross-prefix=${CFG_SDK_TOOLCHAIN} "
+fi
+
+echo ${configure_attr}
+
+./configure  ${configure_attr}
diff -uparN ffmpeg-3.4.1/enable_decoder_config.sh ffmpeg-y/enable_decoder_config.sh
--- ffmpeg-3.4.1/enable_decoder_config.sh	1970-01-01 08:00:00.000000000 +0800
+++ ffmpeg-y/enable_decoder_config.sh	2019-02-22 15:07:00.000000000 +0800
@@ -0,0 +1,58 @@
+echo `pwd`
+CUR_DIR=$(pwd)
+HIBERRY_DIR=$(pwd)/../../..
+source ${HIBERRY_DIR}/cfg.mak
+
+configure_attr=" --prefix=./install \
+	--enable-small \
+	--disable-armv5te \
+	--disable-armv6 \
+	--disable-armv6t2 \
+	--disable-linux-perf\
+    --enable-static \
+    --disable-encoders \
+    --disable-muxers \
+    --disable-avfilter \
+    --disable-swscale \
+    --disable-demuxers \
+    --enable-demuxer=mov \
+	--disable-protocols \
+    --enable-protocol=file \
+	--disable-bsfs \
+    --enable-bsf=h264_mp4toannexb \
+    --enable-bsf=hevc_mp4toannexb \
+	--disable-parsers \
+    --disable-iconv \
+    --disable-avdevice \
+    --disable-network \
+    --disable-decoders \
+    --enable-decoder=h264 \
+    --enable-decoder=hevc \
+    --enable-decoder=mjpeg \
+    --enable-asm \
+    --disable-filters \
+    --enable-inline-asm \
+    --enable-neon \
+    --disable-shared \
+    --disable-debug \
+    --disable-doc \
+    --disable-swresample \
+    --disable-programs \
+    --disable-symver \
+    --target-os=linux \
+    --enable-cross-compile \
+    --cross-prefix=${CFG_SDK_TOOLCHAIN} "
+
+if [ ${CFG_CHIP_TYPE} == "hi3518ev300" ]; then
+echo "hi3518ev300 =? ${CFG_CHIP_TYPE}"
+configure_attr+=" --arch=arm --cpu=cortex-a7 "
+echo ${configure_attr} --extra-cflags="-mfloat-abi=softfp -mfpu=neon-vfpv4"
+./configure  ${configure_attr} --extra-cflags="-mfloat-abi=softfp -mfpu=neon-vfpv4"
+fi
+
+if [ ${CFG_CHIP_TYPE} == "hi3516cv300" ]; then
+echo "hi3516cv300 =? ${CFG_CHIP_TYPE}"
+configure_attr+=" --arch=arm --cpu=arm926ej-s --cross-prefix=${CFG_SDK_TOOLCHAIN} "
+./configure  ${configure_attr} --extra-cflags="-nostdlib -nostdinc -fPIC -mlong-calls" 
+fi
+
diff -uparN ffmpeg-3.4.1/libavcodec/avpacket.c ffmpeg-y/libavcodec/avpacket.c
--- ffmpeg-3.4.1/libavcodec/avpacket.c	2017-12-11 05:35:07.000000000 +0800
+++ ffmpeg-y/libavcodec/avpacket.c	2019-02-22 15:07:00.000000000 +0800
@@ -627,6 +627,7 @@ void av_packet_unref(AVPacket *pkt)
 int av_packet_ref(AVPacket *dst, const AVPacket *src)
 {
     int ret;
+#ifdef HISI_NOT_LOW_FLASH
 
     ret = av_packet_copy_props(dst, src);
     if (ret < 0)
@@ -655,10 +656,15 @@ int av_packet_ref(AVPacket *dst, const A
 fail:
     av_packet_free_side_data(dst);
     return ret;
+#else
+    return 0;
+#endif
 }
 
 AVPacket *av_packet_clone(const AVPacket *src)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     AVPacket *ret = av_packet_alloc();
 
     if (!ret)
@@ -668,10 +674,15 @@ AVPacket *av_packet_clone(const AVPacket
         av_packet_free(&ret);
 
     return ret;
+#else
+ return NULL;
+ 
+#endif
 }
 
 void av_packet_move_ref(AVPacket *dst, AVPacket *src)
 {
+
     *dst = *src;
     av_init_packet(src);
     src->data = NULL;
@@ -680,6 +691,8 @@ void av_packet_move_ref(AVPacket *dst, A
 
 void av_packet_rescale_ts(AVPacket *pkt, AVRational src_tb, AVRational dst_tb)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     if (pkt->pts != AV_NOPTS_VALUE)
         pkt->pts = av_rescale_q(pkt->pts, src_tb, dst_tb);
     if (pkt->dts != AV_NOPTS_VALUE)
@@ -692,10 +705,13 @@ FF_DISABLE_DEPRECATION_WARNINGS
         pkt->convergence_duration = av_rescale_q(pkt->convergence_duration, src_tb, dst_tb);
 FF_ENABLE_DEPRECATION_WARNINGS
 #endif
+
+#endif
 }
 
 int ff_side_data_set_encoder_stats(AVPacket *pkt, int quality, int64_t *error, int error_count, int pict_type)
 {
+#ifdef HISI_NOT_LOW_FLASH
     uint8_t *side_data;
     int side_data_size;
     int i;
@@ -715,6 +731,7 @@ int ff_side_data_set_encoder_stats(AVPac
     side_data[5] = error_count;
     for (i = 0; i<error_count; i++)
         AV_WL64(side_data+8 + 8*i , error[i]);
-
+#else
     return 0;
+#endif
 }
diff -uparN ffmpeg-3.4.1/libavcodec/codec_desc.c ffmpeg-y/libavcodec/codec_desc.c
--- ffmpeg-3.4.1/libavcodec/codec_desc.c	2017-12-11 05:35:07.000000000 +0800
+++ ffmpeg-y/libavcodec/codec_desc.c	2019-02-22 15:07:00.000000000 +0800
@@ -32,2615 +32,23 @@
 static const AVCodecDescriptor codec_descriptors[] = {
     /* video codecs */
     {
-        .id        = AV_CODEC_ID_MPEG1VIDEO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "mpeg1video",
-        .long_name = NULL_IF_CONFIG_SMALL("MPEG-1 video"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_REORDER,
-    },
-    {
-        .id        = AV_CODEC_ID_MPEG2VIDEO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "mpeg2video",
-        .long_name = NULL_IF_CONFIG_SMALL("MPEG-2 video"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_REORDER,
-        .profiles  = NULL_IF_CONFIG_SMALL(ff_mpeg2_video_profiles),
-    },
-#if FF_API_XVMC
-    {
-        .id        = AV_CODEC_ID_MPEG2VIDEO_XVMC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "mpegvideo_xvmc",
-        .long_name = NULL_IF_CONFIG_SMALL("MPEG-1/2 video XvMC (X-Video Motion Compensation)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-#endif /* FF_API_XVMC */
-    {
-        .id        = AV_CODEC_ID_H261,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "h261",
-        .long_name = NULL_IF_CONFIG_SMALL("H.261"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_H263,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "h263",
-        .long_name = NULL_IF_CONFIG_SMALL("H.263 / H.263-1996, H.263+ / H.263-1998 / H.263 version 2"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_REORDER,
-    },
-    {
-        .id        = AV_CODEC_ID_RV10,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "rv10",
-        .long_name = NULL_IF_CONFIG_SMALL("RealVideo 1.0"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_RV20,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "rv20",
-        .long_name = NULL_IF_CONFIG_SMALL("RealVideo 2.0"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_REORDER,
-    },
-    {
-        .id        = AV_CODEC_ID_MJPEG,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "mjpeg",
-        .long_name = NULL_IF_CONFIG_SMALL("Motion JPEG"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-        .mime_types= MT("image/jpeg"),
-    },
-    {
-        .id        = AV_CODEC_ID_MJPEGB,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "mjpegb",
-        .long_name = NULL_IF_CONFIG_SMALL("Apple MJPEG-B"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MPEG4,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "mpeg4",
-        .long_name = NULL_IF_CONFIG_SMALL("MPEG-4 part 2"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_REORDER,
-        .profiles  = NULL_IF_CONFIG_SMALL(ff_mpeg4_video_profiles),
-    },
-    {
-        .id        = AV_CODEC_ID_RAWVIDEO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "rawvideo",
-        .long_name = NULL_IF_CONFIG_SMALL("raw video"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_MSMPEG4V1,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "msmpeg4v1",
-        .long_name = NULL_IF_CONFIG_SMALL("MPEG-4 part 2 Microsoft variant version 1"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MSMPEG4V2,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "msmpeg4v2",
-        .long_name = NULL_IF_CONFIG_SMALL("MPEG-4 part 2 Microsoft variant version 2"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MSMPEG4V3,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "msmpeg4v3",
-        .long_name = NULL_IF_CONFIG_SMALL("MPEG-4 part 2 Microsoft variant version 3"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_WMV1,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "wmv1",
-        .long_name = NULL_IF_CONFIG_SMALL("Windows Media Video 7"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_WMV2,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "wmv2",
-        .long_name = NULL_IF_CONFIG_SMALL("Windows Media Video 8"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_H263P,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "h263p",
-        .long_name = NULL_IF_CONFIG_SMALL("H.263+ / H.263-1998 / H.263 version 2"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_REORDER,
-    },
-    {
-        .id        = AV_CODEC_ID_H263I,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "h263i",
-        .long_name = NULL_IF_CONFIG_SMALL("Intel H.263"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_REORDER,
-    },
-    {
-        .id        = AV_CODEC_ID_FLV1,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "flv1",
-        .long_name = NULL_IF_CONFIG_SMALL("FLV / Sorenson Spark / Sorenson H.263 (Flash Video)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_SVG,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "svg",
-        .long_name = NULL_IF_CONFIG_SMALL("Scalable Vector Graphics"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-        .mime_types= MT("image/svg+xml"),
-    },
-    {
-        .id        = AV_CODEC_ID_SVQ1,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "svq1",
-        .long_name = NULL_IF_CONFIG_SMALL("Sorenson Vector Quantizer 1 / Sorenson Video 1 / SVQ1"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_SVQ3,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "svq3",
-        .long_name = NULL_IF_CONFIG_SMALL("Sorenson Vector Quantizer 3 / Sorenson Video 3 / SVQ3"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_REORDER,
-    },
-    {
-        .id        = AV_CODEC_ID_DVVIDEO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "dvvideo",
-        .long_name = NULL_IF_CONFIG_SMALL("DV (Digital Video)"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_HUFFYUV,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "huffyuv",
-        .long_name = NULL_IF_CONFIG_SMALL("HuffYUV"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_CYUV,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "cyuv",
-        .long_name = NULL_IF_CONFIG_SMALL("Creative YUV (CYUV)"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_H264,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "h264",
-        .long_name = NULL_IF_CONFIG_SMALL("H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_LOSSLESS | AV_CODEC_PROP_REORDER,
-        .profiles  = NULL_IF_CONFIG_SMALL(ff_h264_profiles),
-    },
-    {
-        .id        = AV_CODEC_ID_INDEO3,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "indeo3",
-        .long_name = NULL_IF_CONFIG_SMALL("Intel Indeo 3"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_VP3,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "vp3",
-        .long_name = NULL_IF_CONFIG_SMALL("On2 VP3"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_THEORA,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "theora",
-        .long_name = NULL_IF_CONFIG_SMALL("Theora"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ASV1,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "asv1",
-        .long_name = NULL_IF_CONFIG_SMALL("ASUS V1"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ASV2,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "asv2",
-        .long_name = NULL_IF_CONFIG_SMALL("ASUS V2"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_FFV1,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "ffv1",
-        .long_name = NULL_IF_CONFIG_SMALL("FFmpeg video codec #1"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_4XM,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "4xm",
-        .long_name = NULL_IF_CONFIG_SMALL("4X Movie"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_VCR1,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "vcr1",
-        .long_name = NULL_IF_CONFIG_SMALL("ATI VCR1"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_CLJR,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "cljr",
-        .long_name = NULL_IF_CONFIG_SMALL("Cirrus Logic AccuPak"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MDEC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "mdec",
-        .long_name = NULL_IF_CONFIG_SMALL("Sony PlayStation MDEC (Motion DECoder)"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ROQ,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "roq",
-        .long_name = NULL_IF_CONFIG_SMALL("id RoQ video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_INTERPLAY_VIDEO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "interplayvideo",
-        .long_name = NULL_IF_CONFIG_SMALL("Interplay MVE video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_XAN_WC3,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "xan_wc3",
-        .long_name = NULL_IF_CONFIG_SMALL("Wing Commander III / Xan"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_XAN_WC4,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "xan_wc4",
-        .long_name = NULL_IF_CONFIG_SMALL("Wing Commander IV / Xxan"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_RPZA,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "rpza",
-        .long_name = NULL_IF_CONFIG_SMALL("QuickTime video (RPZA)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_CINEPAK,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "cinepak",
-        .long_name = NULL_IF_CONFIG_SMALL("Cinepak"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_WS_VQA,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "ws_vqa",
-        .long_name = NULL_IF_CONFIG_SMALL("Westwood Studios VQA (Vector Quantized Animation) video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MSRLE,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "msrle",
-        .long_name = NULL_IF_CONFIG_SMALL("Microsoft RLE"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_MSVIDEO1,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "msvideo1",
-        .long_name = NULL_IF_CONFIG_SMALL("Microsoft Video 1"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_IDCIN,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "idcin",
-        .long_name = NULL_IF_CONFIG_SMALL("id Quake II CIN video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_8BPS,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "8bps",
-        .long_name = NULL_IF_CONFIG_SMALL("QuickTime 8BPS video"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_SMC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "smc",
-        .long_name = NULL_IF_CONFIG_SMALL("QuickTime Graphics (SMC)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_FLIC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "flic",
-        .long_name = NULL_IF_CONFIG_SMALL("Autodesk Animator Flic video"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_TRUEMOTION1,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "truemotion1",
-        .long_name = NULL_IF_CONFIG_SMALL("Duck TrueMotion 1.0"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_VMDVIDEO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "vmdvideo",
-        .long_name = NULL_IF_CONFIG_SMALL("Sierra VMD video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MSZH,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "mszh",
-        .long_name = NULL_IF_CONFIG_SMALL("LCL (LossLess Codec Library) MSZH"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_ZLIB,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "zlib",
-        .long_name = NULL_IF_CONFIG_SMALL("LCL (LossLess Codec Library) ZLIB"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_QTRLE,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "qtrle",
-        .long_name = NULL_IF_CONFIG_SMALL("QuickTime Animation (RLE) video"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_SNOW,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "snow",
-        .long_name = NULL_IF_CONFIG_SMALL("Snow"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_TSCC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "tscc",
-        .long_name = NULL_IF_CONFIG_SMALL("TechSmith Screen Capture Codec"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_ULTI,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "ulti",
-        .long_name = NULL_IF_CONFIG_SMALL("IBM UltiMotion"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_QDRAW,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "qdraw",
-        .long_name = NULL_IF_CONFIG_SMALL("Apple QuickDraw"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_VIXL,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "vixl",
-        .long_name = NULL_IF_CONFIG_SMALL("Miro VideoXL"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_QPEG,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "qpeg",
-        .long_name = NULL_IF_CONFIG_SMALL("Q-team QPEG"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_FFVHUFF,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "ffvhuff",
-        .long_name = NULL_IF_CONFIG_SMALL("Huffyuv FFmpeg variant"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_RV30,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "rv30",
-        .long_name = NULL_IF_CONFIG_SMALL("RealVideo 3.0"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_REORDER,
-    },
-    {
-        .id        = AV_CODEC_ID_RV40,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "rv40",
-        .long_name = NULL_IF_CONFIG_SMALL("RealVideo 4.0"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_REORDER,
-    },
-    {
-        .id        = AV_CODEC_ID_VC1,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "vc1",
-        .long_name = NULL_IF_CONFIG_SMALL("SMPTE VC-1"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_REORDER,
-        .profiles  = NULL_IF_CONFIG_SMALL(ff_vc1_profiles),
-    },
-    {
-        .id        = AV_CODEC_ID_WMV3,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "wmv3",
-        .long_name = NULL_IF_CONFIG_SMALL("Windows Media Video 9"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_REORDER,
-        .profiles  = NULL_IF_CONFIG_SMALL(ff_vc1_profiles),
-    },
-    {
-        .id        = AV_CODEC_ID_LOCO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "loco",
-        .long_name = NULL_IF_CONFIG_SMALL("LOCO"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_WNV1,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "wnv1",
-        .long_name = NULL_IF_CONFIG_SMALL("Winnov WNV1"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_AASC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "aasc",
-        .long_name = NULL_IF_CONFIG_SMALL("Autodesk RLE"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_INDEO2,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "indeo2",
-        .long_name = NULL_IF_CONFIG_SMALL("Intel Indeo 2"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_FRAPS,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "fraps",
-        .long_name = NULL_IF_CONFIG_SMALL("Fraps"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_TRUEMOTION2,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "truemotion2",
-        .long_name = NULL_IF_CONFIG_SMALL("Duck TrueMotion 2.0"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_BMP,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "bmp",
-        .long_name = NULL_IF_CONFIG_SMALL("BMP (Windows and OS/2 bitmap)"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-        .mime_types= MT("image/x-ms-bmp"),
-    },
-    {
-        .id        = AV_CODEC_ID_CSCD,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "cscd",
-        .long_name = NULL_IF_CONFIG_SMALL("CamStudio"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_MMVIDEO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "mmvideo",
-        .long_name = NULL_IF_CONFIG_SMALL("American Laser Games MM Video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ZMBV,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "zmbv",
-        .long_name = NULL_IF_CONFIG_SMALL("Zip Motion Blocks Video"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_AVS,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "avs",
-        .long_name = NULL_IF_CONFIG_SMALL("AVS (Audio Video Standard) video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_SMACKVIDEO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "smackvideo",
-        .long_name = NULL_IF_CONFIG_SMALL("Smacker video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_NUV,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "nuv",
-        .long_name = NULL_IF_CONFIG_SMALL("NuppelVideo/RTJPEG"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_KMVC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "kmvc",
-        .long_name = NULL_IF_CONFIG_SMALL("Karl Morton's video codec"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_FLASHSV,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "flashsv",
-        .long_name = NULL_IF_CONFIG_SMALL("Flash Screen Video v1"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_CAVS,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "cavs",
-        .long_name = NULL_IF_CONFIG_SMALL("Chinese AVS (Audio Video Standard) (AVS1-P2, JiZhun profile)"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_REORDER,
-    },
-    {
-        .id        = AV_CODEC_ID_JPEG2000,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "jpeg2000",
-        .long_name = NULL_IF_CONFIG_SMALL("JPEG 2000"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY |
-                     AV_CODEC_PROP_LOSSLESS,
-        .mime_types= MT("image/jp2"),
-        .profiles  = NULL_IF_CONFIG_SMALL(ff_jpeg2000_profiles),
-    },
-    {
-        .id        = AV_CODEC_ID_VMNC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "vmnc",
-        .long_name = NULL_IF_CONFIG_SMALL("VMware Screen Codec / VMware Video"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_VP5,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "vp5",
-        .long_name = NULL_IF_CONFIG_SMALL("On2 VP5"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_VP6,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "vp6",
-        .long_name = NULL_IF_CONFIG_SMALL("On2 VP6"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_VP6F,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "vp6f",
-        .long_name = NULL_IF_CONFIG_SMALL("On2 VP6 (Flash version)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_DSICINVIDEO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "dsicinvideo",
-        .long_name = NULL_IF_CONFIG_SMALL("Delphine Software International CIN video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_TIERTEXSEQVIDEO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "tiertexseqvideo",
-        .long_name = NULL_IF_CONFIG_SMALL("Tiertex Limited SEQ video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_DXA,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "dxa",
-        .long_name = NULL_IF_CONFIG_SMALL("Feeble Files/ScummVM DXA"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_DNXHD,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "dnxhd",
-        .long_name = NULL_IF_CONFIG_SMALL("VC3/DNxHD"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-        .profiles  = NULL_IF_CONFIG_SMALL(ff_dnxhd_profiles),
-    },
-    {
-        .id        = AV_CODEC_ID_THP,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "thp",
-        .long_name = NULL_IF_CONFIG_SMALL("Nintendo Gamecube THP video"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_C93,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "c93",
-        .long_name = NULL_IF_CONFIG_SMALL("Interplay C93"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_BETHSOFTVID,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "bethsoftvid",
-        .long_name = NULL_IF_CONFIG_SMALL("Bethesda VID video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_VP6A,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "vp6a",
-        .long_name = NULL_IF_CONFIG_SMALL("On2 VP6 (Flash version, with alpha channel)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_AMV,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "amv",
-        .long_name = NULL_IF_CONFIG_SMALL("AMV Video"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_VB,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "vb",
-        .long_name = NULL_IF_CONFIG_SMALL("Beam Software VB"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_INDEO4,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "indeo4",
-        .long_name = NULL_IF_CONFIG_SMALL("Intel Indeo Video Interactive 4"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_INDEO5,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "indeo5",
-        .long_name = NULL_IF_CONFIG_SMALL("Intel Indeo Video Interactive 5"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MIMIC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "mimic",
-        .long_name = NULL_IF_CONFIG_SMALL("Mimic"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_RL2,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "rl2",
-        .long_name = NULL_IF_CONFIG_SMALL("RL2 video"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ESCAPE124,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "escape124",
-        .long_name = NULL_IF_CONFIG_SMALL("Escape 124"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_DAALA,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "daala",
-        .long_name = NULL_IF_CONFIG_SMALL("Daala"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_DIRAC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "dirac",
-        .long_name = NULL_IF_CONFIG_SMALL("Dirac"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_LOSSLESS | AV_CODEC_PROP_REORDER,
-    },
-    {
-        .id        = AV_CODEC_ID_BFI,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "bfi",
-        .long_name = NULL_IF_CONFIG_SMALL("Brute Force & Ignorance"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_CMV,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "cmv",
-        .long_name = NULL_IF_CONFIG_SMALL("Electronic Arts CMV video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MOTIONPIXELS,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "motionpixels",
-        .long_name = NULL_IF_CONFIG_SMALL("Motion Pixels video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_TGV,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "tgv",
-        .long_name = NULL_IF_CONFIG_SMALL("Electronic Arts TGV video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_TGQ,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "tgq",
-        .long_name = NULL_IF_CONFIG_SMALL("Electronic Arts TGQ video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_TQI,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "tqi",
-        .long_name = NULL_IF_CONFIG_SMALL("Electronic Arts TQI video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_AURA,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "aura",
-        .long_name = NULL_IF_CONFIG_SMALL("Auravision AURA"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_AURA2,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "aura2",
-        .long_name = NULL_IF_CONFIG_SMALL("Auravision Aura 2"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_V210X,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "v210x",
-        .long_name = NULL_IF_CONFIG_SMALL("Uncompressed 4:2:2 10-bit"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_TMV,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "tmv",
-        .long_name = NULL_IF_CONFIG_SMALL("8088flex TMV"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_V210,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "v210",
-        .long_name = NULL_IF_CONFIG_SMALL("Uncompressed 4:2:2 10-bit"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_MAD,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "mad",
-        .long_name = NULL_IF_CONFIG_SMALL("Electronic Arts Madcow Video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_FRWU,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "frwu",
-        .long_name = NULL_IF_CONFIG_SMALL("Forward Uncompressed"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_FLASHSV2,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "flashsv2",
-        .long_name = NULL_IF_CONFIG_SMALL("Flash Screen Video v2"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_CDGRAPHICS,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "cdgraphics",
-        .long_name = NULL_IF_CONFIG_SMALL("CD Graphics video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_R210,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "r210",
-        .long_name = NULL_IF_CONFIG_SMALL("Uncompressed RGB 10-bit"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_ANM,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "anm",
-        .long_name = NULL_IF_CONFIG_SMALL("Deluxe Paint Animation"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_BINKVIDEO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "binkvideo",
-        .long_name = NULL_IF_CONFIG_SMALL("Bink video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_IFF_ILBM,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "iff_ilbm",
-        .long_name = NULL_IF_CONFIG_SMALL("IFF ACBM/ANIM/DEEP/ILBM/PBM/RGB8/RGBN"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_KGV1,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "kgv1",
-        .long_name = NULL_IF_CONFIG_SMALL("Kega Game Video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_YOP,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "yop",
-        .long_name = NULL_IF_CONFIG_SMALL("Psygnosis YOP Video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_VP8,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "vp8",
-        .long_name = NULL_IF_CONFIG_SMALL("On2 VP8"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_VP9,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "vp9",
-        .long_name = NULL_IF_CONFIG_SMALL("Google VP9"),
-        .props     = AV_CODEC_PROP_LOSSY,
-        .profiles  = NULL_IF_CONFIG_SMALL(ff_vp9_profiles),
-    },
-    {
-        .id        = AV_CODEC_ID_PICTOR,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "pictor",
-        .long_name = NULL_IF_CONFIG_SMALL("Pictor/PC Paint"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_A64_MULTI,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "a64_multi",
-        .long_name = NULL_IF_CONFIG_SMALL("Multicolor charset for Commodore 64"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_A64_MULTI5,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "a64_multi5",
-        .long_name = NULL_IF_CONFIG_SMALL("Multicolor charset for Commodore 64, extended with 5th color (colram)"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_R10K,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "r10k",
-        .long_name = NULL_IF_CONFIG_SMALL("AJA Kona 10-bit RGB Codec"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_M101,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "m101",
-        .long_name = NULL_IF_CONFIG_SMALL("Matrox Uncompressed SD"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_MVC1,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "mvc1",
-        .long_name = NULL_IF_CONFIG_SMALL("Silicon Graphics Motion Video Compressor 1"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MVC2,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "mvc2",
-        .long_name = NULL_IF_CONFIG_SMALL("Silicon Graphics Motion Video Compressor 2"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MXPEG,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "mxpeg",
-        .long_name = NULL_IF_CONFIG_SMALL("Mobotix MxPEG video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_LAGARITH,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "lagarith",
-        .long_name = NULL_IF_CONFIG_SMALL("Lagarith lossless"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PRORES,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "prores",
-        .long_name = NULL_IF_CONFIG_SMALL("Apple ProRes (iCodec Pro)"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_JV,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "jv",
-        .long_name = NULL_IF_CONFIG_SMALL("Bitmap Brothers JV video"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_DFA,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "dfa",
-        .long_name = NULL_IF_CONFIG_SMALL("Chronomaster DFA"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_UTVIDEO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "utvideo",
-        .long_name = NULL_IF_CONFIG_SMALL("Ut Video"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_BMV_VIDEO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "bmv_video",
-        .long_name = NULL_IF_CONFIG_SMALL("Discworld II BMV video"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_VBLE,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "vble",
-        .long_name = NULL_IF_CONFIG_SMALL("VBLE Lossless Codec"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_DXTORY,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "dxtory",
-        .long_name = NULL_IF_CONFIG_SMALL("Dxtory"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_V410,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "v410",
-        .long_name = NULL_IF_CONFIG_SMALL("Uncompressed 4:4:4 10-bit"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_CDXL,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "cdxl",
-        .long_name = NULL_IF_CONFIG_SMALL("Commodore CDXL video"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ZEROCODEC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "zerocodec",
-        .long_name = NULL_IF_CONFIG_SMALL("ZeroCodec Lossless Video"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_MSS1,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "mss1",
-        .long_name = NULL_IF_CONFIG_SMALL("MS Screen 1"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MSA1,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "msa1",
-        .long_name = NULL_IF_CONFIG_SMALL("MS ATC Screen"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_TSCC2,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "tscc2",
-        .long_name = NULL_IF_CONFIG_SMALL("TechSmith Screen Codec 2"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MTS2,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "mts2",
-        .long_name = NULL_IF_CONFIG_SMALL("MS Expression Encoder Screen"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_CLLC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "cllc",
-        .long_name = NULL_IF_CONFIG_SMALL("Canopus Lossless Codec"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_MSS2,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "mss2",
-        .long_name = NULL_IF_CONFIG_SMALL("MS Windows Media Video V9 Screen"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_AIC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "aic",
-        .long_name = NULL_IF_CONFIG_SMALL("Apple Intermediate Codec"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_Y41P,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "y41p",
-        .long_name = NULL_IF_CONFIG_SMALL("Uncompressed YUV 4:1:1 12-bit"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_ESCAPE130,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "escape130",
-        .long_name = NULL_IF_CONFIG_SMALL("Escape 130"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_AVRP,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "avrp",
-        .long_name = NULL_IF_CONFIG_SMALL("Avid 1:1 10-bit RGB Packer"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_012V,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "012v",
-        .long_name = NULL_IF_CONFIG_SMALL("Uncompressed 4:2:2 10-bit"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_AVUI,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "avui",
-        .long_name = NULL_IF_CONFIG_SMALL("Avid Meridien Uncompressed"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_AYUV,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "ayuv",
-        .long_name = NULL_IF_CONFIG_SMALL("Uncompressed packed MS 4:4:4:4"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_TARGA_Y216,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "targa_y216",
-        .long_name = NULL_IF_CONFIG_SMALL("Pinnacle TARGA CineWave YUV16"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_V308,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "v308",
-        .long_name = NULL_IF_CONFIG_SMALL("Uncompressed packed 4:4:4"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_V408,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "v408",
-        .long_name = NULL_IF_CONFIG_SMALL("Uncompressed packed QT 4:4:4:4"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_YUV4,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "yuv4",
-        .long_name = NULL_IF_CONFIG_SMALL("Uncompressed packed 4:2:0"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_AVRN,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "avrn",
-        .long_name = NULL_IF_CONFIG_SMALL("Avid AVI Codec"),
-    },
-    {
-        .id        = AV_CODEC_ID_CPIA,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "cpia",
-        .long_name = NULL_IF_CONFIG_SMALL("CPiA video format"),
-    },
-    {
-        .id        = AV_CODEC_ID_XFACE,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "xface",
-        .long_name = NULL_IF_CONFIG_SMALL("X-face image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_SMVJPEG,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "smvjpeg",
-        .long_name = NULL_IF_CONFIG_SMALL("Sigmatel Motion Video"),
-    },
-
-    {
-        .id        = AV_CODEC_ID_G2M,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "g2m",
-        .long_name = NULL_IF_CONFIG_SMALL("Go2Meeting"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_HNM4_VIDEO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "hnm4video",
-        .long_name = NULL_IF_CONFIG_SMALL("HNM 4 video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_HEVC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "hevc",
-        .long_name = NULL_IF_CONFIG_SMALL("H.265 / HEVC (High Efficiency Video Coding)"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_REORDER,
-        .profiles  = NULL_IF_CONFIG_SMALL(ff_hevc_profiles),
-    },
-    {
-        .id        = AV_CODEC_ID_FIC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "fic",
-        .long_name = NULL_IF_CONFIG_SMALL("Mirillis FIC"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_PAF_VIDEO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "paf_video",
-        .long_name = NULL_IF_CONFIG_SMALL("Amazing Studio Packed Animation File Video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_VP7,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "vp7",
-        .long_name = NULL_IF_CONFIG_SMALL("On2 VP7"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_SANM,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "sanm",
-        .long_name = NULL_IF_CONFIG_SMALL("LucasArts SANM/SMUSH video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_SGIRLE,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "sgirle",
-        .long_name = NULL_IF_CONFIG_SMALL("SGI RLE 8-bit"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_HQX,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "hqx",
-        .long_name = NULL_IF_CONFIG_SMALL("Canopus HQX"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_HQ_HQA,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "hq_hqa",
-        .long_name = NULL_IF_CONFIG_SMALL("Canopus HQ/HQA"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_HAP,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "hap",
-        .long_name = NULL_IF_CONFIG_SMALL("Vidvox Hap"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_DXV,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "dxv",
-        .long_name = NULL_IF_CONFIG_SMALL("Resolume DXV"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_SCREENPRESSO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "screenpresso",
-        .long_name = NULL_IF_CONFIG_SMALL("Screenpresso"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_SPEEDHQ,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "speedhq",
-        .long_name = NULL_IF_CONFIG_SMALL("NewTek SpeedHQ"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_WRAPPED_AVFRAME,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "wrapped_avframe",
-        .long_name = NULL_IF_CONFIG_SMALL("AVFrame to AVPacket passthrough"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_RSCC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "rscc",
-        .long_name = NULL_IF_CONFIG_SMALL("innoHeim/Rsupport Screen Capture Codec"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_MAGICYUV,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "magicyuv",
-        .long_name = NULL_IF_CONFIG_SMALL("MagicYUV video"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_TRUEMOTION2RT,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "truemotion2rt",
-        .long_name = NULL_IF_CONFIG_SMALL("Duck TrueMotion 2.0 Real Time"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_CFHD,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "cfhd",
-        .long_name = NULL_IF_CONFIG_SMALL("Cineform HD"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_SHEERVIDEO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "sheervideo",
-        .long_name = NULL_IF_CONFIG_SMALL("BitJazz SheerVideo"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_YLC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "ylc",
-        .long_name = NULL_IF_CONFIG_SMALL("YUY2 Lossless Codec"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PIXLET,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "pixlet",
-        .long_name = NULL_IF_CONFIG_SMALL("Apple Pixlet"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_FMVC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "fmvc",
-        .long_name = NULL_IF_CONFIG_SMALL("FM Screen Capture Codec"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_SCPR,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "scpr",
-        .long_name = NULL_IF_CONFIG_SMALL("ScreenPressor"),
-        .props     = AV_CODEC_PROP_LOSSLESS | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_CLEARVIDEO,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "clearvideo",
-        .long_name = NULL_IF_CONFIG_SMALL("Iterated Systems ClearVideo"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_AV1,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "av1",
-        .long_name = NULL_IF_CONFIG_SMALL("Alliance for Open Media AV1"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_BITPACKED,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "bitpacked",
-        .long_name = NULL_IF_CONFIG_SMALL("Bitpacked"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_MSCC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "mscc",
-        .long_name = NULL_IF_CONFIG_SMALL("Mandsoft Screen Capture Codec"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_SRGC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "srgc",
-        .long_name = NULL_IF_CONFIG_SMALL("Screen Recorder Gold Codec"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_GDV,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "gdv",
-        .long_name = NULL_IF_CONFIG_SMALL("Gremlin Digital Video"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-
-    /* image codecs */
-    {
-        .id        = AV_CODEC_ID_ALIAS_PIX,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "alias_pix",
-        .long_name = NULL_IF_CONFIG_SMALL("Alias/Wavefront PIX image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_ANSI,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "ansi",
-        .long_name = NULL_IF_CONFIG_SMALL("ASCII/ANSI art"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_BRENDER_PIX,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "brender_pix",
-        .long_name = NULL_IF_CONFIG_SMALL("BRender PIX image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_DDS,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "dds",
-        .long_name = NULL_IF_CONFIG_SMALL("DirectDraw Surface image decoder"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY |
-                     AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_DPX,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "dpx",
-        .long_name = NULL_IF_CONFIG_SMALL("DPX (Digital Picture Exchange) image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_EXR,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "exr",
-        .long_name = NULL_IF_CONFIG_SMALL("OpenEXR image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY |
-                     AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_FITS,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "fits",
-        .long_name = NULL_IF_CONFIG_SMALL("FITS (Flexible Image Transport System)"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_GIF,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "gif",
-        .long_name = NULL_IF_CONFIG_SMALL("GIF (Graphics Interchange Format)"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-        .mime_types= MT("image/gif"),
-    },
-    {
-        .id        = AV_CODEC_ID_JPEGLS,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "jpegls",
-        .long_name = NULL_IF_CONFIG_SMALL("JPEG-LS"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY |
-                     AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_LJPEG,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "ljpeg",
-        .long_name = NULL_IF_CONFIG_SMALL("Lossless JPEG"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PAM,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "pam",
-        .long_name = NULL_IF_CONFIG_SMALL("PAM (Portable AnyMap) image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-        .mime_types= MT("image/x-portable-pixmap"),
-    },
-    {
-        .id        = AV_CODEC_ID_PBM,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "pbm",
-        .long_name = NULL_IF_CONFIG_SMALL("PBM (Portable BitMap) image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCX,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "pcx",
-        .long_name = NULL_IF_CONFIG_SMALL("PC Paintbrush PCX image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-        .mime_types= MT("image/x-pcx"),
-    },
-    {
-        .id        = AV_CODEC_ID_PGM,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "pgm",
-        .long_name = NULL_IF_CONFIG_SMALL("PGM (Portable GrayMap) image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PGMYUV,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "pgmyuv",
-        .long_name = NULL_IF_CONFIG_SMALL("PGMYUV (Portable GrayMap YUV) image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PNG,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "png",
-        .long_name = NULL_IF_CONFIG_SMALL("PNG (Portable Network Graphics) image"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-        .mime_types= MT("image/png"),
-    },
-    {
-        .id        = AV_CODEC_ID_PPM,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "ppm",
-        .long_name = NULL_IF_CONFIG_SMALL("PPM (Portable PixelMap) image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PSD,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "psd",
-        .long_name = NULL_IF_CONFIG_SMALL("Photoshop PSD file"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PTX,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "ptx",
-        .long_name = NULL_IF_CONFIG_SMALL("V.Flash PTX image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_SGI,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "sgi",
-        .long_name = NULL_IF_CONFIG_SMALL("SGI image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_SP5X,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "sp5x",
-        .long_name = NULL_IF_CONFIG_SMALL("Sunplus JPEG (SP5X)"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_SUNRAST,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "sunrast",
-        .long_name = NULL_IF_CONFIG_SMALL("Sun Rasterfile image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_TARGA,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "targa",
-        .long_name = NULL_IF_CONFIG_SMALL("Truevision Targa image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-        .mime_types= MT("image/x-targa", "image/x-tga"),
-    },
-    {
-        .id        = AV_CODEC_ID_TDSC,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "tdsc",
-        .long_name = NULL_IF_CONFIG_SMALL("TDSC"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_TIFF,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "tiff",
-        .long_name = NULL_IF_CONFIG_SMALL("TIFF image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-        .mime_types= MT("image/tiff"),
-    },
-    {
-        .id        = AV_CODEC_ID_TXD,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "txd",
-        .long_name = NULL_IF_CONFIG_SMALL("Renderware TXD (TeXture Dictionary) image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_VC1IMAGE,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "vc1image",
-        .long_name = NULL_IF_CONFIG_SMALL("Windows Media Video 9 Image v2"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_WEBP,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "webp",
-        .long_name = NULL_IF_CONFIG_SMALL("WebP"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSY |
-                     AV_CODEC_PROP_LOSSLESS,
-        .mime_types= MT("image/webp"),
-    },
-    {
-        .id        = AV_CODEC_ID_WMV3IMAGE,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "wmv3image",
-        .long_name = NULL_IF_CONFIG_SMALL("Windows Media Video 9 Image"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_XBM,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "xbm",
-        .long_name = NULL_IF_CONFIG_SMALL("XBM (X BitMap) image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-        .mime_types= MT("image/x-xbitmap"),
-    },
-    {
-        .id        = AV_CODEC_ID_XPM,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "xpm",
-        .long_name = NULL_IF_CONFIG_SMALL("XPM (X PixMap) image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-        .mime_types= MT("image/x-xpixmap"),
-    },
-    {
-        .id        = AV_CODEC_ID_XWD,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "xwd",
-        .long_name = NULL_IF_CONFIG_SMALL("XWD (X Window Dump) image"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-        .mime_types= MT("image/x-xwindowdump"),
-    },
-    {
-        .id        = AV_CODEC_ID_APNG,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "apng",
-        .long_name = NULL_IF_CONFIG_SMALL("APNG (Animated Portable Network Graphics) image"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-        .mime_types= MT("image/png"),
-    },
-
-    /* various PCM "codecs" */
-    {
-        .id        = AV_CODEC_ID_PCM_S16LE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_s16le",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM signed 16-bit little-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_S16BE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_s16be",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM signed 16-bit big-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_U16LE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_u16le",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM unsigned 16-bit little-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_U16BE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_u16be",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM unsigned 16-bit big-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_S8,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_s8",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM signed 8-bit"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_U8,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_u8",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM unsigned 8-bit"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_MULAW,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_mulaw",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM mu-law / G.711 mu-law"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_ALAW,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_alaw",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM A-law / G.711 A-law"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_S32LE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_s32le",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM signed 32-bit little-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_S32BE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_s32be",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM signed 32-bit big-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_S64LE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_s64le",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM signed 64-bit little-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_S64BE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_s64be",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM signed 64-bit big-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_U32LE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_u32le",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM unsigned 32-bit little-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_U32BE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_u32be",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM unsigned 32-bit big-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_S24LE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_s24le",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM signed 24-bit little-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_S24BE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_s24be",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM signed 24-bit big-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_U24LE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_u24le",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM unsigned 24-bit little-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_U24BE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_u24be",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM unsigned 24-bit big-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_S24DAUD,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_s24daud",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM D-Cinema audio signed 24-bit"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_ZORK,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_zork",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM Zork"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_S16BE_PLANAR,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_s16be_planar",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM signed 16-bit big-endian planar"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_S16LE_PLANAR,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_s16le_planar",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM signed 16-bit little-endian planar"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_S24LE_PLANAR,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_s24le_planar",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM signed 24-bit little-endian planar"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_S32LE_PLANAR,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_s32le_planar",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM signed 32-bit little-endian planar"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_DVD,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_dvd",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM signed 20|24-bit big-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_F16LE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_f16le",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM 16.8 floating point little-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_F24LE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_f24le",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM 24.0 floating point little-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_F32BE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_f32be",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM 32-bit floating point big-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_F32LE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_f32le",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM 32-bit floating point little-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_F64BE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_f64be",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM 64-bit floating point big-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_F64LE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_f64le",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM 64-bit floating point little-endian"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_BLURAY,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_bluray",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM signed 16|20|24-bit big-endian for Blu-ray media"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_LXF,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_lxf",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM signed 20-bit little-endian planar"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_S302M,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "s302m",
-        .long_name = NULL_IF_CONFIG_SMALL("SMPTE 302M"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_PCM_S8_PLANAR,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "pcm_s8_planar",
-        .long_name = NULL_IF_CONFIG_SMALL("PCM signed 8-bit planar"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-
-    /* various ADPCM codecs */
-    {
-        .id        = AV_CODEC_ID_ADPCM_IMA_QT,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ima_qt",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM IMA QuickTime"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_IMA_WAV,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ima_wav",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM IMA WAV"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_IMA_DK3,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ima_dk3",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM IMA Duck DK3"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_IMA_DK4,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ima_dk4",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM IMA Duck DK4"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_IMA_WS,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ima_ws",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM IMA Westwood"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_IMA_SMJPEG,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ima_smjpeg",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM IMA Loki SDL MJPEG"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_MS,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ms",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Microsoft"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_4XM,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_4xm",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM 4X Movie"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_XA,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_xa",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM CDROM XA"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_ADX,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_adx",
-        .long_name = NULL_IF_CONFIG_SMALL("SEGA CRI ADX ADPCM"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_EA,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ea",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Electronic Arts"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_G726,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_g726",
-        .long_name = NULL_IF_CONFIG_SMALL("G.726 ADPCM"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_CT,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ct",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Creative Technology"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_SWF,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_swf",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Shockwave Flash"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_YAMAHA,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_yamaha",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Yamaha"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_SBPRO_4,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_sbpro_4",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Sound Blaster Pro 4-bit"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_SBPRO_3,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_sbpro_3",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Sound Blaster Pro 2.6-bit"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_SBPRO_2,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_sbpro_2",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Sound Blaster Pro 2-bit"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_THP,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_thp",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Nintendo THP"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_THP_LE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_thp_le",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Nintendo THP (Little-Endian)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_IMA_AMV,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ima_amv",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM IMA AMV"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_EA_R1,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ea_r1",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Electronic Arts R1"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_EA_R3,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ea_r3",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Electronic Arts R3"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_EA_R2,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ea_r2",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Electronic Arts R2"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_IMA_EA_SEAD,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ima_ea_sead",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM IMA Electronic Arts SEAD"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_IMA_EA_EACS,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ima_ea_eacs",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM IMA Electronic Arts EACS"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_EA_XAS,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ea_xas",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Electronic Arts XAS"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_EA_MAXIS_XA,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ea_maxis_xa",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Electronic Arts Maxis CDROM XA"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_IMA_ISS,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ima_iss",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM IMA Funcom ISS"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_G722,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_g722",
-        .long_name = NULL_IF_CONFIG_SMALL("G.722 ADPCM"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_IMA_APC,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ima_apc",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM IMA CRYO APC"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_AFC,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_afc",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Nintendo Gamecube AFC"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_IMA_OKI,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ima_oki",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM IMA Dialogic OKI"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_DTK,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_dtk",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Nintendo Gamecube DTK"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_IMA_RAD,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ima_rad",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM IMA Radical"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_G726LE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_g726le",
-        .long_name = NULL_IF_CONFIG_SMALL("G.726 ADPCM little-endian"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_VIMA,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_vima",
-        .long_name = NULL_IF_CONFIG_SMALL("LucasArts VIMA audio"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_PSX,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_psx",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Playstation"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_AICA,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_aica",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM Yamaha AICA"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_IMA_DAT4,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_ima_dat4",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM IMA Eurocom DAT4"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-
-    /* AMR */
-    {
-        .id        = AV_CODEC_ID_AMR_NB,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "amr_nb",
-        .long_name = NULL_IF_CONFIG_SMALL("AMR-NB (Adaptive Multi-Rate NarrowBand)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_AMR_WB,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "amr_wb",
-        .long_name = NULL_IF_CONFIG_SMALL("AMR-WB (Adaptive Multi-Rate WideBand)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-
-    /* RealAudio codecs*/
-    {
-        .id        = AV_CODEC_ID_RA_144,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "ra_144",
-        .long_name = NULL_IF_CONFIG_SMALL("RealAudio 1.0 (14.4K)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_RA_288,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "ra_288",
-        .long_name = NULL_IF_CONFIG_SMALL("RealAudio 2.0 (28.8K)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-
-    /* various DPCM codecs */
-    {
-        .id        = AV_CODEC_ID_ROQ_DPCM,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "roq_dpcm",
-        .long_name = NULL_IF_CONFIG_SMALL("DPCM id RoQ"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_INTERPLAY_DPCM,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "interplay_dpcm",
-        .long_name = NULL_IF_CONFIG_SMALL("DPCM Interplay"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_XAN_DPCM,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "xan_dpcm",
-        .long_name = NULL_IF_CONFIG_SMALL("DPCM Xan"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_SOL_DPCM,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "sol_dpcm",
-        .long_name = NULL_IF_CONFIG_SMALL("DPCM Sol"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_SDX2_DPCM,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "sdx2_dpcm",
-        .long_name = NULL_IF_CONFIG_SMALL("DPCM Squareroot-Delta-Exact"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_GREMLIN_DPCM,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "gremlin_dpcm",
-        .long_name = NULL_IF_CONFIG_SMALL("DPCM Gremlin"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-
-    /* audio codecs */
-    {
-        .id        = AV_CODEC_ID_MP2,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "mp2",
-        .long_name = NULL_IF_CONFIG_SMALL("MP2 (MPEG audio layer 2)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MP3,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "mp3",
-        .long_name = NULL_IF_CONFIG_SMALL("MP3 (MPEG audio layer 3)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_AAC,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "aac",
-        .long_name = NULL_IF_CONFIG_SMALL("AAC (Advanced Audio Coding)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-        .profiles  = NULL_IF_CONFIG_SMALL(ff_aac_profiles),
-    },
-    {
-        .id        = AV_CODEC_ID_AC3,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "ac3",
-        .long_name = NULL_IF_CONFIG_SMALL("ATSC A/52A (AC-3)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_DTS,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "dts",
-        .long_name = NULL_IF_CONFIG_SMALL("DCA (DTS Coherent Acoustics)"),
-        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_LOSSLESS,
-        .profiles  = NULL_IF_CONFIG_SMALL(ff_dca_profiles),
-    },
-    {
-        .id        = AV_CODEC_ID_VORBIS,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "vorbis",
-        .long_name = NULL_IF_CONFIG_SMALL("Vorbis"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_DVAUDIO,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "dvaudio",
-        .long_name = NULL_IF_CONFIG_SMALL("DV audio"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_WMAV1,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "wmav1",
-        .long_name = NULL_IF_CONFIG_SMALL("Windows Media Audio 1"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_WMAV2,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "wmav2",
-        .long_name = NULL_IF_CONFIG_SMALL("Windows Media Audio 2"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MACE3,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "mace3",
-        .long_name = NULL_IF_CONFIG_SMALL("MACE (Macintosh Audio Compression/Expansion) 3:1"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MACE6,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "mace6",
-        .long_name = NULL_IF_CONFIG_SMALL("MACE (Macintosh Audio Compression/Expansion) 6:1"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_VMDAUDIO,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "vmdaudio",
-        .long_name = NULL_IF_CONFIG_SMALL("Sierra VMD audio"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_FLAC,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "flac",
-        .long_name = NULL_IF_CONFIG_SMALL("FLAC (Free Lossless Audio Codec)"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_MP3ADU,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "mp3adu",
-        .long_name = NULL_IF_CONFIG_SMALL("ADU (Application Data Unit) MP3 (MPEG audio layer 3)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MP3ON4,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "mp3on4",
-        .long_name = NULL_IF_CONFIG_SMALL("MP3onMP4"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_SHORTEN,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "shorten",
-        .long_name = NULL_IF_CONFIG_SMALL("Shorten"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_ALAC,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "alac",
-        .long_name = NULL_IF_CONFIG_SMALL("ALAC (Apple Lossless Audio Codec)"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_WESTWOOD_SND1,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "westwood_snd1",
-        .long_name = NULL_IF_CONFIG_SMALL("Westwood Audio (SND1)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_GSM,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "gsm",
-        .long_name = NULL_IF_CONFIG_SMALL("GSM"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_QDM2,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "qdm2",
-        .long_name = NULL_IF_CONFIG_SMALL("QDesign Music Codec 2"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_COOK,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "cook",
-        .long_name = NULL_IF_CONFIG_SMALL("Cook / Cooker / Gecko (RealAudio G2)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_TRUESPEECH,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "truespeech",
-        .long_name = NULL_IF_CONFIG_SMALL("DSP Group TrueSpeech"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_TTA,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "tta",
-        .long_name = NULL_IF_CONFIG_SMALL("TTA (True Audio)"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_SMACKAUDIO,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "smackaudio",
-        .long_name = NULL_IF_CONFIG_SMALL("Smacker audio"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_QCELP,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "qcelp",
-        .long_name = NULL_IF_CONFIG_SMALL("QCELP / PureVoice"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_WAVPACK,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "wavpack",
-        .long_name = NULL_IF_CONFIG_SMALL("WavPack"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY |
-                     AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_DSICINAUDIO,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "dsicinaudio",
-        .long_name = NULL_IF_CONFIG_SMALL("Delphine Software International CIN audio"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_IMC,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "imc",
-        .long_name = NULL_IF_CONFIG_SMALL("IMC (Intel Music Coder)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MUSEPACK7,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "musepack7",
-        .long_name = NULL_IF_CONFIG_SMALL("Musepack SV7"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MLP,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "mlp",
-        .long_name = NULL_IF_CONFIG_SMALL("MLP (Meridian Lossless Packing)"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_GSM_MS,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "gsm_ms",
-        .long_name = NULL_IF_CONFIG_SMALL("GSM Microsoft variant"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ATRAC3,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "atrac3",
-        .long_name = NULL_IF_CONFIG_SMALL("ATRAC3 (Adaptive TRansform Acoustic Coding 3)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-#if FF_API_VOXWARE
-    {
-        .id        = AV_CODEC_ID_VOXWARE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "voxware",
-        .long_name = NULL_IF_CONFIG_SMALL("Voxware RT29 Metasound"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-#endif
-    {
-        .id        = AV_CODEC_ID_APE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "ape",
-        .long_name = NULL_IF_CONFIG_SMALL("Monkey's Audio"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_NELLYMOSER,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "nellymoser",
-        .long_name = NULL_IF_CONFIG_SMALL("Nellymoser Asao"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MUSEPACK8,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "musepack8",
-        .long_name = NULL_IF_CONFIG_SMALL("Musepack SV8"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_SPEEX,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "speex",
-        .long_name = NULL_IF_CONFIG_SMALL("Speex"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_WMAVOICE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "wmavoice",
-        .long_name = NULL_IF_CONFIG_SMALL("Windows Media Audio Voice"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_WMAPRO,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "wmapro",
-        .long_name = NULL_IF_CONFIG_SMALL("Windows Media Audio 9 Professional"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_WMALOSSLESS,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "wmalossless",
-        .long_name = NULL_IF_CONFIG_SMALL("Windows Media Audio Lossless"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_ATRAC3P,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "atrac3p",
-        .long_name = NULL_IF_CONFIG_SMALL("ATRAC3+ (Adaptive TRansform Acoustic Coding 3+)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ATRAC3PAL,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "atrac3pal",
-        .long_name = NULL_IF_CONFIG_SMALL("ATRAC3+ AL (Adaptive TRansform Acoustic Coding 3+ Advanced Lossless)"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_ATRAC3AL,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "atrac3al",
-        .long_name = NULL_IF_CONFIG_SMALL("ATRAC3 AL (Adaptive TRansform Acoustic Coding 3 Advanced Lossless)"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_EAC3,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "eac3",
-        .long_name = NULL_IF_CONFIG_SMALL("ATSC A/52B (AC-3, E-AC-3)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_SIPR,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "sipr",
-        .long_name = NULL_IF_CONFIG_SMALL("RealAudio SIPR / ACELP.NET"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_MP1,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "mp1",
-        .long_name = NULL_IF_CONFIG_SMALL("MP1 (MPEG audio layer 1)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_TWINVQ,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "twinvq",
-        .long_name = NULL_IF_CONFIG_SMALL("VQF TwinVQ"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_TRUEHD,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "truehd",
-        .long_name = NULL_IF_CONFIG_SMALL("TrueHD"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_MP4ALS,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "mp4als",
-        .long_name = NULL_IF_CONFIG_SMALL("MPEG-4 Audio Lossless Coding (ALS)"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_ATRAC1,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "atrac1",
-        .long_name = NULL_IF_CONFIG_SMALL("ATRAC1 (Adaptive TRansform Acoustic Coding)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_BINKAUDIO_RDFT,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "binkaudio_rdft",
-        .long_name = NULL_IF_CONFIG_SMALL("Bink Audio (RDFT)"),
-        .props     = AV_CODEC_PROP_LOSSY,
+        .id        = AV_CODEC_ID_H264,
+        .type      = AVMEDIA_TYPE_VIDEO,
+        .name      = "h264",
+        .long_name = NULL_IF_CONFIG_SMALL("H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10"),
+        .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_LOSSLESS | AV_CODEC_PROP_REORDER,
+        .profiles  = NULL_IF_CONFIG_SMALL(ff_h264_profiles),
     },
+
     {
-        .id        = AV_CODEC_ID_BINKAUDIO_DCT,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "binkaudio_dct",
-        .long_name = NULL_IF_CONFIG_SMALL("Bink Audio (DCT)"),
-        .props     = AV_CODEC_PROP_LOSSY,
+            .id        = AV_CODEC_ID_HEVC,
+            .type      = AVMEDIA_TYPE_VIDEO,
+            .name      = "hevc",
+            .long_name = NULL_IF_CONFIG_SMALL("H.265 / HEVC (High Efficiency Video Coding)"),
+            .props     = AV_CODEC_PROP_LOSSY | AV_CODEC_PROP_REORDER,
+            .profiles  = NULL_IF_CONFIG_SMALL(ff_hevc_profiles),
     },
+
     {
         .id        = AV_CODEC_ID_AAC_LATM,
         .type      = AVMEDIA_TYPE_AUDIO,
@@ -2649,470 +57,14 @@ static const AVCodecDescriptor codec_des
         .props     = AV_CODEC_PROP_LOSSY,
         .profiles  = NULL_IF_CONFIG_SMALL(ff_aac_profiles),
     },
+
     {
-        .id        = AV_CODEC_ID_QDMC,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "qdmc",
-        .long_name = NULL_IF_CONFIG_SMALL("QDesign Music"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_CELT,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "celt",
-        .long_name = NULL_IF_CONFIG_SMALL("Constrained Energy Lapped Transform (CELT)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_G723_1,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "g723_1",
-        .long_name = NULL_IF_CONFIG_SMALL("G.723.1"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_DSS_SP,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "dss_sp",
-        .long_name = NULL_IF_CONFIG_SMALL("Digital Speech Standard - Standard Play mode (DSS SP)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_DOLBY_E,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "dolby_e",
-        .long_name = NULL_IF_CONFIG_SMALL("Dolby E"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_G729,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "g729",
-        .long_name = NULL_IF_CONFIG_SMALL("G.729"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_8SVX_EXP,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "8svx_exp",
-        .long_name = NULL_IF_CONFIG_SMALL("8SVX exponential"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_8SVX_FIB,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "8svx_fib",
-        .long_name = NULL_IF_CONFIG_SMALL("8SVX fibonacci"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_BMV_AUDIO,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "bmv_audio",
-        .long_name = NULL_IF_CONFIG_SMALL("Discworld II BMV audio"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_RALF,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "ralf",
-        .long_name = NULL_IF_CONFIG_SMALL("RealAudio Lossless"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_IAC,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "iac",
-        .long_name = NULL_IF_CONFIG_SMALL("IAC (Indeo Audio Coder)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ILBC,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "ilbc",
-        .long_name = NULL_IF_CONFIG_SMALL("iLBC (Internet Low Bitrate Codec)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_FFWAVESYNTH,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "wavesynth",
-        .long_name = NULL_IF_CONFIG_SMALL("Wave synthesis pseudo-codec"),
-    },
-    {
-        .id        = AV_CODEC_ID_SONIC,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "sonic",
-        .long_name = NULL_IF_CONFIG_SMALL("Sonic"),
-    },
-    {
-        .id        = AV_CODEC_ID_SONIC_LS,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "sonicls",
-        .long_name = NULL_IF_CONFIG_SMALL("Sonic lossless"),
-    },
-    {
-        .id        = AV_CODEC_ID_OPUS,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "opus",
-        .long_name = NULL_IF_CONFIG_SMALL("Opus (Opus Interactive Audio Codec)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_COMFORT_NOISE,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "comfortnoise",
-        .long_name = NULL_IF_CONFIG_SMALL("RFC 3389 Comfort Noise"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_TAK,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "tak",
-        .long_name = NULL_IF_CONFIG_SMALL("TAK (Tom's lossless Audio Kompressor)"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY | AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_METASOUND,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "metasound",
-        .long_name = NULL_IF_CONFIG_SMALL("Voxware MetaSound"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_PAF_AUDIO,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "paf_audio",
-        .long_name = NULL_IF_CONFIG_SMALL("Amazing Studio Packed Animation File Audio"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_ON2AVC,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "avc",
-        .long_name = NULL_IF_CONFIG_SMALL("On2 Audio for Video Codec"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_EVRC,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "evrc",
-        .long_name = NULL_IF_CONFIG_SMALL("EVRC (Enhanced Variable Rate Codec)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_SMV,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "smv",
-        .long_name = NULL_IF_CONFIG_SMALL("SMV (Selectable Mode Vocoder)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_4GV,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "4gv",
-        .long_name = NULL_IF_CONFIG_SMALL("4GV (Fourth Generation Vocoder)"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_DSD_LSBF,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "dsd_lsbf",
-        .long_name = NULL_IF_CONFIG_SMALL("DSD (Direct Stream Digital), least significant bit first"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_DSD_MSBF,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "dsd_msbf",
-        .long_name = NULL_IF_CONFIG_SMALL("DSD (Direct Stream Digital), most significant bit first"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_DSD_LSBF_PLANAR,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "dsd_lsbf_planar",
-        .long_name = NULL_IF_CONFIG_SMALL("DSD (Direct Stream Digital), least significant bit first, planar"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_DSD_MSBF_PLANAR,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "dsd_msbf_planar",
-        .long_name = NULL_IF_CONFIG_SMALL("DSD (Direct Stream Digital), most significant bit first, planar"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_INTERPLAY_ACM,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "interplayacm",
-        .long_name = NULL_IF_CONFIG_SMALL("Interplay ACM"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_XMA1,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "xma1",
-        .long_name = NULL_IF_CONFIG_SMALL("Xbox Media Audio 1"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_XMA2,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "xma2",
-        .long_name = NULL_IF_CONFIG_SMALL("Xbox Media Audio 2"),
-        .props     = AV_CODEC_PROP_LOSSY,
-    },
-    {
-        .id        = AV_CODEC_ID_DST,
-        .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "dst",
-        .long_name = NULL_IF_CONFIG_SMALL("DST (Direct Stream Transfer)"),
-        .props     = AV_CODEC_PROP_LOSSLESS,
-    },
-    {
-        .id        = AV_CODEC_ID_ADPCM_MTAF,
+        .id        = AV_CODEC_ID_AAC,
         .type      = AVMEDIA_TYPE_AUDIO,
-        .name      = "adpcm_mtaf",
-        .long_name = NULL_IF_CONFIG_SMALL("ADPCM MTAF"),
+        .name      = "aac",
+        .long_name = NULL_IF_CONFIG_SMALL("AAC (Advanced Audio Coding)"),
         .props     = AV_CODEC_PROP_LOSSY,
-    },
-
-    /* subtitle codecs */
-    {
-        .id        = AV_CODEC_ID_DVD_SUBTITLE,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "dvd_subtitle",
-        .long_name = NULL_IF_CONFIG_SMALL("DVD subtitles"),
-        .props     = AV_CODEC_PROP_BITMAP_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_DVB_SUBTITLE,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "dvb_subtitle",
-        .long_name = NULL_IF_CONFIG_SMALL("DVB subtitles"),
-        .props     = AV_CODEC_PROP_BITMAP_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_TEXT,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "text",
-        .long_name = NULL_IF_CONFIG_SMALL("raw UTF-8 text"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_XSUB,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "xsub",
-        .long_name = NULL_IF_CONFIG_SMALL("XSUB"),
-        .props     = AV_CODEC_PROP_BITMAP_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_ASS,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "ass",
-        .long_name = NULL_IF_CONFIG_SMALL("ASS (Advanced SSA) subtitle"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_SSA,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "ssa",
-        .long_name = NULL_IF_CONFIG_SMALL("SSA (SubStation Alpha) subtitle"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_MOV_TEXT,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "mov_text",
-        .long_name = NULL_IF_CONFIG_SMALL("MOV text"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_HDMV_PGS_SUBTITLE,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "hdmv_pgs_subtitle",
-        .long_name = NULL_IF_CONFIG_SMALL("HDMV Presentation Graphic Stream subtitles"),
-        .props     = AV_CODEC_PROP_BITMAP_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_DVB_TELETEXT,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "dvb_teletext",
-        .long_name = NULL_IF_CONFIG_SMALL("DVB teletext"),
-    },
-    {
-        .id        = AV_CODEC_ID_SRT,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "srt",
-        .long_name = NULL_IF_CONFIG_SMALL("SubRip subtitle with embedded timing"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_SUBRIP,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "subrip",
-        .long_name = NULL_IF_CONFIG_SMALL("SubRip subtitle"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_MICRODVD,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "microdvd",
-        .long_name = NULL_IF_CONFIG_SMALL("MicroDVD subtitle"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_MPL2,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "mpl2",
-        .long_name = NULL_IF_CONFIG_SMALL("MPL2 subtitle"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_EIA_608,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "eia_608",
-        .long_name = NULL_IF_CONFIG_SMALL("EIA-608 closed captions"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_JACOSUB,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "jacosub",
-        .long_name = NULL_IF_CONFIG_SMALL("JACOsub subtitle"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_PJS,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "pjs",
-        .long_name = NULL_IF_CONFIG_SMALL("PJS (Phoenix Japanimation Society) subtitle"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_SAMI,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "sami",
-        .long_name = NULL_IF_CONFIG_SMALL("SAMI subtitle"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_REALTEXT,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "realtext",
-        .long_name = NULL_IF_CONFIG_SMALL("RealText subtitle"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_STL,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "stl",
-        .long_name = NULL_IF_CONFIG_SMALL("Spruce subtitle format"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_SUBVIEWER1,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "subviewer1",
-        .long_name = NULL_IF_CONFIG_SMALL("SubViewer v1 subtitle"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_SUBVIEWER,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "subviewer",
-        .long_name = NULL_IF_CONFIG_SMALL("SubViewer subtitle"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_VPLAYER,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "vplayer",
-        .long_name = NULL_IF_CONFIG_SMALL("VPlayer subtitle"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_WEBVTT,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "webvtt",
-        .long_name = NULL_IF_CONFIG_SMALL("WebVTT subtitle"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-    {
-        .id        = AV_CODEC_ID_HDMV_TEXT_SUBTITLE,
-        .type      = AVMEDIA_TYPE_SUBTITLE,
-        .name      = "hdmv_text_subtitle",
-        .long_name = NULL_IF_CONFIG_SMALL("HDMV Text subtitle"),
-        .props     = AV_CODEC_PROP_TEXT_SUB,
-    },
-
-    /* other kind of codecs and pseudo-codecs */
-    {
-        .id        = AV_CODEC_ID_TTF,
-        .type      = AVMEDIA_TYPE_DATA,
-        .name      = "ttf",
-        .long_name = NULL_IF_CONFIG_SMALL("TrueType font"),
-        .mime_types= MT("application/x-truetype-font", "application/x-font"),
-    },
-    {
-        .id        = AV_CODEC_ID_BINTEXT,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "bintext",
-        .long_name = NULL_IF_CONFIG_SMALL("Binary text"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY,
-    },
-    {
-        .id        = AV_CODEC_ID_XBIN,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "xbin",
-        .long_name = NULL_IF_CONFIG_SMALL("eXtended BINary text"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY,
-    },
-    {
-        .id        = AV_CODEC_ID_IDF,
-        .type      = AVMEDIA_TYPE_VIDEO,
-        .name      = "idf",
-        .long_name = NULL_IF_CONFIG_SMALL("iCEDraw text"),
-        .props     = AV_CODEC_PROP_INTRA_ONLY,
-    },
-    {
-        .id        = AV_CODEC_ID_OTF,
-        .type      = AVMEDIA_TYPE_DATA,
-        .name      = "otf",
-        .long_name = NULL_IF_CONFIG_SMALL("OpenType font"),
-        .mime_types= MT("application/vnd.ms-opentype"),
-    },
-    {
-        .id        = AV_CODEC_ID_SMPTE_KLV,
-        .type      = AVMEDIA_TYPE_DATA,
-        .name      = "klv",
-        .long_name = NULL_IF_CONFIG_SMALL("SMPTE 336M Key-Length-Value (KLV) metadata"),
-    },
-    {
-        .id        = AV_CODEC_ID_DVD_NAV,
-        .type      = AVMEDIA_TYPE_DATA,
-        .name      = "dvd_nav_packet",
-        .long_name = NULL_IF_CONFIG_SMALL("DVD Nav packet"),
-    },
-    {
-        .id        = AV_CODEC_ID_TIMED_ID3,
-        .type      = AVMEDIA_TYPE_DATA,
-        .name      = "timed_id3",
-        .long_name = NULL_IF_CONFIG_SMALL("timed ID3 metadata"),
-    },
-    {
-        .id        = AV_CODEC_ID_BIN_DATA,
-        .type      = AVMEDIA_TYPE_DATA,
-        .name      = "bin_data",
-        .long_name = NULL_IF_CONFIG_SMALL("binary data"),
-        .mime_types= MT("application/octet-stream"),
-    },
-    {
-        .id        = AV_CODEC_ID_SCTE_35,
-        .type      = AVMEDIA_TYPE_DATA,
-        .name      = "scte_35",
-        .long_name = NULL_IF_CONFIG_SMALL("SCTE 35 Message Queue"),
+        .profiles  = NULL_IF_CONFIG_SMALL(ff_aac_profiles),
     },
 
     /* deprecated codec ids */
diff -uparN ffmpeg-3.4.1/libavcodec/decode.c ffmpeg-y/libavcodec/decode.c
--- ffmpeg-3.4.1/libavcodec/decode.c	2017-12-11 05:35:18.000000000 +0800
+++ ffmpeg-y/libavcodec/decode.c	2019-02-22 15:07:00.000000000 +0800
@@ -43,6 +43,8 @@
 #include "internal.h"
 #include "thread.h"
 
+#ifdef HISI_NOT_LOW_FLASH
+
 static int apply_param_change(AVCodecContext *avctx, const AVPacket *avpkt)
 {
     int size = 0, ret;
@@ -121,6 +123,7 @@ fail2:
     return 0;
 }
 
+
 static int extract_packet_props(AVCodecInternal *avci, const AVPacket *pkt)
 {
     int ret = 0;
@@ -134,6 +137,7 @@ static int extract_packet_props(AVCodecI
     return ret;
 }
 
+
 static int unrefcount_frame(AVCodecInternal *avci, AVFrame *frame)
 {
     int ret;
@@ -180,6 +184,7 @@ static int unrefcount_frame(AVCodecInter
     return 0;
 }
 
+
 static int bsfs_init(AVCodecContext *avctx)
 {
     AVCodecInternal *avci = avctx->internal;
@@ -289,9 +294,12 @@ static int bsfs_poll(AVCodecContext *avc
 
     return AVERROR(EAGAIN);
 }
+#endif
 
 int ff_decode_get_packet(AVCodecContext *avctx, AVPacket *pkt)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     AVCodecInternal *avci = avctx->internal;
     int ret;
 
@@ -319,6 +327,9 @@ int ff_decode_get_packet(AVCodecContext
 finish:
     av_packet_unref(pkt);
     return ret;
+#else
+    return 0;
+#endif
 }
 
 /**
@@ -331,9 +342,12 @@ finish:
  * @param dts the dts field of the decoded AVPacket
  * @return one of the input values, may be AV_NOPTS_VALUE
  */
+ 
+#ifdef HISI_NOT_LOW_FLASH
 static int64_t guess_correct_pts(AVCodecContext *ctx,
                                  int64_t reordered_pts, int64_t dts)
 {
+
     int64_t pts = AV_NOPTS_VALUE;
 
     if (dts != AV_NOPTS_VALUE) {
@@ -365,6 +379,7 @@ static int64_t guess_correct_pts(AVCodec
  **/
 static int decode_simple_internal(AVCodecContext *avctx, AVFrame *frame)
 {
+
     AVCodecInternal   *avci = avctx->internal;
     DecodeSimpleContext *ds = &avci->ds;
     AVPacket           *pkt = ds->in_pkt;
@@ -610,6 +625,7 @@ FF_ENABLE_DEPRECATION_WARNINGS
         av_assert0(frame->buf[0]);
 
     return ret < 0 ? ret : 0;
+
 }
 
 static int decode_simple_receive_frame(AVCodecContext *avctx, AVFrame *frame)
@@ -627,6 +643,7 @@ static int decode_simple_receive_frame(A
 
 static int decode_receive_frame_internal(AVCodecContext *avctx, AVFrame *frame)
 {
+
     AVCodecInternal *avci = avctx->internal;
     int ret;
 
@@ -641,10 +658,14 @@ static int decode_receive_frame_internal
         avci->draining_done = 1;
 
     return ret;
+
 }
+#endif
 
 int attribute_align_arg avcodec_send_packet(AVCodecContext *avctx, const AVPacket *avpkt)
 {
+    
+#ifdef HISI_NOT_LOW_FLASH
     AVCodecInternal *avci = avctx->internal;
     int ret;
 
@@ -679,12 +700,14 @@ int attribute_align_arg avcodec_send_pac
         if (ret < 0 && ret != AVERROR(EAGAIN) && ret != AVERROR_EOF)
             return ret;
     }
-
+#endif
     return 0;
 }
 
 static int apply_cropping(AVCodecContext *avctx, AVFrame *frame)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     /* make sure we are noisy about decoders returning invalid cropping data */
     if (frame->crop_left >= INT_MAX - frame->crop_right        ||
         frame->crop_top  >= INT_MAX - frame->crop_bottom       ||
@@ -708,10 +731,15 @@ static int apply_cropping(AVCodecContext
 
     return av_frame_apply_cropping(frame, avctx->flags & AV_CODEC_FLAG_UNALIGNED ?
                                           AV_FRAME_CROP_UNALIGNED : 0);
+    #else
+    return 0;
+    #endif
 }
 
 int attribute_align_arg avcodec_receive_frame(AVCodecContext *avctx, AVFrame *frame)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     AVCodecInternal *avci = avctx->internal;
     int ret;
 
@@ -741,10 +769,11 @@ int attribute_align_arg avcodec_receive_
     }
 
     avctx->frame_number++;
-
+#endif
     return 0;
 }
 
+#ifdef HISI_NOT_LOW_FLASH
 static int compat_decode(AVCodecContext *avctx, AVFrame *frame,
                          int *got_frame, const AVPacket *pkt)
 {
@@ -842,12 +871,14 @@ int attribute_align_arg avcodec_decode_a
     return compat_decode(avctx, frame, got_frame_ptr, avpkt);
 }
 
+
 static void get_subtitle_defaults(AVSubtitle *sub)
 {
     memset(sub, 0, sizeof(*sub));
     sub->pts = AV_NOPTS_VALUE;
 }
 
+
 #define UTF8_MAX_BYTES 4 /* 5 and 6 bytes sequences should not be used */
 static int recode_subtitle(AVCodecContext *avctx,
                            AVPacket *outpkt, const AVPacket *inpkt)
@@ -907,6 +938,7 @@ end:
 #endif
 }
 
+
 static int utf8_check(const uint8_t *str)
 {
     const uint8_t *byte;
@@ -926,6 +958,7 @@ static int utf8_check(const uint8_t *str
     return 1;
 }
 
+
 #if FF_API_ASS_TIMING
 static void insert_ts(AVBPrint *buf, int ts)
 {
@@ -999,10 +1032,14 @@ static int convert_sub_to_old_ass_form(A
 }
 #endif
 
+#endif
+
 int avcodec_decode_subtitle2(AVCodecContext *avctx, AVSubtitle *sub,
                              int *got_sub_ptr,
                              AVPacket *avpkt)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     int i, ret = 0;
     AVCodecInternal *avci = avctx->internal;
 
@@ -1114,6 +1151,9 @@ FF_ENABLE_DEPRECATION_WARNINGS
     }
 
     return ret;
+#else
+    return 0;
+#endif
 }
 
 static int is_hwaccel_pix_fmt(enum AVPixelFormat pix_fmt)
@@ -1128,6 +1168,7 @@ enum AVPixelFormat avcodec_default_get_f
         ++fmt;
     return fmt[0];
 }
+#ifdef HISI_NOT_LOW_FLASH
 
 static AVHWAccel *find_hwaccel(enum AVCodecID codec_id,
                                enum AVPixelFormat pix_fmt)
@@ -1180,9 +1221,12 @@ static int setup_hwaccel(AVCodecContext
 
     return 0;
 }
+#endif
 
 int ff_get_format(AVCodecContext *avctx, const enum AVPixelFormat *fmt)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     const AVPixFmtDescriptor *desc;
     enum AVPixelFormat *choices;
     enum AVPixelFormat ret;
@@ -1248,7 +1292,11 @@ int ff_get_format(AVCodecContext *avctx,
 
     av_freep(&choices);
     return ret;
+#else
+    return 0;
+#endif
 }
+#ifdef HISI_NOT_LOW_FLASH
 
 static int update_frame_pool(AVCodecContext *avctx, AVFrame *frame)
 {
@@ -1352,6 +1400,7 @@ fail:
     return ret;
 }
 
+
 static int audio_get_buffer(AVCodecContext *avctx, AVFrame *frame)
 {
     FramePool *pool = avctx->internal->pool;
@@ -1397,6 +1446,7 @@ fail:
     return AVERROR(ENOMEM);
 }
 
+
 static int video_get_buffer(AVCodecContext *s, AVFrame *pic)
 {
     FramePool *pool = s->internal->pool;
@@ -1443,11 +1493,13 @@ fail:
     av_frame_unref(pic);
     return AVERROR(ENOMEM);
 }
+#endif
 
 int avcodec_default_get_buffer2(AVCodecContext *avctx, AVFrame *frame, int flags)
 {
-    int ret;
+#ifdef HISI_NOT_LOW_FLASH
 
+    int ret;
     if (avctx->hw_frames_ctx) {
         ret = av_hwframe_get_buffer(avctx->hw_frames_ctx, frame, 0);
         frame->width  = avctx->coded_width;
@@ -1466,7 +1518,11 @@ int avcodec_default_get_buffer2(AVCodecC
     default:
         return -1;
     }
+#else
+    return 0;
+#endif
 }
+#ifdef HISI_NOT_LOW_FLASH
 
 static int add_metadata_from_side_data(const AVPacket *avpkt, AVFrame *frame)
 {
@@ -1479,9 +1535,12 @@ static int add_metadata_from_side_data(c
                                             AV_PKT_DATA_STRINGS_METADATA, &size);
     return av_packet_unpack_dictionary(side_metadata, size, frame_md);
 }
+#endif
 
 int ff_init_buffer_info(AVCodecContext *avctx, AVFrame *frame)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     const AVPacket *pkt = avctx->internal->last_pkt_props;
     int i;
     static const struct {
@@ -1585,14 +1644,22 @@ FF_ENABLE_DEPRECATION_WARNINGS
         frame->channels = avctx->channels;
         break;
     }
+    #endif
     return 0;
 }
 
 int ff_decode_frame_props(AVCodecContext *avctx, AVFrame *frame)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     return ff_init_buffer_info(avctx, frame);
+#else
+    return 0;
+#endif
 }
 
+#ifdef HISI_NOT_LOW_FLASH
+
 static void validate_avframe_allocation(AVCodecContext *avctx, AVFrame *frame)
 {
     if (avctx->codec_type == AVMEDIA_TYPE_VIDEO) {
@@ -1617,6 +1684,7 @@ static void validate_avframe_allocation(
     }
 }
 
+
 static int get_buffer_internal(AVCodecContext *avctx, AVFrame *frame, int flags)
 {
     const AVHWAccel *hwaccel = avctx->hwaccel;
@@ -1666,15 +1734,6 @@ end:
     return ret;
 }
 
-int ff_get_buffer(AVCodecContext *avctx, AVFrame *frame, int flags)
-{
-    int ret = get_buffer_internal(avctx, frame, flags);
-    if (ret < 0) {
-        av_log(avctx, AV_LOG_ERROR, "get_buffer() failed\n");
-        frame->width = frame->height = 0;
-    }
-    return ret;
-}
 
 static int reget_buffer_internal(AVCodecContext *avctx, AVFrame *frame)
 {
@@ -1715,14 +1774,6 @@ static int reget_buffer_internal(AVCodec
     return 0;
 }
 
-int ff_reget_buffer(AVCodecContext *avctx, AVFrame *frame)
-{
-    int ret = reget_buffer_internal(avctx, frame);
-    if (ret < 0)
-        av_log(avctx, AV_LOG_ERROR, "reget_buffer() failed\n");
-    return ret;
-}
-
 void avcodec_flush_buffers(AVCodecContext *avctx)
 {
     avctx->internal->draining      = 0;
@@ -1748,9 +1799,44 @@ void avcodec_flush_buffers(AVCodecContex
     if (!avctx->refcounted_frames)
         av_frame_unref(avctx->internal->to_free);
 }
+#endif
+
+int ff_get_buffer(AVCodecContext *avctx, AVFrame *frame, int flags)
+{
+#ifdef HISI_NOT_LOW_FLASH
+
+    int ret = get_buffer_internal(avctx, frame, flags);
+    if (ret < 0) {
+        av_log(avctx, AV_LOG_ERROR, "get_buffer() failed\n");
+        frame->width = frame->height = 0;
+    }
+    return ret;
+#else 
+    return 0;
+#endif
+}
+
+int ff_reget_buffer(AVCodecContext *avctx, AVFrame *frame)
+{
+#ifdef HISI_NOT_LOW_FLASH
+
+    int ret = reget_buffer_internal(avctx, frame);
+    if (ret < 0)
+        av_log(avctx, AV_LOG_ERROR, "reget_buffer() failed\n");
+    return ret;
+#else
+    return 0;
+#endif
+
+}
+
+
 
 void ff_decode_bsfs_uninit(AVCodecContext *avctx)
 {
+
+#ifdef HISI_NOT_LOW_FLASH
+
     DecodeFilterContext *s = &avctx->internal->filter;
     int i;
 
@@ -1758,4 +1844,5 @@ void ff_decode_bsfs_uninit(AVCodecContex
         av_bsf_free(&s->bsfs[i]);
     av_freep(&s->bsfs);
     s->nb_bsfs = 0;
+#endif
 }
diff -uparN ffmpeg-3.4.1/libavcodec/h264dec.c ffmpeg-y/libavcodec/h264dec.c
--- ffmpeg-3.4.1/libavcodec/h264dec.c	2017-12-11 05:35:07.000000000 +0800
+++ ffmpeg-y/libavcodec/h264dec.c	2019-02-22 15:07:00.000000000 +0800
@@ -399,7 +399,7 @@ static av_cold int h264_decode_init(AVCo
         return ret;
 
     ret = ff_thread_once(&h264_vlc_init, ff_h264_decode_init_vlc);
-    if (ret != 0) {
+    if (ret != 0 && ret != 1) {
         av_log(avctx, AV_LOG_ERROR, "pthread_once has failed.");
         return AVERROR_UNKNOWN;
     }
diff -uparN ffmpeg-3.4.1/libavcodec/imgconvert.c ffmpeg-y/libavcodec/imgconvert.c
--- ffmpeg-3.4.1/libavcodec/imgconvert.c	2017-12-11 05:35:08.000000000 +0800
+++ ffmpeg-y/libavcodec/imgconvert.c	2019-02-22 15:07:00.000000000 +0800
@@ -102,6 +102,8 @@ static inline int is_yuv_planar(const AV
 int av_picture_crop(AVPicture *dst, const AVPicture *src,
                     enum AVPixelFormat pix_fmt, int top_band, int left_band)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(pix_fmt);
     int y_shift;
     int x_shift;
@@ -127,6 +129,7 @@ int av_picture_crop(AVPicture *dst, cons
     dst->linesize[0] = src->linesize[0];
     dst->linesize[1] = src->linesize[1];
     dst->linesize[2] = src->linesize[2];
+#endif
     return 0;
 }
 
@@ -134,6 +137,7 @@ int av_picture_pad(AVPicture *dst, const
                    enum AVPixelFormat pix_fmt, int padtop, int padbottom, int padleft, int padright,
             int *color)
 {
+#ifdef HISI_NOT_LOW_FLASH
     const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(pix_fmt);
     uint8_t *optr;
     int y_shift;
@@ -220,7 +224,7 @@ int av_picture_pad(AVPicture *dst, const
                 (padbottom >> y_shift) + (padright >> x_shift));
         }
     }
-
+#endif
     return 0;
 }
 FF_ENABLE_DEPRECATION_WARNINGS
diff -uparN ffmpeg-3.4.1/libavcodec/Makefile ffmpeg-y/libavcodec/Makefile
--- ffmpeg-3.4.1/libavcodec/Makefile	2017-12-11 05:35:06.000000000 +0800
+++ ffmpeg-y/libavcodec/Makefile	2019-02-22 15:07:00.000000000 +0800
@@ -21,34 +21,26 @@ HEADERS = avcodec.h
 
 OBJS = allcodecs.o                                                      \
        audioconvert.o                                                   \
-       avdct.o                                                          \
        avpacket.o                                                       \
        avpicture.o                                                      \
-       bitstream.o                                                      \
        bitstream_filter.o                                               \
        bitstream_filters.o                                              \
        bsf.o                                                            \
        codec_desc.o                                                     \
+       decode.o                                                     \
        d3d11va.o                                                        \
-       decode.o                                                         \
        dirac.o                                                          \
        dv_profile.o                                                     \
-       encode.o                                                         \
        imgconvert.o                                                     \
        jni.o                                                            \
-       mathtables.o                                                     \
        mediacodec.o                                                     \
        mpeg12framerate.o                                                \
        options.o                                                        \
-       mjpegenc_huffman.o                                               \
        parser.o                                                         \
        profiles.o                                                       \
        qsv_api.o                                                        \
        raw.o                                                            \
-       resample.o                                                       \
-       resample2.o                                                      \
        utils.o                                                          \
-       vorbis_parser.o                                                  \
        xiph.o                                                           \
 
 # subsystems
@@ -100,7 +92,7 @@ OBJS-$(CONFIG_LSP)                     +
 OBJS-$(CONFIG_LZF)                     += lzf.o
 OBJS-$(CONFIG_MDCT)                    += mdct_fixed.o mdct_float.o mdct_fixed_32.o
 OBJS-$(CONFIG_ME_CMP)                  += me_cmp.o
-OBJS-$(CONFIG_MEDIACODEC)              += mediacodecdec_common.o mediacodec_surface.o mediacodec_wrapper.o mediacodec_sw_buffer.o
+#OBJS-$(CONFIG_MEDIACODEC)              += mediacodecdec_common.o mediacodec_surface.o mediacodec_wrapper.o mediacodec_sw_buffer.o
 OBJS-$(CONFIG_MPEG_ER)                 += mpeg_er.o
 OBJS-$(CONFIG_MPEGAUDIO)               += mpegaudio.o
 OBJS-$(CONFIG_MPEGAUDIODSP)            += mpegaudiodsp.o                \
@@ -137,7 +129,7 @@ OBJS-$(CONFIG_VIDEODSP)                +
 OBJS-$(CONFIG_VP3DSP)                  += vp3dsp.o
 OBJS-$(CONFIG_VP56DSP)                 += vp56dsp.o
 OBJS-$(CONFIG_VP8DSP)                  += vp8dsp.o
-OBJS-$(CONFIG_V4L2_M2M)                += v4l2_m2m.o v4l2_context.o v4l2_buffers.o v4l2_fmt.o
+#OBJS-$(CONFIG_V4L2_M2M)                += v4l2_m2m.o v4l2_context.o v4l2_buffers.o v4l2_fmt.o
 OBJS-$(CONFIG_WMA_FREQS)               += wma_freqs.o
 OBJS-$(CONFIG_WMV2DSP)                 += wmv2dsp.o
 
@@ -324,15 +316,15 @@ OBJS-$(CONFIG_H263_DECODER)            +
                                           intelh263dec.o h263data.o
 OBJS-$(CONFIG_H263_ENCODER)            += mpeg4videoenc.o mpeg4video.o  \
                                           h263.o ituh263enc.o flvenc.o h263data.o
-OBJS-$(CONFIG_H263_V4L2M2M_DECODER)    += v4l2_m2m_dec.o
-OBJS-$(CONFIG_H263_V4L2M2M_ENCODER)    += v4l2_m2m_enc.o
+#OBJS-$(CONFIG_H263_V4L2M2M_DECODER)    += v4l2_m2m_dec.o
+#OBJS-$(CONFIG_H263_V4L2M2M_ENCODER)    += v4l2_m2m_enc.o
 OBJS-$(CONFIG_H264_DECODER)            += h264dec.o h264_cabac.o h264_cavlc.o \
                                           h264_direct.o h264_loopfilter.o  \
                                           h264_mb.o h264_picture.o \
                                           h264_refs.o h264_sei.o \
                                           h264_slice.o h264data.o
 OBJS-$(CONFIG_H264_CUVID_DECODER)      += cuvid.o
-OBJS-$(CONFIG_H264_MEDIACODEC_DECODER) += mediacodecdec.o
+#OBJS-$(CONFIG_H264_MEDIACODEC_DECODER) += mediacodecdec.o
 OBJS-$(CONFIG_H264_MMAL_DECODER)       += mmaldec.o
 OBJS-$(CONFIG_H264_NVENC_ENCODER)      += nvenc_h264.o
 OBJS-$(CONFIG_NVENC_ENCODER)           += nvenc_h264.o
@@ -344,15 +336,15 @@ OBJS-$(CONFIG_H264_QSV_ENCODER)        +
 OBJS-$(CONFIG_H264_RKMPP_DECODER)      += rkmppdec.o
 OBJS-$(CONFIG_H264_VAAPI_ENCODER)      += vaapi_encode_h264.o vaapi_encode_h26x.o
 OBJS-$(CONFIG_H264_VIDEOTOOLBOX_ENCODER) += videotoolboxenc.o
-OBJS-$(CONFIG_H264_V4L2M2M_DECODER)    += v4l2_m2m_dec.o
-OBJS-$(CONFIG_H264_V4L2M2M_ENCODER)    += v4l2_m2m_enc.o
+#OBJS-$(CONFIG_H264_V4L2M2M_DECODER)    += v4l2_m2m_dec.o
+#OBJS-$(CONFIG_H264_V4L2M2M_ENCODER)    += v4l2_m2m_enc.o
 OBJS-$(CONFIG_HAP_DECODER)             += hapdec.o hap.o
 OBJS-$(CONFIG_HAP_ENCODER)             += hapenc.o hap.o
 OBJS-$(CONFIG_HEVC_DECODER)            += hevcdec.o hevc_mvs.o \
                                           hevc_cabac.o hevc_refs.o hevcpred.o    \
                                           hevcdsp.o hevc_filter.o hevc_data.o
 OBJS-$(CONFIG_HEVC_CUVID_DECODER)      += cuvid.o
-OBJS-$(CONFIG_HEVC_MEDIACODEC_DECODER) += mediacodecdec.o
+#OBJS-$(CONFIG_HEVC_MEDIACODEC_DECODER) += mediacodecdec.o
 OBJS-$(CONFIG_HEVC_NVENC_ENCODER)      += nvenc_hevc.o
 OBJS-$(CONFIG_NVENC_HEVC_ENCODER)      += nvenc_hevc.o
 OBJS-$(CONFIG_HEVC_QSV_DECODER)        += qsvdec_h2645.o
@@ -360,8 +352,8 @@ OBJS-$(CONFIG_HEVC_QSV_ENCODER)        +
                                           hevc_data.o
 OBJS-$(CONFIG_HEVC_RKMPP_DECODER)      += rkmppdec.o
 OBJS-$(CONFIG_HEVC_VAAPI_ENCODER)      += vaapi_encode_h265.o vaapi_encode_h26x.o
-OBJS-$(CONFIG_HEVC_V4L2M2M_DECODER)    += v4l2_m2m_dec.o
-OBJS-$(CONFIG_HEVC_V4L2M2M_ENCODER)    += v4l2_m2m_enc.o
+#OBJS-$(CONFIG_HEVC_V4L2M2M_DECODER)    += v4l2_m2m_dec.o
+#OBJS-$(CONFIG_HEVC_V4L2M2M_ENCODER)    += v4l2_m2m_enc.o
 OBJS-$(CONFIG_HNM4_VIDEO_DECODER)      += hnm4video.o
 OBJS-$(CONFIG_HQ_HQA_DECODER)          += hq_hqa.o hq_hqadata.o hq_hqadsp.o \
                                           canopus.o
@@ -431,20 +423,20 @@ OBJS-$(CONFIG_MPC8_DECODER)            +
 OBJS-$(CONFIG_MPEGVIDEO_DECODER)       += mpeg12dec.o mpeg12.o mpeg12data.o
 OBJS-$(CONFIG_MPEG1VIDEO_DECODER)      += mpeg12dec.o mpeg12.o mpeg12data.o
 OBJS-$(CONFIG_MPEG1VIDEO_ENCODER)      += mpeg12enc.o mpeg12.o
-OBJS-$(CONFIG_MPEG1_V4L2M2M_DECODER)   += v4l2_m2m_dec.o
+#OBJS-$(CONFIG_MPEG1_V4L2M2M_DECODER)   += v4l2_m2m_dec.o
 OBJS-$(CONFIG_MPEG2_MMAL_DECODER)      += mmaldec.o
 OBJS-$(CONFIG_MPEG2_QSV_DECODER)       += qsvdec_other.o
 OBJS-$(CONFIG_MPEG2_QSV_ENCODER)       += qsvenc_mpeg2.o
 OBJS-$(CONFIG_MPEG2VIDEO_DECODER)      += mpeg12dec.o mpeg12.o mpeg12data.o
 OBJS-$(CONFIG_MPEG2VIDEO_ENCODER)      += mpeg12enc.o mpeg12.o
-OBJS-$(CONFIG_MPEG2_MEDIACODEC_DECODER) += mediacodecdec.o
+#OBJS-$(CONFIG_MPEG2_MEDIACODEC_DECODER) += mediacodecdec.o
 OBJS-$(CONFIG_MPEG2_VAAPI_ENCODER)     += vaapi_encode_mpeg2.o
-OBJS-$(CONFIG_MPEG2_V4L2M2M_DECODER)   += v4l2_m2m_dec.o
+#OBJS-$(CONFIG_MPEG2_V4L2M2M_DECODER)   += v4l2_m2m_dec.o
 OBJS-$(CONFIG_MPEG4_DECODER)           += xvididct.o
-OBJS-$(CONFIG_MPEG4_MEDIACODEC_DECODER) += mediacodecdec.o
+#OBJS-$(CONFIG_MPEG4_MEDIACODEC_DECODER) += mediacodecdec.o
 OBJS-$(CONFIG_MPEG4_OMX_ENCODER)       += omx.o
-OBJS-$(CONFIG_MPEG4_V4L2M2M_DECODER)   += v4l2_m2m_dec.o
-OBJS-$(CONFIG_MPEG4_V4L2M2M_ENCODER)   += v4l2_m2m_enc.o
+#OBJS-$(CONFIG_MPEG4_V4L2M2M_DECODER)   += v4l2_m2m_dec.o
+#OBJS-$(CONFIG_MPEG4_V4L2M2M_ENCODER)   += v4l2_m2m_enc.o
 OBJS-$(CONFIG_MPL2_DECODER)            += mpl2dec.o ass.o
 OBJS-$(CONFIG_MSA1_DECODER)            += mss3.o
 OBJS-$(CONFIG_MSCC_DECODER)            += mscc.o
@@ -619,7 +611,7 @@ OBJS-$(CONFIG_VC1_DECODER)             +
 OBJS-$(CONFIG_VC1_CUVID_DECODER)       += cuvid.o
 OBJS-$(CONFIG_VC1_MMAL_DECODER)        += mmaldec.o
 OBJS-$(CONFIG_VC1_QSV_DECODER)         += qsvdec_other.o
-OBJS-$(CONFIG_VC1_V4L2M2M_DECODER)     += v4l2_m2m_dec.o
+#OBJS-$(CONFIG_VC1_V4L2M2M_DECODER)     += v4l2_m2m_dec.o
 OBJS-$(CONFIG_VC2_ENCODER)             += vc2enc.o vc2enc_dwt.o diractab.o
 OBJS-$(CONFIG_VCR1_DECODER)            += vcr1.o
 OBJS-$(CONFIG_VMDAUDIO_DECODER)        += vmdaudio.o
@@ -636,21 +628,21 @@ OBJS-$(CONFIG_VP6_DECODER)             +
 OBJS-$(CONFIG_VP7_DECODER)             += vp8.o vp56rac.o
 OBJS-$(CONFIG_VP8_DECODER)             += vp8.o vp56rac.o
 OBJS-$(CONFIG_VP8_CUVID_DECODER)       += cuvid.o
-OBJS-$(CONFIG_VP8_MEDIACODEC_DECODER)  += mediacodecdec.o
+#OBJS-$(CONFIG_VP8_MEDIACODEC_DECODER)  += mediacodecdec.o
 OBJS-$(CONFIG_VP8_QSV_DECODER)         += qsvdec_other.o
 OBJS-$(CONFIG_VP8_RKMPP_DECODER)       += rkmppdec.o
 OBJS-$(CONFIG_VP8_VAAPI_ENCODER)       += vaapi_encode_vp8.o
-OBJS-$(CONFIG_VP8_V4L2M2M_DECODER)     += v4l2_m2m_dec.o
-OBJS-$(CONFIG_VP8_V4L2M2M_ENCODER)     += v4l2_m2m_enc.o
+#OBJS-$(CONFIG_VP8_V4L2M2M_DECODER)     += v4l2_m2m_dec.o
+#OBJS-$(CONFIG_VP8_V4L2M2M_ENCODER)     += v4l2_m2m_enc.o
 OBJS-$(CONFIG_VP9_DECODER)             += vp9.o vp9data.o vp9dsp.o vp9lpf.o vp9recon.o \
                                           vp9block.o vp9prob.o vp9mvs.o vp56rac.o \
                                           vp9dsp_8bpp.o vp9dsp_10bpp.o vp9dsp_12bpp.o
 OBJS-$(CONFIG_VP9_CUVID_DECODER)       += cuvid.o
-OBJS-$(CONFIG_VP9_MEDIACODEC_DECODER)  += mediacodecdec.o
+#OBJS-$(CONFIG_VP9_MEDIACODEC_DECODER)  += mediacodecdec.o
 OBJS-$(CONFIG_VP9_RKMPP_DECODER)       += rkmppdec.o
 OBJS-$(CONFIG_VP9_VAAPI_ENCODER)       += vaapi_encode_vp9.o
 OBJS-$(CONFIG_VPLAYER_DECODER)         += textdec.o ass.o
-OBJS-$(CONFIG_VP9_V4L2M2M_DECODER)     += v4l2_m2m_dec.o
+#OBJS-$(CONFIG_VP9_V4L2M2M_DECODER)     += v4l2_m2m_dec.o
 OBJS-$(CONFIG_VQA_DECODER)             += vqavideo.o
 OBJS-$(CONFIG_WAVPACK_DECODER)         += wavpack.o
 OBJS-$(CONFIG_WAVPACK_ENCODER)         += wavpackenc.o
@@ -875,7 +867,7 @@ OBJS-$(CONFIG_FLV_DEMUXER)             +
 OBJS-$(CONFIG_LATM_MUXER)              += mpeg4audio.o
 OBJS-$(CONFIG_MATROSKA_AUDIO_MUXER)    += mpeg4audio.o
 OBJS-$(CONFIG_MATROSKA_MUXER)          += mpeg4audio.o
-OBJS-$(CONFIG_MOV_DEMUXER)             += ac3tab.o
+## OBJS-$(CONFIG_MOV_DEMUXER)             += ac3tab.o
 OBJS-$(CONFIG_MXF_MUXER)               += dnxhddata.o
 OBJS-$(CONFIG_NUT_MUXER)               += mpegaudiodata.o
 OBJS-$(CONFIG_NUT_DEMUXER)             += mpegaudiodata.o mpeg4audio.o
@@ -1063,7 +1055,7 @@ SKIPHEADERS-$(CONFIG_VAAPI)            +
 SKIPHEADERS-$(CONFIG_VDA)              += vda.h vda_vt_internal.h
 SKIPHEADERS-$(CONFIG_VDPAU)            += vdpau.h vdpau_internal.h
 SKIPHEADERS-$(CONFIG_VIDEOTOOLBOX)     += videotoolbox.h vda_vt_internal.h
-SKIPHEADERS-$(CONFIG_V4L2_M2M)         += v4l2_buffers.h v4l2_context.h v4l2_m2m.h
+#SKIPHEADERS-$(CONFIG_V4L2_M2M)         += v4l2_buffers.h v4l2_context.h v4l2_m2m.h
 
 TESTPROGS = avpacket                                                    \
             celp_math                                                   \
diff -uparN ffmpeg-3.4.1/libavcodec/mpeg4audio.c ffmpeg-y/libavcodec/mpeg4audio.c
--- ffmpeg-3.4.1/libavcodec/mpeg4audio.c	2017-12-11 05:35:08.000000000 +0800
+++ ffmpeg-y/libavcodec/mpeg4audio.c	2019-02-22 15:07:00.000000000 +0800
@@ -177,6 +177,11 @@ static av_always_inline unsigned int cop
     return el;
 }
 
+void avpriv_align_put_bits(PutBitContext *s)
+{
+    put_bits(s, s->bit_left & 7, 0);
+}
+
 int avpriv_copy_pce_data(PutBitContext *pb, GetBitContext *gb)
 {
     int five_bit_ch, four_bit_ch, comment_size, bits;
diff -uparN ffmpeg-3.4.1/libavcodec/options_table.h ffmpeg-y/libavcodec/options_table.h
--- ffmpeg-3.4.1/libavcodec/options_table.h	2017-12-11 05:35:08.000000000 +0800
+++ ffmpeg-y/libavcodec/options_table.h	2019-02-22 15:07:00.000000000 +0800
@@ -42,6 +42,7 @@
 #define AV_CODEC_DEFAULT_BITRATE 200*1000
 
 static const AVOption avcodec_options[] = {
+#if 0
 {"b", "set bitrate (in bits/s)", OFFSET(bit_rate), AV_OPT_TYPE_INT64, {.i64 = AV_CODEC_DEFAULT_BITRATE }, 0, INT64_MAX, A|V|E},
 {"ab", "set bitrate (in bits/s)", OFFSET(bit_rate), AV_OPT_TYPE_INT64, {.i64 = 128*1000 }, 0, INT_MAX, A|E},
 {"bt", "Set video bitrate tolerance (in bits/s). In 1-pass mode, bitrate tolerance specifies how far "
@@ -580,6 +581,7 @@ static const AVOption avcodec_options[]
 {"ignore_level", "ignore level even if the codec level used is unknown or higher than the maximum supported level reported by the hardware driver", 0, AV_OPT_TYPE_CONST, { .i64 = AV_HWACCEL_FLAG_IGNORE_LEVEL }, INT_MIN, INT_MAX, V | D, "hwaccel_flags" },
 {"allow_high_depth", "allow to output YUV pixel formats with a different chroma sampling than 4:2:0 and/or other than 8 bits per component", 0, AV_OPT_TYPE_CONST, {.i64 = AV_HWACCEL_FLAG_ALLOW_HIGH_DEPTH }, INT_MIN, INT_MAX, V | D, "hwaccel_flags"},
 {"allow_profile_mismatch", "attempt to decode anyway if HW accelerated decoder's supported profiles do not exactly match the stream", 0, AV_OPT_TYPE_CONST, {.i64 = AV_HWACCEL_FLAG_ALLOW_PROFILE_MISMATCH }, INT_MIN, INT_MAX, V | D, "hwaccel_flags"},
+#endif
 {NULL},
 };
 
diff -uparN ffmpeg-3.4.1/libavcodec/parser.c ffmpeg-y/libavcodec/parser.c
--- ffmpeg-3.4.1/libavcodec/parser.c	2017-12-11 05:35:08.000000000 +0800
+++ ffmpeg-y/libavcodec/parser.c	2019-02-22 15:07:00.000000000 +0800
@@ -51,6 +51,7 @@ void av_register_codec_parser(AVCodecPar
 
 AVCodecParserContext *av_parser_init(int codec_id)
 {
+
     AVCodecParserContext *s = NULL;
     AVCodecParser *parser;
     int ret;
@@ -105,6 +106,8 @@ err_out:
 
 void ff_fetch_timestamp(AVCodecParserContext *s, int off, int remove, int fuzzy)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     int i;
 
     if (!fuzzy) {
@@ -132,6 +135,7 @@ void ff_fetch_timestamp(AVCodecParserCon
                 break;
         }
     }
+#endif
 }
 
 int av_parser_parse2(AVCodecParserContext *s, AVCodecContext *avctx,
@@ -139,6 +143,8 @@ int av_parser_parse2(AVCodecParserContex
                      const uint8_t *buf, int buf_size,
                      int64_t pts, int64_t dts, int64_t pos)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     int index, i;
     uint8_t dummy_buf[AV_INPUT_BUFFER_PADDING_SIZE];
 
@@ -201,12 +207,17 @@ int av_parser_parse2(AVCodecParserContex
         index = 0;
     s->cur_offset += index;
     return index;
+#else
+    return 0;
+#endif
 }
 
 int av_parser_change(AVCodecParserContext *s, AVCodecContext *avctx,
                      uint8_t **poutbuf, int *poutbuf_size,
                      const uint8_t *buf, int buf_size, int keyframe)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     if (s && s->parser->split) {
         if (avctx->flags  & AV_CODEC_FLAG_GLOBAL_HEADER ||
             avctx->flags2 & AV_CODEC_FLAG2_LOCAL_HEADER) {
@@ -234,7 +245,7 @@ int av_parser_change(AVCodecParserContex
             return 1;
         }
     }
-
+#endif
     return 0;
 }
 
@@ -251,6 +262,7 @@ void av_parser_close(AVCodecParserContex
 int ff_combine_frame(ParseContext *pc, int next,
                      const uint8_t **buf, int *buf_size)
 {
+#ifdef HISI_NOT_LOW_FLASH
     if (pc->overread) {
         ff_dlog(NULL, "overread %d, state:%"PRIX32" next:%d index:%d o_index:%d\n",
                 pc->overread, pc->state, next, pc->index, pc->overread_index);
@@ -322,7 +334,7 @@ int ff_combine_frame(ParseContext *pc, i
         ff_dlog(NULL, "%X %X %X %X\n",
                 (*buf)[0], (*buf)[1], (*buf)[2], (*buf)[3]);
     }
-
+#endif
     return 0;
 }
 
diff -uparN ffmpeg-3.4.1/libavcodec/pthread_frame.c ffmpeg-y/libavcodec/pthread_frame.c
--- ffmpeg-3.4.1/libavcodec/pthread_frame.c	2017-12-11 05:35:08.000000000 +0800
+++ ffmpeg-y/libavcodec/pthread_frame.c	2019-02-22 15:07:00.000000000 +0800
@@ -139,6 +139,7 @@ typedef struct FrameThreadContext {
 
 #define THREAD_SAFE_CALLBACKS(avctx) \
 ((avctx)->thread_safe_callbacks || (avctx)->get_buffer2 == avcodec_default_get_buffer2)
+#ifdef HISI_NOT_LOW_FLASH
 
 static void async_lock(FrameThreadContext *fctx)
 {
@@ -158,6 +159,9 @@ static void async_unlock(FrameThreadCont
     pthread_mutex_unlock(&fctx->async_mutex);
 }
 
+
+
+
 /**
  * Codec worker thread.
  *
@@ -234,6 +238,7 @@ static attribute_align_arg void *frame_w
     return NULL;
 }
 
+
 /**
  * Update the next thread's AVCodecContext with values from the reference thread's context.
  *
@@ -318,6 +323,7 @@ FF_ENABLE_DEPRECATION_WARNINGS
     return err;
 }
 
+
 /**
  * Update the next thread's AVCodecContext with values set by the user.
  *
@@ -361,6 +367,7 @@ static int update_context_from_user(AVCo
 #undef copy_fields
 }
 
+
 /// Releases the buffers that this decoding thread was the last user of.
 static void release_delayed_buffers(PerThreadContext *p)
 {
@@ -382,6 +389,7 @@ static void release_delayed_buffers(PerT
     }
 }
 
+
 static int submit_packet(PerThreadContext *p, AVCodecContext *user_avctx,
                          AVPacket *avpkt)
 {
@@ -473,11 +481,14 @@ static int submit_packet(PerThreadContex
 
     return 0;
 }
+#endif
 
 int ff_thread_decode_frame(AVCodecContext *avctx,
                            AVFrame *picture, int *got_picture_ptr,
                            AVPacket *avpkt)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     FrameThreadContext *fctx = avctx->internal->thread_ctx;
     int finished = fctx->next_finished;
     PerThreadContext *p;
@@ -557,10 +568,15 @@ int ff_thread_decode_frame(AVCodecContex
 finish:
     async_lock(fctx);
     return err;
+    
+#else
+    return 0;
+#endif
 }
-
 void ff_thread_report_progress(ThreadFrame *f, int n, int field)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     PerThreadContext *p;
     atomic_int *progress = f->progress ? (atomic_int*)f->progress->data : NULL;
 
@@ -580,10 +596,14 @@ void ff_thread_report_progress(ThreadFra
 
     pthread_cond_broadcast(&p->progress_cond);
     pthread_mutex_unlock(&p->progress_mutex);
+ #endif
 }
 
 void ff_thread_await_progress(ThreadFrame *f, int n, int field)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
+
     PerThreadContext *p;
     atomic_int *progress = f->progress ? (atomic_int*)f->progress->data : NULL;
 
@@ -601,9 +621,12 @@ void ff_thread_await_progress(ThreadFram
     while (atomic_load_explicit(&progress[field], memory_order_relaxed) < n)
         pthread_cond_wait(&p->progress_cond, &p->progress_mutex);
     pthread_mutex_unlock(&p->progress_mutex);
+#endif
 }
 
 void ff_thread_finish_setup(AVCodecContext *avctx) {
+#ifdef HISI_NOT_LOW_FLASH
+    
     PerThreadContext *p = avctx->internal->thread_ctx;
 
     if (!(avctx->active_thread_type&FF_THREAD_FRAME)) return;
@@ -630,7 +653,9 @@ void ff_thread_finish_setup(AVCodecConte
 
     pthread_cond_broadcast(&p->progress_cond);
     pthread_mutex_unlock(&p->progress_mutex);
+#endif
 }
+#ifdef HISI_NOT_LOW_FLASH
 
 /// Waits for all threads to finish.
 static void park_frame_worker_threads(FrameThreadContext *fctx, int thread_count)
@@ -653,9 +678,12 @@ static void park_frame_worker_threads(Fr
 
     async_lock(fctx);
 }
+#endif
 
 void ff_frame_thread_free(AVCodecContext *avctx, int thread_count)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     FrameThreadContext *fctx = avctx->internal->thread_ctx;
     const AVCodec *codec = avctx->codec;
     int i;
@@ -723,10 +751,13 @@ void ff_frame_thread_free(AVCodecContext
     if (avctx->priv_data && avctx->codec && avctx->codec->priv_class)
         av_opt_free(avctx->priv_data);
     avctx->codec = NULL;
+#endif
 }
 
 int ff_frame_thread_init(AVCodecContext *avctx)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     int thread_count = avctx->thread_count;
     const AVCodec *codec = avctx->codec;
     AVCodecContext *src = avctx;
@@ -846,10 +877,15 @@ error:
     ff_frame_thread_free(avctx, i+1);
 
     return err;
+#else
+    return 0;
+#endif
 }
 
 void ff_thread_flush(AVCodecContext *avctx)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     int i;
     FrameThreadContext *fctx = avctx->internal->thread_ctx;
 
@@ -876,17 +912,22 @@ void ff_thread_flush(AVCodecContext *avc
         if (avctx->codec->flush)
             avctx->codec->flush(p->avctx);
     }
+#endif
 }
 
 int ff_thread_can_start_frame(AVCodecContext *avctx)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     PerThreadContext *p = avctx->internal->thread_ctx;
     if ((avctx->active_thread_type&FF_THREAD_FRAME) && atomic_load(&p->state) != STATE_SETTING_UP &&
         (avctx->codec->update_thread_context || !THREAD_SAFE_CALLBACKS(avctx))) {
         return 0;
     }
+#endif
     return 1;
 }
+#ifdef HISI_NOT_LOW_FLASH
 
 static int thread_get_buffer_internal(AVCodecContext *avctx, ThreadFrame *f, int flags)
 {
@@ -946,10 +987,14 @@ static int thread_get_buffer_internal(AV
 
     return err;
 }
+#endif
 
 enum AVPixelFormat ff_thread_get_format(AVCodecContext *avctx, const enum AVPixelFormat *fmt)
 {
+
     enum AVPixelFormat res;
+    
+#ifdef HISI_NOT_LOW_FLASH
     PerThreadContext *p = avctx->internal->thread_ctx;
     if (!(avctx->active_thread_type & FF_THREAD_FRAME) || avctx->thread_safe_callbacks ||
         avctx->get_format == avcodec_default_get_format)
@@ -969,20 +1014,26 @@ enum AVPixelFormat ff_thread_get_format(
     res = p->result_format;
 
     pthread_mutex_unlock(&p->progress_mutex);
+#endif
 
     return res;
 }
 
 int ff_thread_get_buffer(AVCodecContext *avctx, ThreadFrame *f, int flags)
 {
+#ifdef HISI_NOT_LOW_FLASH
     int ret = thread_get_buffer_internal(avctx, f, flags);
     if (ret < 0)
         av_log(avctx, AV_LOG_ERROR, "thread_get_buffer() failed\n");
     return ret;
+#else
+    return 0;
+#endif
 }
 
 void ff_thread_release_buffer(AVCodecContext *avctx, ThreadFrame *f)
 {
+#ifdef HISI_NOT_LOW_FLASH
     PerThreadContext *p = avctx->internal->thread_ctx;
     FrameThreadContext *fctx;
     AVFrame *dst, *tmp;
@@ -1023,4 +1074,5 @@ void ff_thread_release_buffer(AVCodecCon
 
 fail:
     pthread_mutex_unlock(&fctx->buffer_mutex);
+#endif
 }
diff -uparN ffmpeg-3.4.1/libavcodec/pthread_slice.c ffmpeg-y/libavcodec/pthread_slice.c
--- ffmpeg-3.4.1/libavcodec/pthread_slice.c	2017-12-11 05:35:08.000000000 +0800
+++ ffmpeg-y/libavcodec/pthread_slice.c	2019-02-22 15:07:00.000000000 +0800
@@ -76,6 +76,8 @@ static void worker_func(void *priv, int
 
 void ff_slice_thread_free(AVCodecContext *avctx)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     SliceThreadContext *c = avctx->internal->thread_ctx;
     int i;
 
@@ -90,7 +92,9 @@ void ff_slice_thread_free(AVCodecContext
     av_freep(&c->progress_mutex);
     av_freep(&c->progress_cond);
     av_freep(&avctx->internal->thread_ctx);
+#endif
 }
+#ifdef HISI_NOT_LOW_FLASH
 
 static int thread_execute(AVCodecContext *avctx, action_func* func, void *arg, int *ret, int job_count, int job_size)
 {
@@ -117,17 +121,23 @@ static int thread_execute2(AVCodecContex
     c->func2 = func2;
     return thread_execute(avctx, NULL, arg, ret, job_count, 0);
 }
-
+#endif
 int ff_slice_thread_execute_with_mainfunc(AVCodecContext *avctx, action_func2* func2, main_func *mainfunc, void *arg, int *ret, int job_count)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     SliceThreadContext *c = avctx->internal->thread_ctx;
     c->func2 = func2;
     c->mainfunc = mainfunc;
     return thread_execute(avctx, NULL, arg, ret, job_count, 0);
+#else
+    return 0;
+#endif
 }
 
 int ff_slice_thread_init(AVCodecContext *avctx)
 {
+#ifdef HISI_NOT_LOW_FLASH
     SliceThreadContext *c;
     int thread_count = avctx->thread_count;
     static void (*mainfunc)(void *);
@@ -172,11 +182,14 @@ int ff_slice_thread_init(AVCodecContext
 
     avctx->execute = thread_execute;
     avctx->execute2 = thread_execute2;
+#endif
     return 0;
 }
 
 void ff_thread_report_progress2(AVCodecContext *avctx, int field, int thread, int n)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     SliceThreadContext *p = avctx->internal->thread_ctx;
     int *entries = p->entries;
 
@@ -184,10 +197,13 @@ void ff_thread_report_progress2(AVCodecC
     entries[field] +=n;
     pthread_cond_signal(&p->progress_cond[thread]);
     pthread_mutex_unlock(&p->progress_mutex[thread]);
+#endif
 }
 
 void ff_thread_await_progress2(AVCodecContext *avctx, int field, int thread, int shift)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     SliceThreadContext *p  = avctx->internal->thread_ctx;
     int *entries      = p->entries;
 
@@ -200,11 +216,13 @@ void ff_thread_await_progress2(AVCodecCo
         pthread_cond_wait(&p->progress_cond[thread], &p->progress_mutex[thread]);
     }
     pthread_mutex_unlock(&p->progress_mutex[thread]);
+#endif
 }
 
 int ff_alloc_entries(AVCodecContext *avctx, int count)
 {
     int i;
+#ifdef HISI_NOT_LOW_FLASH
 
     if (avctx->active_thread_type & FF_THREAD_SLICE)  {
         SliceThreadContext *p = avctx->internal->thread_ctx;
@@ -235,12 +253,15 @@ int ff_alloc_entries(AVCodecContext *avc
             pthread_cond_init(&p->progress_cond[i], NULL);
         }
     }
-
+#endif
     return 0;
 }
 
 void ff_reset_entries(AVCodecContext *avctx)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     SliceThreadContext *p = avctx->internal->thread_ctx;
     memset(p->entries, 0, p->entries_count * sizeof(int));
+#endif
 }
diff -uparN ffmpeg-3.4.1/libavcodec/raw.c ffmpeg-y/libavcodec/raw.c
--- ffmpeg-3.4.1/libavcodec/raw.c	2017-12-11 05:35:09.000000000 +0800
+++ ffmpeg-y/libavcodec/raw.c	2019-02-22 15:07:00.000000000 +0800
@@ -29,7 +29,10 @@
 #include "libavutil/common.h"
 
 const PixelFormatTag ff_raw_pix_fmt_tags[] = {
+
     { AV_PIX_FMT_YUV420P, MKTAG('I', '4', '2', '0') }, /* Planar formats */
+        
+#ifdef HISI_NOT_LOW_FLASH
     { AV_PIX_FMT_YUV420P, MKTAG('I', 'Y', 'U', 'V') },
     { AV_PIX_FMT_YUV420P, MKTAG('y', 'v', '1', '2') },
     { AV_PIX_FMT_YUV420P, MKTAG('Y', 'V', '1', '2') },
@@ -288,6 +291,7 @@ const PixelFormatTag ff_raw_pix_fmt_tags
     { AV_PIX_FMT_YUV444P, MKTAG('Y', 'V', '2', '4') }, /* YUV444P, swapped UV */
 
     { AV_PIX_FMT_NONE, 0 },
+#endif
 };
 
 const struct PixelFormatTag *avpriv_get_raw_pix_fmt_tags(void)
@@ -297,12 +301,15 @@ const struct PixelFormatTag *avpriv_get_
 
 unsigned int avcodec_pix_fmt_to_codec_tag(enum AVPixelFormat fmt)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     const PixelFormatTag *tags = ff_raw_pix_fmt_tags;
     while (tags->pix_fmt >= 0) {
         if (tags->pix_fmt == fmt)
             return tags->fourcc;
         tags++;
     }
+#endif
     return 0;
 }
 
diff -uparN ffmpeg-3.4.1/libavcodec/rawdec.c ffmpeg-y/libavcodec/rawdec.c
--- ffmpeg-3.4.1/libavcodec/rawdec.c	2017-12-11 05:35:09.000000000 +0800
+++ ffmpeg-y/libavcodec/rawdec.c	2019-02-22 15:07:00.000000000 +0800
@@ -68,6 +68,7 @@ static const AVClass rawdec_class = {
 
 static av_cold int raw_init_decoder(AVCodecContext *avctx)
 {
+#ifdef HISI_NOT_LOW_FLASH
     RawVideoContext *context = avctx->priv_data;
     const AVPixFmtDescriptor *desc;
 
@@ -127,7 +128,7 @@ static av_cold int raw_init_decoder(AVCo
     if (avctx->codec_tag == AV_RL32("yuv2") &&
         avctx->pix_fmt   == AV_PIX_FMT_YUYV422)
         context->is_yuv2 = 1;
-
+#endif
     return 0;
 }
 
@@ -168,6 +169,8 @@ MKSCALE16(scale16le, AV_RL16, AV_WL16)
 static int raw_decode(AVCodecContext *avctx, void *data, int *got_frame,
                       AVPacket *avpkt)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     const AVPixFmtDescriptor *desc;
     RawVideoContext *context       = avctx->priv_data;
     const uint8_t *buf             = avpkt->data;
@@ -480,13 +483,19 @@ static int raw_decode(AVCodecContext *av
 
     *got_frame = 1;
     return buf_size;
+#else
+    return 0;
+#endif
 }
 
 static av_cold int raw_close_decoder(AVCodecContext *avctx)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     RawVideoContext *context = avctx->priv_data;
 
     av_buffer_unref(&context->palette);
+#endif
     return 0;
 }
 
diff -uparN ffmpeg-3.4.1/libavcodec/utils.c ffmpeg-y/libavcodec/utils.c
--- ffmpeg-3.4.1/libavcodec/utils.c	2017-12-11 05:35:09.000000000 +0800
+++ ffmpeg-y/libavcodec/utils.c	2019-02-22 15:07:00.000000000 +0800
@@ -68,6 +68,8 @@ const char av_codec_ffversion[] = "FFmpe
 #if HAVE_PTHREADS || HAVE_W32THREADS || HAVE_OS2THREADS
 static int default_lockmgr_cb(void **arg, enum AVLockOp op)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     void * volatile * mutex = arg;
     int err;
 
@@ -105,6 +107,7 @@ static int default_lockmgr_cb(void **arg
         avpriv_atomic_ptr_cas(mutex, *mutex, NULL);
         return 0;
     }
+#endif
     return 1;
 }
 static int (*lockmgr_cb)(void **mutex, enum AVLockOp op) = default_lockmgr_cb;
@@ -261,6 +264,8 @@ int ff_side_data_update_matrix_encoding(
 void avcodec_align_dimensions2(AVCodecContext *s, int *width, int *height,
                                int linesize_align[AV_NUM_DATA_POINTERS])
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     int i;
     int w_align = 1;
     int h_align = 1;
@@ -433,6 +438,7 @@ void avcodec_align_dimensions2(AVCodecCo
 
     for (i = 0; i < 4; i++)
         linesize_align[i] = STRIDE_ALIGN;
+#endif
 }
 
 void avcodec_align_dimensions(AVCodecContext *s, int *width, int *height)
@@ -626,6 +632,8 @@ int attribute_align_arg ff_codec_open2_r
 
 int attribute_align_arg avcodec_open2(AVCodecContext *avctx, const AVCodec *codec, AVDictionary **options)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     int ret = 0;
     AVDictionary *tmp = NULL;
     const AVPixFmtDescriptor *pixdesc;
@@ -1139,6 +1147,10 @@ FF_ENABLE_DEPRECATION_WARNINGS
     av_freep(&avctx->internal);
     avctx->codec = NULL;
     goto end;
+
+#else
+    return 0;
+#endif
 }
 
 void avsubtitle_free(AVSubtitle *sub)
@@ -1162,6 +1174,8 @@ void avsubtitle_free(AVSubtitle *sub)
 
 av_cold int avcodec_close(AVCodecContext *avctx)
 {
+
+
     int i;
 
     if (!avctx)
@@ -1333,6 +1347,8 @@ size_t av_get_codec_tag_string(char *buf
 
 void avcodec_string(char *buf, int buf_size, AVCodecContext *enc, int encode)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     const char *codec_type;
     const char *codec_name;
     const char *profile = NULL;
@@ -1524,6 +1540,7 @@ void avcodec_string(char *buf, int buf_s
         snprintf(buf + strlen(buf), buf_size - strlen(buf),
                  ", max. %"PRId64" kb/s", enc->rc_max_rate / 1000);
     }
+#endif
 }
 
 const char *av_get_profile_name(const AVCodec *codec, int profile)
 
@@ -2267,6 +2286,7 @@ AVCodecParameters *avcodec_parameters_al
 
 void avcodec_parameters_free(AVCodecParameters **ppar)
 {
+
     AVCodecParameters *par = *ppar;
 
     if (!par)
@@ -2278,6 +2298,7 @@ void avcodec_parameters_free(AVCodecPara
 
 int avcodec_parameters_copy(AVCodecParameters *dst, const AVCodecParameters *src)
 {
+
     codec_parameters_reset(dst);
     memcpy(dst, src, sizeof(*dst));
 
@@ -2297,6 +2318,7 @@ int avcodec_parameters_copy(AVCodecParam
 int avcodec_parameters_from_context(AVCodecParameters *par,
                                     const AVCodecContext *codec)
 {
+
     codec_parameters_reset(par);
 
     par->codec_type = codec->codec_type;
@@ -2354,6 +2376,7 @@ int avcodec_parameters_from_context(AVCo
 int avcodec_parameters_to_context(AVCodecContext *codec,
                                   const AVCodecParameters *par)
 {
+
     codec->codec_type = par->codec_type;
     codec->codec_id   = par->codec_id;
     codec->codec_tag  = par->codec_tag;
@@ -2408,51 +2431,10 @@ int avcodec_parameters_to_context(AVCode
     return 0;
 }
 
-int ff_alloc_a53_sei(const AVFrame *frame, size_t prefix_len,
-                     void **data, size_t *sei_size)
-{
-    AVFrameSideData *side_data = NULL;
-    uint8_t *sei_data;
-
-    if (frame)
-        side_data = av_frame_get_side_data(frame, AV_FRAME_DATA_A53_CC);
-
-    if (!side_data) {
-        *data = NULL;
-        return 0;
-    }
-
-    *sei_size = side_data->size + 11;
-    *data = av_mallocz(*sei_size + prefix_len);
-    if (!*data)
-        return AVERROR(ENOMEM);
-    sei_data = (uint8_t*)*data + prefix_len;
-
-    // country code
-    sei_data[0] = 181;
-    sei_data[1] = 0;
-    sei_data[2] = 49;
-
-    /**
-     * 'GA94' is standard in North America for ATSC, but hard coding
-     * this style may not be the right thing to do -- other formats
-     * do exist. This information is not available in the side_data
-     * so we are going with this right now.
-     */
-    AV_WL32(sei_data + 3, MKTAG('G', 'A', '9', '4'));
-    sei_data[7] = 3;
-    sei_data[8] = ((side_data->size/3) & 0x1f) | 0x40;
-    sei_data[9] = 0;
-
-    memcpy(sei_data + 10, side_data->data, side_data->size);
-
-    sei_data[side_data->size+10] = 255;
-
-    return 0;
-}
 
 int64_t ff_guess_coded_bitrate(AVCodecContext *avctx)
 {
+#ifdef HISI_NOT_LOW_FLASH
     AVRational framerate = avctx->framerate;
     int bits_per_coded_sample = avctx->bits_per_coded_sample;
     int64_t bitrate;
@@ -2470,4 +2452,7 @@ int64_t ff_guess_coded_bitrate(AVCodecCo
               framerate.num / framerate.den;
 
     return bitrate;
+#else
+    return 0;
+#endif
 }
diff -uparN ffmpeg-3.4.1/libavfilter/vf_signature.c ffmpeg-y/libavfilter/vf_signature.c
--- ffmpeg-3.4.1/libavfilter/vf_signature.c	2017-12-11 05:35:10.000000000 +0800
+++ ffmpeg-y/libavfilter/vf_signature.c	2019-02-22 15:07:00.000000000 +0800
@@ -576,7 +576,8 @@ static int export(AVFilterContext *ctx,
         /* error already handled */
         av_assert0(av_get_frame_filename(filename, sizeof(filename), sic->filename, input) == 0);
     } else {
-        strcpy(filename, sic->filename);
+        if (av_strlcpy(filename, sic->filename, sizeof(filename)) >= sizeof(filename))
+            return AVERROR(EINVAL);
     }
     if (sic->format == FORMAT_XML) {
         return xml_export(ctx, sc, filename);
diff -uparN ffmpeg-3.4.1/libavformat/asfdec_f.c ffmpeg-y/libavformat/asfdec_f.c
--- ffmpeg-3.4.1/libavformat/asfdec_f.c	2017-12-11 05:35:10.000000000 +0800
+++ ffmpeg-y/libavformat/asfdec_f.c	2019-02-22 15:07:00.000000000 +0800
@@ -855,7 +855,9 @@ static int asf_read_header(AVFormatConte
 
                     if ((ret = av_get_packet(pb, &pkt, len)) < 0)
                         return ret;
+#ifdef HISI_NOT_LOW_FLASH
                     av_hex_dump_log(s, AV_LOG_DEBUG, pkt.data, pkt.size);
+                    #endif
                     av_packet_unref(&pkt);
                     len= avio_rl32(pb);
                     get_tag(s, "ASF_Protection_Type", -1, len, 32);
diff -uparN ffmpeg-3.4.1/libavformat/avformat.h ffmpeg-y/libavformat/avformat.h
--- ffmpeg-3.4.1/libavformat/avformat.h	2017-12-11 05:35:10.000000000 +0800
+++ ffmpeg-y/libavformat/avformat.h	2019-02-22 15:07:00.000000000 +0800
@@ -2653,6 +2653,7 @@ int av_get_output_timestamp(struct AVFor
  * Miscellaneous utility functions related to both muxing and demuxing
  * (or neither).
  */
+#ifdef HISI_NOT_LOW_FLASH
 
 /**
  * Send a nice hexadecimal dump of a buffer to the specified file stream.
@@ -2687,6 +2688,7 @@ void av_hex_dump_log(void *avcl, int lev
  * @param dump_payload True if the payload must be displayed, too.
  * @param st AVStream that the packet belongs to
  */
+
 void av_pkt_dump2(FILE *f, const AVPacket *pkt, int dump_payload, const AVStream *st);
 
 
@@ -2703,7 +2705,7 @@ void av_pkt_dump2(FILE *f, const AVPacke
  */
 void av_pkt_dump_log2(void *avcl, int level, const AVPacket *pkt, int dump_payload,
                       const AVStream *st);
-
+#endif
 /**
  * Get the AVCodecID for the given codec tag tag.
  * If no codec id is found returns AV_CODEC_ID_NONE.
@@ -2798,11 +2800,12 @@ void av_url_split(char *proto,         i
  * @param url       the URL to print, such as source or destination file
  * @param is_output Select whether the specified context is an input(0) or output(1)
  */
+#ifdef HISI_NOT_LOW_FLASH
 void av_dump_format(AVFormatContext *ic,
                     int index,
                     const char *url,
                     int is_output);
-
+#endif
 
 #define AV_FRAME_FILENAME_FLAGS_MULTIPLE 1 ///< Allow multiple %d
 
diff -uparN ffmpeg-3.4.1/libavformat/dump.c ffmpeg-y/libavformat/dump.c
--- ffmpeg-3.4.1/libavformat/dump.c	2017-12-11 05:35:10.000000000 +0800
+++ ffmpeg-y/libavformat/dump.c	2019-02-22 15:07:00.000000000 +0800
@@ -18,6 +18,7 @@
  * License along with FFmpeg; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
  */
+#ifdef HISI_NOT_LOW_FLASH
 
 #include <stdio.h>
 #include <stdint.h>
@@ -637,3 +638,4 @@ void av_dump_format(AVFormatContext *ic,
 
     av_free(printed);
 }
+#endif
diff -uparN ffmpeg-3.4.1/libavformat/format.c ffmpeg-y/libavformat/format.c
--- ffmpeg-3.4.1/libavformat/format.c	2017-12-11 05:35:10.000000000 +0800
+++ ffmpeg-y/libavformat/format.c	2019-02-22 15:07:00.000000000 +0800
@@ -187,6 +187,7 @@ AVInputFormat *av_probe_input_format3(AV
     if (!lpd.buf)
         lpd.buf = (unsigned char *) zerobuffer;
 
+#ifdef HISI_NOT_LOW_FLASH
     if (lpd.buf_size > 10 && ff_id3v2_match(lpd.buf, ID3v2_DEFAULT_MAGIC)) {
         int id3len = ff_id3v2_tag_len(lpd.buf);
         if (lpd.buf_size > id3len + 16) {
@@ -199,6 +200,7 @@ AVInputFormat *av_probe_input_format3(AV
         } else
             nodat = ID3_GREATER_PROBE;
     }
+#endif
 
     fmt = NULL;
     while ((fmt1 = av_iformat_next(fmt1))) {
diff -uparN ffmpeg-3.4.1/libavformat/internal.h ffmpeg-y/libavformat/internal.h
--- ffmpeg-3.4.1/libavformat/internal.h	2017-12-11 05:35:10.000000000 +0800
+++ ffmpeg-y/libavformat/internal.h	2019-02-22 15:07:00.000000000 +0800
@@ -34,6 +34,7 @@
 #define PROBE_BUF_MAX (1 << 20)
 
 #define MAX_PROBE_PACKETS 2500
+#ifdef HISI_NOT_LOW_FLASH
 
 #ifdef DEBUG
 #    define hex_dump_debug(class, buf, size) av_hex_dump_log(class, AV_LOG_DEBUG, buf, size)
@@ -41,6 +42,8 @@
 #    define hex_dump_debug(class, buf, size) do { if (0) av_hex_dump_log(class, AV_LOG_DEBUG, buf, size); } while(0)
 #endif
 
+#endif
+
 typedef struct AVCodecTag {
     enum AVCodecID id;
     unsigned int tag;
diff -uparN ffmpeg-3.4.1/libavformat/Makefile ffmpeg-y/libavformat/Makefile
--- ffmpeg-3.4.1/libavformat/Makefile	2017-12-11 05:35:10.000000000 +0800
+++ ffmpeg-y/libavformat/Makefile	2019-02-22 15:07:00.000000000 +0800
@@ -11,8 +11,6 @@ OBJS = allformats.o         \
        cutils.o             \
        dump.o               \
        format.o             \
-       id3v1.o              \
-       id3v2.o              \
        metadata.o           \
        mux.o                \
        options.o            \
@@ -617,7 +615,7 @@ TESTPROGS-$(CONFIG_SRTP)
 
 TOOLS     = aviocat                                                     \
             ismindex                                                    \
-            pktdumper                                                   \
+#            pktdumper                                                   \
             probetest                                                   \
             seek_print                                                  \
             sidxindex                                                   \
diff -uparN ffmpeg-3.4.1/libavformat/mov.c ffmpeg-y/libavformat/mov.c
--- ffmpeg-3.4.1/libavformat/mov.c	2017-12-11 05:35:18.000000000 +0800
+++ ffmpeg-y/libavformat/mov.c	2019-02-22 15:07:00.000000000 +0800
@@ -72,6 +72,20 @@ typedef struct MOVParseTableEntry {
     int (*parse)(MOVContext *ctx, AVIOContext *pb, MOVAtom atom);
 } MOVParseTableEntry;
 
+/**
+ * Map audio coding mode (acmod) to channel layout mask.
+ */
+const uint16_t avpriv_ac3_channel_layout_tab[8] = {
+    AV_CH_LAYOUT_STEREO,
+    AV_CH_LAYOUT_MONO,
+    AV_CH_LAYOUT_STEREO,
+    AV_CH_LAYOUT_SURROUND,
+    AV_CH_LAYOUT_2_1,
+    AV_CH_LAYOUT_4POINT0,
+    AV_CH_LAYOUT_2_2,
+    AV_CH_LAYOUT_5POINT0
+};
+
 static int mov_read_default(MOVContext *c, AVIOContext *pb, MOVAtom atom);
 static int mov_read_mfra(MOVContext *c, AVIOContext *f);
 static int64_t add_ctts_entry(MOVStts** ctts_data, unsigned int* ctts_count, unsigned int* allocated_size,
@@ -131,8 +145,11 @@ static int mov_metadata_gnre(MOVContext
     if (genre < 1 || genre > ID3v1_GENRE_MAX)
         return 0;
     c->fc->event_flags |= AVFMT_EVENT_FLAG_METADATA_UPDATED;
+#ifndef HISI_NOT_LOW_FLASH
+    av_dict_set(&c->fc->metadata, key, "unsupport", 0);
+#else
     av_dict_set(&c->fc->metadata, key, ff_id3v1_genre_str[genre-1], 0);
-
+#endif
     return 0;
 }
 
diff -uparN ffmpeg-3.4.1/libavformat/movenc.c ffmpeg-y/libavformat/movenc.c
--- ffmpeg-3.4.1/libavformat/movenc.c	2017-12-11 05:35:10.000000000 +0800
+++ ffmpeg-y/libavformat/movenc.c	2019-02-22 15:07:00.000000000 +0800
@@ -959,7 +959,7 @@ static int mov_write_audio_tag(AVFormatC
     uint32_t tag = track->tag;
 
     if (track->mode == MODE_MOV) {
-        if (track->timescale > UINT16_MAX) {
+        if (track->timescale > UINT16_MAX || !track->par->channels) {
             if (mov_get_lpcm_flags(track->par->codec_id))
                 tag = AV_RL32("lpcm");
             version = 2;
@@ -5072,6 +5072,10 @@ int ff_mov_write_packet(AVFormatContext
     else
         samples_in_chunk = 1;
 
+    if (samples_in_chunk < 1) {
+        av_log(s, AV_LOG_ERROR, "fatal error, input packet contains no samples\n");
+        return AVERROR_PATCHWELCOME;
+    }
     /* copy extradata if it exists */
     if (trk->vos_len == 0 && par->extradata_size > 0 &&
         !TAG_IS_AVCI(trk->tag) &&
diff -uparN ffmpeg-3.4.1/libavformat/mpegts.c ffmpeg-y/libavformat/mpegts.c
--- ffmpeg-3.4.1/libavformat/mpegts.c	2017-12-11 05:35:10.000000000 +0800
+++ ffmpeg-y/libavformat/mpegts.c	2019-02-22 15:07:00.000000000 +0800
@@ -1926,8 +1926,9 @@ static void pmt_cb(MpegTSFilter *filter,
     int i;
 
     av_log(ts->stream, AV_LOG_TRACE, "PMT: len %i\n", section_len);
+#ifdef HISI_NOT_LOW_FLASH
     hex_dump_debug(ts->stream, section, section_len);
-
+#endif
     p_end = section + section_len - 4;
     p = section;
     if (parse_section_header(h, &p, p_end) < 0)
@@ -2094,8 +2095,9 @@ static void pat_cb(MpegTSFilter *filter,
     AVProgram *program;
 
     av_log(ts->stream, AV_LOG_TRACE, "PAT:\n");
+#ifdef HISI_NOT_LOW_FLASH
     hex_dump_debug(ts->stream, section, section_len);
-
+#endif
     p_end = section + section_len - 4;
     p     = section;
     if (parse_section_header(h, &p, p_end) < 0)
@@ -2169,8 +2171,9 @@ static void sdt_cb(MpegTSFilter *filter,
     char *name, *provider_name;
 
     av_log(ts->stream, AV_LOG_TRACE, "SDT:\n");
+#ifdef HISI_NOT_LOW_FLASH
     hex_dump_debug(ts->stream, section, section_len);
-
+#endif
     p_end = section + section_len - 4;
     p     = section;
     if (parse_section_header(h, &p, p_end) < 0)
@@ -2457,8 +2460,11 @@ static int read_packet(AVFormatContext *
         /* check packet sync byte */
         if ((*data)[0] != 0x47) {
             /* find a new packet start */
-
-            if (mpegts_resync(s, raw_packet_size, *data) < 0)
+            /*hisi change begin, instead EAGAIN by EOF*/
+            int ret = mpegts_resync(s, raw_packet_size, *data);
+            if (ret == AVERROR_INVALIDDATA)
+                return AVERROR_EOF;
+            else if (ret < 0)
                 return AVERROR(EAGAIN);
             else
                 continue;
diff -uparN ffmpeg-3.4.1/libavformat/riff.c ffmpeg-y/libavformat/riff.c
--- ffmpeg-3.4.1/libavformat/riff.c	2017-12-11 05:35:10.000000000 +0800
+++ ffmpeg-y/libavformat/riff.c	2019-02-22 15:07:00.000000000 +0800
@@ -44,6 +44,8 @@ const AVCodecTag ff_codec_bmp_tags[] = {
     { AV_CODEC_ID_H264,         MKTAG('U', 'M', 'S', 'V') },
     { AV_CODEC_ID_H264,         MKTAG('t', 's', 'h', 'd') },
     { AV_CODEC_ID_H264,         MKTAG('I', 'N', 'M', 'C') },
+    
+#ifdef HISI_NOT_LOW_FLASH
     { AV_CODEC_ID_H263,         MKTAG('H', '2', '6', '3') },
     { AV_CODEC_ID_H263,         MKTAG('X', '2', '6', '3') },
     { AV_CODEC_ID_H263,         MKTAG('T', '2', '6', '3') },
@@ -463,11 +465,14 @@ const AVCodecTag ff_codec_bmp_tags[] = {
     { AV_CODEC_ID_AV1,          MKTAG('A', 'V', '0', '1') },
     { AV_CODEC_ID_MSCC,         MKTAG('M', 'S', 'C', 'C') },
     { AV_CODEC_ID_SRGC,         MKTAG('S', 'R', 'G', 'C') },
+    #endif
     { AV_CODEC_ID_NONE,         0 }
 };
 
 const AVCodecTag ff_codec_wav_tags[] = {
     { AV_CODEC_ID_PCM_S16LE,       0x0001 },
+        
+#ifdef HISI_NOT_LOW_FLASH
     /* must come after s16le in this list */
     { AV_CODEC_ID_PCM_U8,          0x0001 },
     { AV_CODEC_ID_PCM_S24LE,       0x0001 },
@@ -547,6 +552,7 @@ const AVCodecTag ff_codec_wav_tags[] = {
     { AV_CODEC_ID_ADPCM_SWF,       ('S' << 8) + 'F' },
     /* HACK/FIXME: Does Vorbis in WAV/AVI have an (in)official ID? */
     { AV_CODEC_ID_VORBIS,          ('V' << 8) + 'o' },
+    #endif
     { AV_CODEC_ID_NONE,      0 },
 };
 
diff -uparN ffmpeg-3.4.1/libavformat/riffdec.c ffmpeg-y/libavformat/riffdec.c
--- ffmpeg-3.4.1/libavformat/riffdec.c	2017-12-11 05:35:10.000000000 +0800
+++ ffmpeg-y/libavformat/riffdec.c	2019-02-22 15:07:00.000000000 +0800
@@ -91,6 +91,7 @@ static void parse_waveformatex(AVIOConte
 int ff_get_wav_header(AVFormatContext *s, AVIOContext *pb,
                       AVCodecParameters *par, int size, int big_endian)
 {
+
     int id;
     uint64_t bitrate = 0;
 
@@ -187,12 +188,12 @@ int ff_get_wav_header(AVFormatContext *s
     /* override bits_per_coded_sample for G.726 */
     if (par->codec_id == AV_CODEC_ID_ADPCM_G726 && par->sample_rate)
         par->bits_per_coded_sample = par->bit_rate / par->sample_rate;
-
     return 0;
 }
 
 enum AVCodecID ff_wav_codec_get_id(unsigned int tag, int bps)
 {
+
     enum AVCodecID id;
     id = ff_codec_get_id(ff_codec_wav_tags, tag);
     if (id <= 0)
@@ -206,10 +207,12 @@ enum AVCodecID ff_wav_codec_get_id(unsig
     if (id == AV_CODEC_ID_ADPCM_IMA_WAV && bps == 8)
         id = AV_CODEC_ID_PCM_ZORK;
     return id;
+
 }
 
 int ff_get_bmp_header(AVIOContext *pb, AVStream *st, uint32_t *size)
 {
+
     int tag1;
     uint32_t size_ = avio_rl32(pb);
     if (size)
@@ -225,6 +228,7 @@ int ff_get_bmp_header(AVIOContext *pb, A
     avio_rl32(pb); /* ClrUsed */
     avio_rl32(pb); /* ClrImportant */
     return tag1;
+
 }
 
 int ff_read_riff_info(AVFormatContext *s, int64_t size)
@@ -294,6 +298,5 @@ int ff_read_riff_info(AVFormatContext *s
 
         av_dict_set(&s->metadata, key, value, AV_DICT_DONT_STRDUP_VAL);
     }
-
     return 0;
 }
diff -uparN ffmpeg-3.4.1/libavformat/utils.c ffmpeg-y/libavformat/utils.c
--- ffmpeg-3.4.1/libavformat/utils.c	2017-12-11 05:35:18.000000000 +0800
+++ ffmpeg-y/libavformat/utils.c	2019-02-22 15:07:00.000000000 +0800
@@ -586,10 +586,11 @@ int avformat_open_input(AVFormatContext
         }
     }
 
+#ifdef HISI_NOT_LOW_FLASH
     /* e.g. AVFMT_NOFILE formats will not have a AVIOContext */
     if (s->pb)
         ff_id3v2_read_dict(s->pb, &s->internal->id3v2_meta, ID3v2_DEFAULT_MAGIC, &id3v2_extra_meta);
-
+#endif
 
     if (!(s->flags&AVFMT_FLAG_PRIV_OPT) && s->iformat->read_header)
         if ((ret = s->iformat->read_header(s)) < 0)
@@ -608,6 +609,7 @@ int avformat_open_input(AVFormatContext
             return AVERROR_INVALIDDATA;
     }
 
+#ifdef HISI_NOT_LOW_FLASH
     if (id3v2_extra_meta) {
         if (!strcmp(s->iformat->name, "mp3") || !strcmp(s->iformat->name, "aac") ||
             !strcmp(s->iformat->name, "tta")) {
@@ -619,6 +621,7 @@ int avformat_open_input(AVFormatContext
             av_log(s, AV_LOG_DEBUG, "demuxer does not support additional id3 data, skipping\n");
     }
     ff_id3v2_free_extra_meta(&id3v2_extra_meta);
+#endif
 
     if ((ret = avformat_queue_attached_pictures(s)) < 0)
         goto fail;
@@ -641,7 +644,9 @@ int avformat_open_input(AVFormatContext
     return 0;
 
 fail:
+#ifdef HISI_NOT_LOW_FLASH
     ff_id3v2_free_extra_meta(&id3v2_extra_meta);
+#endif
     av_dict_free(&tmp);
     if (s->pb && !(s->flags & AVFMT_FLAG_CUSTOM_IO))
         avio_closep(&s->pb);
@@ -2717,6 +2722,43 @@ static void estimate_timings_from_bit_ra
                "Estimating duration from bitrate, this may be inaccurate\n");
 }
 
+/*hisi add to fast ts valid size detect begin*/
+#define HISI_PREALLOC_BYTES (20*1024*1024)
+#define HISI_MAX_TRY_TIMESS (10)
+#define HISI_DETECT_TS_SKIP_BYTES (HISI_PREALLOC_BYTES/HISI_MAX_TRY_TIMESS)
+static void hisi_detect_ts_file_end(AVFormatContext *ic, int64_t* pValidOffset, int64_t orgOffset)
+{
+    int64_t filesize;
+    int64_t old_pos;
+    int64_t offset;
+    int retry = 0;
+    int ret = 0;
+    AVPacket pkt1, *pkt = &pkt1;
+
+    filesize = ic->pb ? avio_size(ic->pb) : 0;
+    old_pos = orgOffset;
+
+    av_log(ic, AV_LOG_WARNING, "[%s,%d] the file may have invalid data, trying to detect....\n", __FUNCTION__, __LINE__);
+
+    do {
+        offset = old_pos - (retry*HISI_DETECT_TS_SKIP_BYTES);
+        avio_seek(ic->pb, offset, SEEK_SET);
+        ret = ff_read_packet(ic, pkt);
+        if (ret == 0) {
+            av_free_packet(pkt);
+            *pValidOffset = offset;
+            av_log(ic, AV_LOG_WARNING, "[%s,%d] detect ok, file size:%lld, valid file size:%lld\n",
+                __FUNCTION__, __LINE__, filesize, *pValidOffset);
+            return;
+        }
+        ++retry;
+    } while(retry < HISI_MAX_TRY_TIMESS);
+
+    avio_seek(ic->pb, old_pos, SEEK_SET);
+    av_log(ic, AV_LOG_WARNING, "[%s,%d] detect error\n", __FUNCTION__, __LINE__);
+}
+/*hisi add to fast ts valid size detect end*/
+
 #define DURATION_MAX_READ_SIZE 250000LL
 #define DURATION_MAX_RETRY 6
 
@@ -2812,6 +2854,14 @@ static void estimate_timings_from_pts(AV
                 }
             }
         }
+
+        /*hisi add to fast ts valid size detect begin*/
+        if((!strcmp(ic->iformat->name, "mpegts")) && !is_end && retry > 2)
+        {
+            hisi_detect_ts_file_end(ic, &filesize, offset);
+            filesize += (DURATION_MAX_READ_SIZE << retry);
+        }
+        /*hisi add to fast ts valid size detect end*/
     } while (!is_end &&
              offset &&
              ++retry <= DURATION_MAX_RETRY);
diff -uparN ffmpeg-3.4.1/libavutil/eval.c ffmpeg-y/libavutil/eval.c
--- ffmpeg-3.4.1/libavutil/eval.c	2017-12-11 05:35:11.000000000 +0800
+++ ffmpeg-y/libavutil/eval.c	2019-02-22 15:07:00.000000000 +0800
@@ -172,9 +172,11 @@ static double etime(double v)
 {
     return av_gettime() * 0.000001;
 }
+#ifdef HISI_NOT_LOW_FLASH
 
 static double eval_expr(Parser *p, AVExpr *e)
 {
+
     switch (e->type) {
         case e_value:  return e->value;
         case e_const:  return e->value * p->const_values[e->a.const_index];
@@ -322,7 +324,9 @@ static double eval_expr(Parser *p, AVExp
     return NAN;
 }
 
+
 static int parse_expr(AVExpr **e, Parser *p);
+#endif
 
 void av_expr_free(AVExpr *e)
 {
@@ -336,6 +340,8 @@ void av_expr_free(AVExpr *e)
 
 static int parse_primary(AVExpr **e, Parser *p)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     AVExpr *d = av_mallocz(sizeof(AVExpr));
     char *next = p->s, *s0 = p->s;
     int ret, i;
@@ -488,8 +494,10 @@ static int parse_primary(AVExpr **e, Par
     }
 
     *e = d;
+#endif
     return 0;
 }
+#ifdef HISI_NOT_LOW_FLASH
 
 static AVExpr *make_eval_expr(int type, int value, AVExpr *p0, AVExpr *p1)
 {
@@ -629,9 +637,11 @@ static int parse_expr(AVExpr **e, Parser
     *e = e0;
     return 0;
 }
-
+#endif
 static int verify_expr(AVExpr *e)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     if (!e) return 0;
     switch (e->type) {
         case e_value:
@@ -667,6 +677,9 @@ static int verify_expr(AVExpr *e)
                    verify_expr(e->param[2]);
         default: return verify_expr(e->param[0]) && verify_expr(e->param[1]) && !e->param[2];
     }
+#else
+    return 0;
+#endif
 }
 
 int av_expr_parse(AVExpr **expr, const char *s,
@@ -675,12 +688,14 @@ int av_expr_parse(AVExpr **expr, const c
                   const char * const *func2_names, double (* const *funcs2)(void *, double, double),
                   int log_offset, void *log_ctx)
 {
+    int ret = 0;
+
+#ifdef HISI_NOT_LOW_FLASH
     Parser p = { 0 };
     AVExpr *e = NULL;
     char *w = av_malloc(strlen(s) + 1);
     char *wp = w;
     const char *s0 = s;
-    int ret = 0;
 
     if (!w)
         return AVERROR(ENOMEM);
@@ -721,17 +736,23 @@ int av_expr_parse(AVExpr **expr, const c
 end:
     av_expr_free(e);
     av_free(w);
+#endif
     return ret;
 }
 
 double av_expr_eval(AVExpr *e, const double *const_values, void *opaque)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     Parser p = { 0 };
     p.var= e->var;
 
     p.const_values = const_values;
     p.opaque     = opaque;
     return eval_expr(&p, e);
+#else
+    return NAN;
+#endif
 }
 
 int av_expr_parse_and_eval(double *d, const char *s,
@@ -740,6 +761,8 @@ int av_expr_parse_and_eval(double *d, co
                            const char * const *func2_names, double (* const *funcs2)(void *, double, double),
                            void *opaque, int log_offset, void *log_ctx)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     AVExpr *e = NULL;
     int ret = av_expr_parse(&e, s, const_names, func1_names, funcs1, func2_names, funcs2, log_offset, log_ctx);
 
@@ -750,4 +773,7 @@ int av_expr_parse_and_eval(double *d, co
     *d = av_expr_eval(e, const_values, opaque);
     av_expr_free(e);
     return isnan(*d) ? AVERROR(EINVAL) : 0;
+#else
+    return 0;
+#endif
 }
diff -uparN ffmpeg-3.4.1/libavutil/imgutils.c ffmpeg-y/libavutil/imgutils.c
--- ffmpeg-3.4.1/libavutil/imgutils.c	2017-12-11 05:35:11.000000000 +0800
+++ ffmpeg-y/libavutil/imgutils.c	2019-02-22 15:07:00.000000000 +0800
@@ -111,7 +111,9 @@ int av_image_fill_linesizes(int linesize
 int av_image_fill_pointers(uint8_t *data[4], enum AVPixelFormat pix_fmt, int height,
                            uint8_t *ptr, const int linesizes[4])
 {
+
     int i, total_size, size[4] = { 0 }, has_plane[4] = { 0 };
+#ifdef HISI_NOT_LOW_FLASH
 
     const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(pix_fmt);
     memset(data     , 0, sizeof(data[0])*4);
@@ -145,13 +147,14 @@ int av_image_fill_pointers(uint8_t *data
             return AVERROR(EINVAL);
         total_size += size[i];
     }
-
+#endif
     return total_size;
 }
 
 int avpriv_set_systematic_pal2(uint32_t pal[256], enum AVPixelFormat pix_fmt)
 {
     int i;
+#ifdef HISI_NOT_LOW_FLASH
 
     for (i = 0; i < 256; i++) {
         int r, g, b;
@@ -185,16 +188,18 @@ int avpriv_set_systematic_pal2(uint32_t
         }
         pal[i] = b + (g << 8) + (r << 16) + (0xFFU << 24);
     }
-
+#endif
     return 0;
 }
 
 int av_image_alloc(uint8_t *pointers[4], int linesizes[4],
                    int w, int h, enum AVPixelFormat pix_fmt, int align)
 {
+
     const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(pix_fmt);
     int i, ret;
     uint8_t *buf;
+#ifdef HISI_NOT_LOW_FLASH
 
     if (!desc)
         return AVERROR(EINVAL);
@@ -231,7 +236,7 @@ int av_image_alloc(uint8_t *pointers[4],
         memset(pointers[0] + linesizes[0] * h, 0,
                pointers[1] - pointers[0] - linesizes[0] * h);
     }
-
+#endif
     return ret;
 }
 
@@ -251,6 +256,8 @@ static const AVClass imgutils_class = {
 
 int av_image_check_size2(unsigned int w, unsigned int h, int64_t max_pixels, enum AVPixelFormat pix_fmt, int log_offset, void *log_ctx)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     ImgUtils imgutils = {
         .class      = &imgutils_class,
         .log_offset = log_offset,
@@ -274,7 +281,7 @@ int av_image_check_size2(unsigned int w,
             return AVERROR(EINVAL);
         }
     }
-
+#endif
     return 0;
 }
 
@@ -347,6 +354,8 @@ static void image_copy(uint8_t *dst_data
                        void (*copy_plane)(uint8_t *, ptrdiff_t, const uint8_t *,
                                           ptrdiff_t, ptrdiff_t, int))
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(pix_fmt);
 
     if (!desc || desc->flags & AV_PIX_FMT_FLAG_HWACCEL)
@@ -380,6 +389,7 @@ static void image_copy(uint8_t *dst_data
                        bwidth, h);
         }
     }
+#endif
 }
 
 void av_image_copy(uint8_t *dst_data[4], int dst_linesizes[4],
@@ -410,6 +420,7 @@ int av_image_fill_arrays(uint8_t *dst_da
                          const uint8_t *src, enum AVPixelFormat pix_fmt,
                          int width, int height, int align)
 {
+
     int ret, i;
 
     ret = av_image_check_size(width, height, 0, NULL);
@@ -429,9 +440,12 @@ int av_image_fill_arrays(uint8_t *dst_da
 int av_image_get_buffer_size(enum AVPixelFormat pix_fmt,
                              int width, int height, int align)
 {
+
     uint8_t *data[4];
     int linesize[4];
     int ret;
+    
+#ifdef HISI_NOT_LOW_FLASH
     const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(pix_fmt);
     if (!desc)
         return AVERROR(EINVAL);
@@ -443,7 +457,7 @@ int av_image_get_buffer_size(enum AVPixe
     // do not include palette for these pseudo-paletted formats
     if (desc->flags & AV_PIX_FMT_FLAG_PSEUDOPAL)
         return FFALIGN(width, align) * height;
-
+#endif
     return av_image_fill_arrays(data, linesize, NULL, pix_fmt,
                                 width, height, align);
 }
@@ -454,8 +468,12 @@ int av_image_copy_to_buffer(uint8_t *dst
                             enum AVPixelFormat pix_fmt,
                             int width, int height, int align)
 {
+
     int i, j, nb_planes = 0, linesize[4];
     int size = av_image_get_buffer_size(pix_fmt, width, height, align);
+
+    
+#ifdef HISI_NOT_LOW_FLASH
     const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(pix_fmt);
     int ret;
 
@@ -488,9 +506,10 @@ int av_image_copy_to_buffer(uint8_t *dst
         for (i = 0; i<256; i++)
             AV_WL32(d32 + i, AV_RN32(src_data[1] + 4*i));
     }
-
+#endif
     return size;
 }
+#ifdef HISI_NOT_LOW_FLASH
 
 // Fill dst[0..dst_size] with the bytes in clear[0..clear_size]. The clear
 // bytes are repeated until dst_size is reached. If dst_size is unaligned (i.e.
@@ -542,7 +561,7 @@ static void memset_bytes(uint8_t *dst, s
     for (; dst_size; dst_size--)
         *dst++ = clear[pos++ % clear_size];
 }
-
+#endif
 // Maximum size in bytes of a plane element (usually a pixel, or multiple pixels
 // if it's a subsampled packed format).
 #define MAX_BLOCK_SIZE 32
@@ -551,6 +570,7 @@ int av_image_fill_black(uint8_t *dst_dat
                         enum AVPixelFormat pix_fmt, enum AVColorRange range,
                         int width, int height)
 {
+#ifdef HISI_NOT_LOW_FLASH
     const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(pix_fmt);
     int nb_planes = av_pix_fmt_count_planes(pix_fmt);
     // A pixel or a group of pixels on each plane, with a value that represents black.
@@ -655,6 +675,6 @@ int av_image_fill_black(uint8_t *dst_dat
             data += dst_linesize[plane];
         }
     }
-
+#endif
     return 0;
 }
diff -uparN ffmpeg-3.4.1/libavutil/Makefile ffmpeg-y/libavutil/Makefile
--- ffmpeg-3.4.1/libavutil/Makefile	2017-12-11 05:35:11.000000000 +0800
+++ ffmpeg-y/libavutil/Makefile	2019-02-22 15:07:00.000000000 +0800
@@ -95,11 +95,8 @@ OBJS = adler32.o
        audio_fifo.o                                                     \
        avstring.o                                                       \
        base64.o                                                         \
-       blowfish.o                                                       \
        bprint.o                                                         \
        buffer.o                                                         \
-       cast5.o                                                          \
-       camellia.o                                                       \
        channel_layout.o                                                 \
        color_utils.o                                                    \
        cpu.o                                                            \
@@ -116,9 +113,6 @@ OBJS = adler32.o
        float_dsp.o                                                      \
        fixed_dsp.o                                                      \
        frame.o                                                          \
-       hash.o                                                           \
-       hmac.o                                                           \
-       hwcontext.o                                                      \
        imgutils.o                                                       \
        integer.o                                                        \
        intmath.o                                                        \
@@ -139,10 +133,8 @@ OBJS = adler32.o
        rational.o                                                       \
        reverse.o                                                        \
        rc4.o                                                            \
-       ripemd.o                                                         \
        samplefmt.o                                                      \
        sha.o                                                            \
-       sha512.o                                                         \
        slicethread.o                                                    \
        spherical.o                                                      \
        stereo3d.o                                                       \
@@ -150,11 +142,9 @@ OBJS = adler32.o
        time.o                                                           \
        timecode.o                                                       \
        tree.o                                                           \
-       twofish.o                                                        \
        utils.o                                                          \
-       xga_font_data.o                                                  \
-       xtea.o                                                           \
-       tea.o                                                            \
+#       xtea.o                                                           \
+#       tea.o                                                            \
 
 OBJS-$(!HAVE_ATOMICS_NATIVE)            += atomic.o                     \
 
diff -uparN ffmpeg-3.4.1/libavutil/opt.c ffmpeg-y/libavutil/opt.c
--- ffmpeg-3.4.1/libavutil/opt.c	2017-12-11 05:35:11.000000000 +0800
+++ ffmpeg-y/libavutil/opt.c	2019-02-22 15:07:00.000000000 +0800
@@ -341,6 +341,7 @@ static int set_string_video_rate(void *o
     return ret;
 }
 
+#ifdef HISI_NOT_LOW_FLASH
 static int set_string_color(void *obj, const AVOption *o, const char *val, uint8_t *dst)
 {
     int ret;
@@ -355,6 +356,7 @@ static int set_string_color(void *obj, c
     }
     return 0;
 }
+#endif
 
 static const char *get_bool_name(int val)
 {
@@ -502,8 +504,10 @@ int av_opt_set(void *obj, const char *na
             return ret;
         }
         break;
+#ifdef HISI_NOT_LOW_FLASH
     case AV_OPT_TYPE_COLOR:
         return set_string_color(obj, o, val, dst);
+#endif
     case AV_OPT_TYPE_CHANNEL_LAYOUT:
         if (!val || !strcmp(val, "none")) {
             *(int64_t *)dst = 0;
@@ -1333,9 +1337,11 @@ void av_opt_set_defaults2(void *s, int m
                 write_number(s, opt, dst, 1, val.den, val.num);
             }
             break;
+#ifdef HISI_NOT_LOW_FLASH
             case AV_OPT_TYPE_COLOR:
                 set_string_color(s, opt, opt->default_val.str, dst);
                 break;
+#endif
             case AV_OPT_TYPE_STRING:
                 set_string(s, opt, opt->default_val.str, dst);
                 break;
@@ -1868,6 +1874,7 @@ void av_opt_freep_ranges(AVOptionRanges
     av_freep(rangesp);
 }
 
+#ifdef HISI_NOT_LOW_FLASH
 int av_opt_is_set_to_default(void *obj, const AVOption *o)
 {
     int64_t i64;
@@ -2023,3 +2030,4 @@ int av_opt_serialize(void *obj, int opt_
     av_bprint_finalize(&bprint, buffer);
     return 0;
 }
+#endif
diff -uparN ffmpeg-3.4.1/libavutil/parseutils.c ffmpeg-y/libavutil/parseutils.c
--- ffmpeg-3.4.1/libavutil/parseutils.c	2017-12-11 05:35:11.000000000 +0800
+++ ffmpeg-y/libavutil/parseutils.c	2019-02-22 15:07:00.000000000 +0800
@@ -201,6 +201,7 @@ typedef struct ColorEntry {
     uint8_t     rgb_color[3];    ///< RGB values for the color
 } ColorEntry;
 
+#ifdef HISI_NOT_LOW_FLASH
 static const ColorEntry color_table[] = {
     { "AliceBlue",            { 0xF0, 0xF8, 0xFF } },
     { "AntiqueWhite",         { 0xFA, 0xEB, 0xD7 } },
@@ -444,7 +445,7 @@ const char *av_get_known_color_name(int
 
     return color->name;
 }
-
+#endif
 /* get a positive number between n_min and n_max, for a maximum length
    of len_max. Return -1 if error. */
 static int date_get_num(const char **pp,
diff -uparN ffmpeg-3.4.1/libavutil/pixdesc.c ffmpeg-y/libavutil/pixdesc.c
--- ffmpeg-3.4.1/libavutil/pixdesc.c	2017-12-11 05:35:11.000000000 +0800
+++ ffmpeg-y/libavutil/pixdesc.c	2019-02-22 15:07:00.000000000 +0800
@@ -37,2221 +37,132 @@ void av_read_image_line(uint16_t *dst,
                         int x, int y, int c, int w,
                         int read_pal_component)
 {
-    AVComponentDescriptor comp = desc->comp[c];
-    int plane = comp.plane;
-    int depth = comp.depth;
-    int mask  = (1 << depth) - 1;
-    int shift = comp.shift;
-    int step  = comp.step;
-    int flags = desc->flags;
-
-    if (flags & AV_PIX_FMT_FLAG_BITSTREAM) {
-        int skip = x * step + comp.offset;
-        const uint8_t *p = data[plane] + y * linesize[plane] + (skip >> 3);
-        int shift = 8 - depth - (skip & 7);
-
-        while (w--) {
-            int val = (*p >> shift) & mask;
-            if (read_pal_component)
-                val = data[1][4*val + c];
-            shift -= step;
-            p -= shift >> 3;
-            shift &= 7;
-            *dst++ = val;
-        }
-    } else {
-        const uint8_t *p = data[plane] + y * linesize[plane] +
-                           x * step + comp.offset;
-        int is_8bit = shift + depth <= 8;
-
-        if (is_8bit)
-            p += !!(flags & AV_PIX_FMT_FLAG_BE);
-
-        while (w--) {
-            int val = is_8bit ? *p :
-                flags & AV_PIX_FMT_FLAG_BE ? AV_RB16(p) : AV_RL16(p);
-            val = (val >> shift) & mask;
-            if (read_pal_component)
-                val = data[1][4 * val + c];
-            p += step;
-            *dst++ = val;
-        }
-    }
-}
-
-void av_write_image_line(const uint16_t *src,
-                         uint8_t *data[4], const int linesize[4],
-                         const AVPixFmtDescriptor *desc,
-                         int x, int y, int c, int w)
-{
-    AVComponentDescriptor comp = desc->comp[c];
-    int plane = comp.plane;
-    int depth = comp.depth;
-    int step  = comp.step;
-    int flags = desc->flags;
-
-    if (flags & AV_PIX_FMT_FLAG_BITSTREAM) {
-        int skip = x * step + comp.offset;
-        uint8_t *p = data[plane] + y * linesize[plane] + (skip >> 3);
-        int shift = 8 - depth - (skip & 7);
-
-        while (w--) {
-            *p |= *src++ << shift;
-            shift -= step;
-            p -= shift >> 3;
-            shift &= 7;
-        }
-    } else {
-        int shift = comp.shift;
-        uint8_t *p = data[plane] + y * linesize[plane] +
-                     x * step + comp.offset;
-
-        if (shift + depth <= 8) {
-            p += !!(flags & AV_PIX_FMT_FLAG_BE);
-            while (w--) {
-                *p |= (*src++ << shift);
-                p += step;
-            }
-        } else {
-            while (w--) {
-                if (flags & AV_PIX_FMT_FLAG_BE) {
-                    uint16_t val = AV_RB16(p) | (*src++ << shift);
-                    AV_WB16(p, val);
-                } else {
-                    uint16_t val = AV_RL16(p) | (*src++ << shift);
-                    AV_WL16(p, val);
-                }
-                p += step;
-            }
-        }
-    }
-}
-
-#if FF_API_PLUS1_MINUS1
-FF_DISABLE_DEPRECATION_WARNINGS
-#endif
-static const AVPixFmtDescriptor av_pix_fmt_descriptors[AV_PIX_FMT_NB] = {
-    [AV_PIX_FMT_YUV420P] = {
-        .name = "yuv420p",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
-            { 1, 1, 0, 0, 8, 0, 7, 1 },        /* U */
-            { 2, 1, 0, 0, 8, 0, 7, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUYV422] = {
-        .name = "yuyv422",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 8, 1, 7, 1 },        /* Y */
-            { 0, 4, 1, 0, 8, 3, 7, 2 },        /* U */
-            { 0, 4, 3, 0, 8, 3, 7, 4 },        /* V */
-        },
-    },
-    [AV_PIX_FMT_YVYU422] = {
-        .name = "yvyu422",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 8, 1, 7, 1 },        /* Y */
-            { 0, 4, 3, 0, 8, 3, 7, 4 },        /* U */
-            { 0, 4, 1, 0, 8, 3, 7, 2 },        /* V */
-        },
-    },
-    [AV_PIX_FMT_RGB24] = {
-        .name = "rgb24",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 3, 0, 0, 8, 2, 7, 1 },        /* R */
-            { 0, 3, 1, 0, 8, 2, 7, 2 },        /* G */
-            { 0, 3, 2, 0, 8, 2, 7, 3 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_BGR24] = {
-        .name = "bgr24",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 3, 2, 0, 8, 2, 7, 3 },        /* R */
-            { 0, 3, 1, 0, 8, 2, 7, 2 },        /* G */
-            { 0, 3, 0, 0, 8, 2, 7, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_YUV422P] = {
-        .name = "yuv422p",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
-            { 1, 1, 0, 0, 8, 0, 7, 1 },        /* U */
-            { 2, 1, 0, 0, 8, 0, 7, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV444P] = {
-        .name = "yuv444p",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
-            { 1, 1, 0, 0, 8, 0, 7, 1 },        /* U */
-            { 2, 1, 0, 0, 8, 0, 7, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV410P] = {
-        .name = "yuv410p",
-        .nb_components = 3,
-        .log2_chroma_w = 2,
-        .log2_chroma_h = 2,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
-            { 1, 1, 0, 0, 8, 0, 7, 1 },        /* U */
-            { 2, 1, 0, 0, 8, 0, 7, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV411P] = {
-        .name = "yuv411p",
-        .nb_components = 3,
-        .log2_chroma_w = 2,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
-            { 1, 1, 0, 0, 8, 0, 7, 1 },        /* U */
-            { 2, 1, 0, 0, 8, 0, 7, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUVJ411P] = {
-        .name = "yuvj411p",
-        .nb_components = 3,
-        .log2_chroma_w = 2,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
-            { 1, 1, 0, 0, 8, 0, 7, 1 },        /* U */
-            { 2, 1, 0, 0, 8, 0, 7, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_GRAY8] = {
-        .name = "gray",
-        .nb_components = 1,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
-        },
-        .flags = AV_PIX_FMT_FLAG_PSEUDOPAL,
-        .alias = "gray8,y8",
-    },
-    [AV_PIX_FMT_MONOWHITE] = {
-        .name = "monow",
-        .nb_components = 1,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 1, 0, 0, 1, 0, 0, 1 },        /* Y */
-        },
-        .flags = AV_PIX_FMT_FLAG_BITSTREAM,
-    },
-    [AV_PIX_FMT_MONOBLACK] = {
-        .name = "monob",
-        .nb_components = 1,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 1, 0, 7, 1, 0, 0, 1 },        /* Y */
-        },
-        .flags = AV_PIX_FMT_FLAG_BITSTREAM,
-    },
-    [AV_PIX_FMT_PAL8] = {
-        .name = "pal8",
-        .nb_components = 1,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },
-        },
-        .flags = AV_PIX_FMT_FLAG_PAL,
-    },
-    [AV_PIX_FMT_YUVJ420P] = {
-        .name = "yuvj420p",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
-            { 1, 1, 0, 0, 8, 0, 7, 1 },        /* U */
-            { 2, 1, 0, 0, 8, 0, 7, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUVJ422P] = {
-        .name = "yuvj422p",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
-            { 1, 1, 0, 0, 8, 0, 7, 1 },        /* U */
-            { 2, 1, 0, 0, 8, 0, 7, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUVJ444P] = {
-        .name = "yuvj444p",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
-            { 1, 1, 0, 0, 8, 0, 7, 1 },        /* U */
-            { 2, 1, 0, 0, 8, 0, 7, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-#if FF_API_XVMC
-    [AV_PIX_FMT_XVMC_MPEG2_MC] = {
-        .name = "xvmcmc",
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_XVMC_MPEG2_IDCT] = {
-        .name = "xvmcidct",
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-#endif /* FF_API_XVMC */
-#if !FF_API_XVMC
-    [AV_PIX_FMT_XVMC] = {
-        .name = "xvmc",
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-#endif /* !FF_API_XVMC */
-    [AV_PIX_FMT_UYVY422] = {
-        .name = "uyvy422",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 1, 0, 8, 1, 7, 2 },        /* Y */
-            { 0, 4, 0, 0, 8, 3, 7, 1 },        /* U */
-            { 0, 4, 2, 0, 8, 3, 7, 3 },        /* V */
-        },
-    },
-    [AV_PIX_FMT_UYYVYY411] = {
-        .name = "uyyvyy411",
-        .nb_components = 3,
-        .log2_chroma_w = 2,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 4, 1, 0, 8, 3, 7, 2 },        /* Y */
-            { 0, 6, 0, 0, 8, 5, 7, 1 },        /* U */
-            { 0, 6, 3, 0, 8, 5, 7, 4 },        /* V */
-        },
-    },
-    [AV_PIX_FMT_BGR8] = {
-        .name = "bgr8",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 1, 0, 0, 3, 0, 2, 1 },        /* R */
-            { 0, 1, 0, 3, 3, 0, 2, 1 },        /* G */
-            { 0, 1, 0, 6, 2, 0, 1, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_PSEUDOPAL,
-    },
-    [AV_PIX_FMT_BGR4] = {
-        .name = "bgr4",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 4, 3, 0, 1, 3, 0, 4 },        /* R */
-            { 0, 4, 1, 0, 2, 3, 1, 2 },        /* G */
-            { 0, 4, 0, 0, 1, 3, 0, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_BITSTREAM | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_BGR4_BYTE] = {
-        .name = "bgr4_byte",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 1, 0, 0, 1, 0, 0, 1 },        /* R */
-            { 0, 1, 0, 1, 2, 0, 1, 1 },        /* G */
-            { 0, 1, 0, 3, 1, 0, 0, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_PSEUDOPAL,
-    },
-    [AV_PIX_FMT_RGB8] = {
-        .name = "rgb8",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 1, 0, 6, 2, 0, 1, 1 },        /* R */
-            { 0, 1, 0, 3, 3, 0, 2, 1 },        /* G */
-            { 0, 1, 0, 0, 3, 0, 2, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_PSEUDOPAL,
-    },
-    [AV_PIX_FMT_RGB4] = {
-        .name = "rgb4",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 4, 0, 0, 1, 3, 0, 1 },        /* R */
-            { 0, 4, 1, 0, 2, 3, 1, 2 },        /* G */
-            { 0, 4, 3, 0, 1, 3, 0, 4 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_BITSTREAM | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_RGB4_BYTE] = {
-        .name = "rgb4_byte",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 1, 0, 3, 1, 0, 0, 1 },        /* R */
-            { 0, 1, 0, 1, 2, 0, 1, 1 },        /* G */
-            { 0, 1, 0, 0, 1, 0, 0, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_PSEUDOPAL,
-    },
-    [AV_PIX_FMT_NV12] = {
-        .name = "nv12",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
-            { 1, 2, 0, 0, 8, 1, 7, 1 },        /* U */
-            { 1, 2, 1, 0, 8, 1, 7, 2 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_NV21] = {
-        .name = "nv21",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
-            { 1, 2, 1, 0, 8, 1, 7, 2 },        /* U */
-            { 1, 2, 0, 0, 8, 1, 7, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_ARGB] = {
-        .name = "argb",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 4, 1, 0, 8, 3, 7, 2 },        /* R */
-            { 0, 4, 2, 0, 8, 3, 7, 3 },        /* G */
-            { 0, 4, 3, 0, 8, 3, 7, 4 },        /* B */
-            { 0, 4, 0, 0, 8, 3, 7, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_RGBA] = {
-        .name = "rgba",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 4, 0, 0, 8, 3, 7, 1 },        /* R */
-            { 0, 4, 1, 0, 8, 3, 7, 2 },        /* G */
-            { 0, 4, 2, 0, 8, 3, 7, 3 },        /* B */
-            { 0, 4, 3, 0, 8, 3, 7, 4 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_ABGR] = {
-        .name = "abgr",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 4, 3, 0, 8, 3, 7, 4 },        /* R */
-            { 0, 4, 2, 0, 8, 3, 7, 3 },        /* G */
-            { 0, 4, 1, 0, 8, 3, 7, 2 },        /* B */
-            { 0, 4, 0, 0, 8, 3, 7, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_BGRA] = {
-        .name = "bgra",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 4, 2, 0, 8, 3, 7, 3 },        /* R */
-            { 0, 4, 1, 0, 8, 3, 7, 2 },        /* G */
-            { 0, 4, 0, 0, 8, 3, 7, 1 },        /* B */
-            { 0, 4, 3, 0, 8, 3, 7, 4 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_0RGB] = {
-        .name = "0rgb",
-        .nb_components= 3,
-        .log2_chroma_w= 0,
-        .log2_chroma_h= 0,
-        .comp = {
-            { 0, 4, 1, 0, 8, 3, 7, 2 },        /* R */
-            { 0, 4, 2, 0, 8, 3, 7, 3 },        /* G */
-            { 0, 4, 3, 0, 8, 3, 7, 4 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_RGB0] = {
-        .name = "rgb0",
-        .nb_components= 3,
-        .log2_chroma_w= 0,
-        .log2_chroma_h= 0,
-        .comp = {
-            { 0, 4, 0, 0, 8, 3, 7, 1 },        /* R */
-            { 0, 4, 1, 0, 8, 3, 7, 2 },        /* G */
-            { 0, 4, 2, 0, 8, 3, 7, 3 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_0BGR] = {
-        .name = "0bgr",
-        .nb_components= 3,
-        .log2_chroma_w= 0,
-        .log2_chroma_h= 0,
-        .comp = {
-            { 0, 4, 3, 0, 8, 3, 7, 4 },        /* R */
-            { 0, 4, 2, 0, 8, 3, 7, 3 },        /* G */
-            { 0, 4, 1, 0, 8, 3, 7, 2 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_BGR0] = {
-        .name = "bgr0",
-        .nb_components= 3,
-        .log2_chroma_w= 0,
-        .log2_chroma_h= 0,
-        .comp = {
-            { 0, 4, 2, 0, 8, 3, 7, 3 },        /* R */
-            { 0, 4, 1, 0, 8, 3, 7, 2 },        /* G */
-            { 0, 4, 0, 0, 8, 3, 7, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_GRAY9BE] = {
-        .name = "gray9be",
-        .nb_components = 1,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 9, 1, 8, 1 },       /* Y */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE,
-        .alias = "y9be",
-    },
-    [AV_PIX_FMT_GRAY9LE] = {
-        .name = "gray9le",
-        .nb_components = 1,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 9, 1, 8, 1 },       /* Y */
-        },
-        .alias = "y9le",
-    },
-    [AV_PIX_FMT_GRAY10BE] = {
-        .name = "gray10be",
-        .nb_components = 1,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 10, 1, 9, 1 },       /* Y */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE,
-        .alias = "y10be",
-    },
-    [AV_PIX_FMT_GRAY10LE] = {
-        .name = "gray10le",
-        .nb_components = 1,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 10, 1, 9, 1 },       /* Y */
-        },
-        .alias = "y10le",
-    },
-    [AV_PIX_FMT_GRAY12BE] = {
-        .name = "gray12be",
-        .nb_components = 1,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 12, 1, 11, 1 },       /* Y */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE,
-        .alias = "y12be",
-    },
-    [AV_PIX_FMT_GRAY12LE] = {
-        .name = "gray12le",
-        .nb_components = 1,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 12, 1, 11, 1 },       /* Y */
-        },
-        .alias = "y12le",
-    },
-    [AV_PIX_FMT_GRAY16BE] = {
-        .name = "gray16be",
-        .nb_components = 1,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 16, 1, 15, 1 },       /* Y */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE,
-        .alias = "y16be",
-    },
-    [AV_PIX_FMT_GRAY16LE] = {
-        .name = "gray16le",
-        .nb_components = 1,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 16, 1, 15, 1 },       /* Y */
-        },
-        .alias = "y16le",
-    },
-    [AV_PIX_FMT_YUV440P] = {
-        .name = "yuv440p",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
-            { 1, 1, 0, 0, 8, 0, 7, 1 },        /* U */
-            { 2, 1, 0, 0, 8, 0, 7, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUVJ440P] = {
-        .name = "yuvj440p",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
-            { 1, 1, 0, 0, 8, 0, 7, 1 },        /* U */
-            { 2, 1, 0, 0, 8, 0, 7, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV440P10LE] = {
-        .name = "yuv440p10le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 10, 1, 9, 1 },        /* Y */
-            { 1, 2, 0, 0, 10, 1, 9, 1 },        /* U */
-            { 2, 2, 0, 0, 10, 1, 9, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV440P10BE] = {
-        .name = "yuv440p10be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 10, 1, 9, 1 },        /* Y */
-            { 1, 2, 0, 0, 10, 1, 9, 1 },        /* U */
-            { 2, 2, 0, 0, 10, 1, 9, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV440P12LE] = {
-        .name = "yuv440p12le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 12, 1, 11, 1 },        /* Y */
-            { 1, 2, 0, 0, 12, 1, 11, 1 },        /* U */
-            { 2, 2, 0, 0, 12, 1, 11, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV440P12BE] = {
-        .name = "yuv440p12be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 12, 1, 11, 1 },        /* Y */
-            { 1, 2, 0, 0, 12, 1, 11, 1 },        /* U */
-            { 2, 2, 0, 0, 12, 1, 11, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUVA420P] = {
-        .name = "yuva420p",
-        .nb_components = 4,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
-            { 1, 1, 0, 0, 8, 0, 7, 1 },        /* U */
-            { 2, 1, 0, 0, 8, 0, 7, 1 },        /* V */
-            { 3, 1, 0, 0, 8, 0, 7, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA422P] = {
-        .name = "yuva422p",
-        .nb_components = 4,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
-            { 1, 1, 0, 0, 8, 0, 7, 1 },        /* U */
-            { 2, 1, 0, 0, 8, 0, 7, 1 },        /* V */
-            { 3, 1, 0, 0, 8, 0, 7, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA444P] = {
-        .name = "yuva444p",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
-            { 1, 1, 0, 0, 8, 0, 7, 1 },        /* U */
-            { 2, 1, 0, 0, 8, 0, 7, 1 },        /* V */
-            { 3, 1, 0, 0, 8, 0, 7, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA420P9BE] = {
-        .name = "yuva420p9be",
-        .nb_components = 4,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 9, 1, 8, 1 },        /* Y */
-            { 1, 2, 0, 0, 9, 1, 8, 1 },        /* U */
-            { 2, 2, 0, 0, 9, 1, 8, 1 },        /* V */
-            { 3, 2, 0, 0, 9, 1, 8, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA420P9LE] = {
-        .name = "yuva420p9le",
-        .nb_components = 4,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 9, 1, 8, 1 },        /* Y */
-            { 1, 2, 0, 0, 9, 1, 8, 1 },        /* U */
-            { 2, 2, 0, 0, 9, 1, 8, 1 },        /* V */
-            { 3, 2, 0, 0, 9, 1, 8, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA422P9BE] = {
-        .name = "yuva422p9be",
-        .nb_components = 4,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 9, 1, 8, 1 },        /* Y */
-            { 1, 2, 0, 0, 9, 1, 8, 1 },        /* U */
-            { 2, 2, 0, 0, 9, 1, 8, 1 },        /* V */
-            { 3, 2, 0, 0, 9, 1, 8, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA422P9LE] = {
-        .name = "yuva422p9le",
-        .nb_components = 4,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 9, 1, 8, 1 },        /* Y */
-            { 1, 2, 0, 0, 9, 1, 8, 1 },        /* U */
-            { 2, 2, 0, 0, 9, 1, 8, 1 },        /* V */
-            { 3, 2, 0, 0, 9, 1, 8, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA444P9BE] = {
-        .name = "yuva444p9be",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 9, 1, 8, 1 },        /* Y */
-            { 1, 2, 0, 0, 9, 1, 8, 1 },        /* U */
-            { 2, 2, 0, 0, 9, 1, 8, 1 },        /* V */
-            { 3, 2, 0, 0, 9, 1, 8, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA444P9LE] = {
-        .name = "yuva444p9le",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 9, 1, 8, 1 },        /* Y */
-            { 1, 2, 0, 0, 9, 1, 8, 1 },        /* U */
-            { 2, 2, 0, 0, 9, 1, 8, 1 },        /* V */
-            { 3, 2, 0, 0, 9, 1, 8, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA420P10BE] = {
-        .name = "yuva420p10be",
-        .nb_components = 4,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 10, 1, 9, 1 },        /* Y */
-            { 1, 2, 0, 0, 10, 1, 9, 1 },        /* U */
-            { 2, 2, 0, 0, 10, 1, 9, 1 },        /* V */
-            { 3, 2, 0, 0, 10, 1, 9, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA420P10LE] = {
-        .name = "yuva420p10le",
-        .nb_components = 4,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 10, 1, 9, 1 },        /* Y */
-            { 1, 2, 0, 0, 10, 1, 9, 1 },        /* U */
-            { 2, 2, 0, 0, 10, 1, 9, 1 },        /* V */
-            { 3, 2, 0, 0, 10, 1, 9, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA422P10BE] = {
-        .name = "yuva422p10be",
-        .nb_components = 4,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 10, 1, 9, 1 },        /* Y */
-            { 1, 2, 0, 0, 10, 1, 9, 1 },        /* U */
-            { 2, 2, 0, 0, 10, 1, 9, 1 },        /* V */
-            { 3, 2, 0, 0, 10, 1, 9, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA422P10LE] = {
-        .name = "yuva422p10le",
-        .nb_components = 4,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 10, 1, 9, 1 },        /* Y */
-            { 1, 2, 0, 0, 10, 1, 9, 1 },        /* U */
-            { 2, 2, 0, 0, 10, 1, 9, 1 },        /* V */
-            { 3, 2, 0, 0, 10, 1, 9, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA444P10BE] = {
-        .name = "yuva444p10be",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 10, 1, 9, 1 },        /* Y */
-            { 1, 2, 0, 0, 10, 1, 9, 1 },        /* U */
-            { 2, 2, 0, 0, 10, 1, 9, 1 },        /* V */
-            { 3, 2, 0, 0, 10, 1, 9, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA444P10LE] = {
-        .name = "yuva444p10le",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 10, 1, 9, 1 },        /* Y */
-            { 1, 2, 0, 0, 10, 1, 9, 1 },        /* U */
-            { 2, 2, 0, 0, 10, 1, 9, 1 },        /* V */
-            { 3, 2, 0, 0, 10, 1, 9, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA420P16BE] = {
-        .name = "yuva420p16be",
-        .nb_components = 4,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 16, 1, 15, 1 },        /* Y */
-            { 1, 2, 0, 0, 16, 1, 15, 1 },        /* U */
-            { 2, 2, 0, 0, 16, 1, 15, 1 },        /* V */
-            { 3, 2, 0, 0, 16, 1, 15, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA420P16LE] = {
-        .name = "yuva420p16le",
-        .nb_components = 4,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 16, 1, 15, 1 },        /* Y */
-            { 1, 2, 0, 0, 16, 1, 15, 1 },        /* U */
-            { 2, 2, 0, 0, 16, 1, 15, 1 },        /* V */
-            { 3, 2, 0, 0, 16, 1, 15, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA422P16BE] = {
-        .name = "yuva422p16be",
-        .nb_components = 4,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 16, 1, 15, 1 },        /* Y */
-            { 1, 2, 0, 0, 16, 1, 15, 1 },        /* U */
-            { 2, 2, 0, 0, 16, 1, 15, 1 },        /* V */
-            { 3, 2, 0, 0, 16, 1, 15, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA422P16LE] = {
-        .name = "yuva422p16le",
-        .nb_components = 4,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 16, 1, 15, 1 },        /* Y */
-            { 1, 2, 0, 0, 16, 1, 15, 1 },        /* U */
-            { 2, 2, 0, 0, 16, 1, 15, 1 },        /* V */
-            { 3, 2, 0, 0, 16, 1, 15, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA444P16BE] = {
-        .name = "yuva444p16be",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 16, 1, 15, 1 },        /* Y */
-            { 1, 2, 0, 0, 16, 1, 15, 1 },        /* U */
-            { 2, 2, 0, 0, 16, 1, 15, 1 },        /* V */
-            { 3, 2, 0, 0, 16, 1, 15, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YUVA444P16LE] = {
-        .name = "yuva444p16le",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 16, 1, 15, 1 },        /* Y */
-            { 1, 2, 0, 0, 16, 1, 15, 1 },        /* U */
-            { 2, 2, 0, 0, 16, 1, 15, 1 },        /* V */
-            { 3, 2, 0, 0, 16, 1, 15, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA,
-    },
-#if FF_API_VDPAU
-    [AV_PIX_FMT_VDPAU_H264] = {
-        .name = "vdpau_h264",
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_VDPAU_MPEG1] = {
-        .name = "vdpau_mpeg1",
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_VDPAU_MPEG2] = {
-        .name = "vdpau_mpeg2",
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_VDPAU_WMV3] = {
-        .name = "vdpau_wmv3",
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_VDPAU_VC1] = {
-        .name = "vdpau_vc1",
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_VDPAU_MPEG4] = {
-        .name = "vdpau_mpeg4",
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-#endif
-    [AV_PIX_FMT_RGB48BE] = {
-        .name = "rgb48be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 6, 0, 0, 16, 5, 15, 1 },       /* R */
-            { 0, 6, 2, 0, 16, 5, 15, 3 },       /* G */
-            { 0, 6, 4, 0, 16, 5, 15, 5 },       /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_BE,
-    },
-    [AV_PIX_FMT_RGB48LE] = {
-        .name = "rgb48le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 6, 0, 0, 16, 5, 15, 1 },       /* R */
-            { 0, 6, 2, 0, 16, 5, 15, 3 },       /* G */
-            { 0, 6, 4, 0, 16, 5, 15, 5 },       /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_RGBA64BE] = {
-        .name = "rgba64be",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 8, 0, 0, 16, 7, 15, 1 },       /* R */
-            { 0, 8, 2, 0, 16, 7, 15, 3 },       /* G */
-            { 0, 8, 4, 0, 16, 7, 15, 5 },       /* B */
-            { 0, 8, 6, 0, 16, 7, 15, 7 },       /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_RGBA64LE] = {
-        .name = "rgba64le",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 8, 0, 0, 16, 7, 15, 1 },       /* R */
-            { 0, 8, 2, 0, 16, 7, 15, 3 },       /* G */
-            { 0, 8, 4, 0, 16, 7, 15, 5 },       /* B */
-            { 0, 8, 6, 0, 16, 7, 15, 7 },       /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_RGB565BE] = {
-        .name = "rgb565be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, -1, 3, 5, 1, 4, 0 },        /* R */
-            { 0, 2,  0, 5, 6, 1, 5, 1 },        /* G */
-            { 0, 2,  0, 0, 5, 1, 4, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_RGB565LE] = {
-        .name = "rgb565le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 1, 3, 5, 1, 4, 2 },        /* R */
-            { 0, 2, 0, 5, 6, 1, 5, 1 },        /* G */
-            { 0, 2, 0, 0, 5, 1, 4, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_RGB555BE] = {
-        .name = "rgb555be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, -1, 2, 5, 1, 4, 0 },        /* R */
-            { 0, 2,  0, 5, 5, 1, 4, 1 },        /* G */
-            { 0, 2,  0, 0, 5, 1, 4, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_RGB555LE] = {
-        .name = "rgb555le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 1, 2, 5, 1, 4, 2 },        /* R */
-            { 0, 2, 0, 5, 5, 1, 4, 1 },        /* G */
-            { 0, 2, 0, 0, 5, 1, 4, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_RGB444BE] = {
-        .name = "rgb444be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, -1, 0, 4, 1, 3, 0 },        /* R */
-            { 0, 2,  0, 4, 4, 1, 3, 1 },        /* G */
-            { 0, 2,  0, 0, 4, 1, 3, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_RGB444LE] = {
-        .name = "rgb444le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 1, 0, 4, 1, 3, 2 },        /* R */
-            { 0, 2, 0, 4, 4, 1, 3, 1 },        /* G */
-            { 0, 2, 0, 0, 4, 1, 3, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_BGR48BE] = {
-        .name = "bgr48be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 6, 4, 0, 16, 5, 15, 5 },       /* R */
-            { 0, 6, 2, 0, 16, 5, 15, 3 },       /* G */
-            { 0, 6, 0, 0, 16, 5, 15, 1 },       /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_BGR48LE] = {
-        .name = "bgr48le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 6, 4, 0, 16, 5, 15, 5 },       /* R */
-            { 0, 6, 2, 0, 16, 5, 15, 3 },       /* G */
-            { 0, 6, 0, 0, 16, 5, 15, 1 },       /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_BGRA64BE] = {
-        .name = "bgra64be",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 8, 4, 0, 16, 7, 15, 5 },       /* R */
-            { 0, 8, 2, 0, 16, 7, 15, 3 },       /* G */
-            { 0, 8, 0, 0, 16, 7, 15, 1 },       /* B */
-            { 0, 8, 6, 0, 16, 7, 15, 7 },       /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_BGRA64LE] = {
-        .name = "bgra64le",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 8, 4, 0, 16, 7, 15, 5 },       /* R */
-            { 0, 8, 2, 0, 16, 7, 15, 3 },       /* G */
-            { 0, 8, 0, 0, 16, 7, 15, 1 },       /* B */
-            { 0, 8, 6, 0, 16, 7, 15, 7 },       /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_BGR565BE] = {
-        .name = "bgr565be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2,  0, 0, 5, 1, 4, 1 },        /* R */
-            { 0, 2,  0, 5, 6, 1, 5, 1 },        /* G */
-            { 0, 2, -1, 3, 5, 1, 4, 0 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_BGR565LE] = {
-        .name = "bgr565le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 5, 1, 4, 1 },        /* R */
-            { 0, 2, 0, 5, 6, 1, 5, 1 },        /* G */
-            { 0, 2, 1, 3, 5, 1, 4, 2 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_BGR555BE] = {
-        .name = "bgr555be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2,  0, 0, 5, 1, 4, 1 },       /* R */
-            { 0, 2,  0, 5, 5, 1, 4, 1 },       /* G */
-            { 0, 2, -1, 2, 5, 1, 4, 0 },       /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_RGB,
-     },
-    [AV_PIX_FMT_BGR555LE] = {
-        .name = "bgr555le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 5, 1, 4, 1 },        /* R */
-            { 0, 2, 0, 5, 5, 1, 4, 1 },        /* G */
-            { 0, 2, 1, 2, 5, 1, 4, 2 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_BGR444BE] = {
-        .name = "bgr444be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2,  0, 0, 4, 1, 3, 1 },       /* R */
-            { 0, 2,  0, 4, 4, 1, 3, 1 },       /* G */
-            { 0, 2, -1, 0, 4, 1, 3, 0 },       /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_RGB,
-     },
-    [AV_PIX_FMT_BGR444LE] = {
-        .name = "bgr444le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 4, 1, 3, 1 },        /* R */
-            { 0, 2, 0, 4, 4, 1, 3, 1 },        /* G */
-            { 0, 2, 1, 0, 4, 1, 3, 2 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_RGB,
-    },
-#if FF_API_VAAPI
-    [AV_PIX_FMT_VAAPI_MOCO] = {
-        .name = "vaapi_moco",
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_VAAPI_IDCT] = {
-        .name = "vaapi_idct",
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_VAAPI_VLD] = {
-        .name = "vaapi_vld",
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-#else
-    [AV_PIX_FMT_VAAPI] = {
-        .name = "vaapi",
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-#endif
-    [AV_PIX_FMT_YUV420P9LE] = {
-        .name = "yuv420p9le",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 9, 1, 8, 1 },        /* Y */
-            { 1, 2, 0, 0, 9, 1, 8, 1 },        /* U */
-            { 2, 2, 0, 0, 9, 1, 8, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV420P9BE] = {
-        .name = "yuv420p9be",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 9, 1, 8, 1 },        /* Y */
-            { 1, 2, 0, 0, 9, 1, 8, 1 },        /* U */
-            { 2, 2, 0, 0, 9, 1, 8, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV420P10LE] = {
-        .name = "yuv420p10le",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 10, 1, 9, 1 },        /* Y */
-            { 1, 2, 0, 0, 10, 1, 9, 1 },        /* U */
-            { 2, 2, 0, 0, 10, 1, 9, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV420P10BE] = {
-        .name = "yuv420p10be",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 10, 1, 9, 1 },        /* Y */
-            { 1, 2, 0, 0, 10, 1, 9, 1 },        /* U */
-            { 2, 2, 0, 0, 10, 1, 9, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV420P12LE] = {
-        .name = "yuv420p12le",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 12, 1, 11, 1 },        /* Y */
-            { 1, 2, 0, 0, 12, 1, 11, 1 },        /* U */
-            { 2, 2, 0, 0, 12, 1, 11, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV420P12BE] = {
-        .name = "yuv420p12be",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 12, 1, 11, 1 },        /* Y */
-            { 1, 2, 0, 0, 12, 1, 11, 1 },        /* U */
-            { 2, 2, 0, 0, 12, 1, 11, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV420P14LE] = {
-        .name = "yuv420p14le",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 14, 1, 13, 1 },        /* Y */
-            { 1, 2, 0, 0, 14, 1, 13, 1 },        /* U */
-            { 2, 2, 0, 0, 14, 1, 13, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV420P14BE] = {
-        .name = "yuv420p14be",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 14, 1, 13, 1 },        /* Y */
-            { 1, 2, 0, 0, 14, 1, 13, 1 },        /* U */
-            { 2, 2, 0, 0, 14, 1, 13, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV420P16LE] = {
-        .name = "yuv420p16le",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 16, 1, 15, 1 },        /* Y */
-            { 1, 2, 0, 0, 16, 1, 15, 1 },        /* U */
-            { 2, 2, 0, 0, 16, 1, 15, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV420P16BE] = {
-        .name = "yuv420p16be",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 16, 1, 15, 1 },        /* Y */
-            { 1, 2, 0, 0, 16, 1, 15, 1 },        /* U */
-            { 2, 2, 0, 0, 16, 1, 15, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV422P9LE] = {
-        .name = "yuv422p9le",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 9, 1, 8, 1 },        /* Y */
-            { 1, 2, 0, 0, 9, 1, 8, 1 },        /* U */
-            { 2, 2, 0, 0, 9, 1, 8, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV422P9BE] = {
-        .name = "yuv422p9be",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 9, 1, 8, 1 },        /* Y */
-            { 1, 2, 0, 0, 9, 1, 8, 1 },        /* U */
-            { 2, 2, 0, 0, 9, 1, 8, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV422P10LE] = {
-        .name = "yuv422p10le",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 10, 1, 9, 1 },        /* Y */
-            { 1, 2, 0, 0, 10, 1, 9, 1 },        /* U */
-            { 2, 2, 0, 0, 10, 1, 9, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV422P10BE] = {
-        .name = "yuv422p10be",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 10, 1, 9, 1 },        /* Y */
-            { 1, 2, 0, 0, 10, 1, 9, 1 },        /* U */
-            { 2, 2, 0, 0, 10, 1, 9, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV422P12LE] = {
-        .name = "yuv422p12le",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 12, 1, 11, 1 },        /* Y */
-            { 1, 2, 0, 0, 12, 1, 11, 1 },        /* U */
-            { 2, 2, 0, 0, 12, 1, 11, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV422P12BE] = {
-        .name = "yuv422p12be",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 12, 1, 11, 1 },        /* Y */
-            { 1, 2, 0, 0, 12, 1, 11, 1 },        /* U */
-            { 2, 2, 0, 0, 12, 1, 11, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV422P14LE] = {
-        .name = "yuv422p14le",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 14, 1, 13, 1 },        /* Y */
-            { 1, 2, 0, 0, 14, 1, 13, 1 },        /* U */
-            { 2, 2, 0, 0, 14, 1, 13, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV422P14BE] = {
-        .name = "yuv422p14be",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 14, 1, 13, 1 },        /* Y */
-            { 1, 2, 0, 0, 14, 1, 13, 1 },        /* U */
-            { 2, 2, 0, 0, 14, 1, 13, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV422P16LE] = {
-        .name = "yuv422p16le",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 16, 1, 15, 1 },        /* Y */
-            { 1, 2, 0, 0, 16, 1, 15, 1 },        /* U */
-            { 2, 2, 0, 0, 16, 1, 15, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV422P16BE] = {
-        .name = "yuv422p16be",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 16, 1, 15, 1 },        /* Y */
-            { 1, 2, 0, 0, 16, 1, 15, 1 },        /* U */
-            { 2, 2, 0, 0, 16, 1, 15, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV444P16LE] = {
-        .name = "yuv444p16le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 16, 1, 15, 1 },        /* Y */
-            { 1, 2, 0, 0, 16, 1, 15, 1 },        /* U */
-            { 2, 2, 0, 0, 16, 1, 15, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV444P16BE] = {
-        .name = "yuv444p16be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 16, 1, 15, 1 },        /* Y */
-            { 1, 2, 0, 0, 16, 1, 15, 1 },        /* U */
-            { 2, 2, 0, 0, 16, 1, 15, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV444P10LE] = {
-        .name = "yuv444p10le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 10, 1, 9, 1 },        /* Y */
-            { 1, 2, 0, 0, 10, 1, 9, 1 },        /* U */
-            { 2, 2, 0, 0, 10, 1, 9, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV444P10BE] = {
-        .name = "yuv444p10be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 10, 1, 9, 1 },        /* Y */
-            { 1, 2, 0, 0, 10, 1, 9, 1 },        /* U */
-            { 2, 2, 0, 0, 10, 1, 9, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV444P9LE] = {
-        .name = "yuv444p9le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 9, 1, 8, 1 },        /* Y */
-            { 1, 2, 0, 0, 9, 1, 8, 1 },        /* U */
-            { 2, 2, 0, 0, 9, 1, 8, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV444P9BE] = {
-        .name = "yuv444p9be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 9, 1, 8, 1 },        /* Y */
-            { 1, 2, 0, 0, 9, 1, 8, 1 },        /* U */
-            { 2, 2, 0, 0, 9, 1, 8, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV444P12LE] = {
-        .name = "yuv444p12le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 12, 1, 11, 1 },        /* Y */
-            { 1, 2, 0, 0, 12, 1, 11, 1 },        /* U */
-            { 2, 2, 0, 0, 12, 1, 11, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV444P12BE] = {
-        .name = "yuv444p12be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 12, 1, 11, 1 },        /* Y */
-            { 1, 2, 0, 0, 12, 1, 11, 1 },        /* U */
-            { 2, 2, 0, 0, 12, 1, 11, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV444P14LE] = {
-        .name = "yuv444p14le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 14, 1, 13, 1 },        /* Y */
-            { 1, 2, 0, 0, 14, 1, 13, 1 },        /* U */
-            { 2, 2, 0, 0, 14, 1, 13, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_YUV444P14BE] = {
-        .name = "yuv444p14be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 14, 1, 13, 1 },        /* Y */
-            { 1, 2, 0, 0, 14, 1, 13, 1 },        /* U */
-            { 2, 2, 0, 0, 14, 1, 13, 1 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_D3D11VA_VLD] = {
-        .name = "d3d11va_vld",
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_DXVA2_VLD] = {
-        .name = "dxva2_vld",
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_VDA_VLD] = {
-        .name = "vda_vld",
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_YA8] = {
-        .name = "ya8",
-        .nb_components = 2,
-        .comp = {
-            { 0, 2, 0, 0, 8, 1, 7, 1 },        /* Y */
-            { 0, 2, 1, 0, 8, 1, 7, 2 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_ALPHA,
-        .alias = "gray8a",
-    },
-    [AV_PIX_FMT_YA16LE] = {
-        .name = "ya16le",
-        .nb_components = 2,
-        .comp = {
-            { 0, 4, 0, 0, 16, 3, 15, 1 },        /* Y */
-            { 0, 4, 2, 0, 16, 3, 15, 3 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_YA16BE] = {
-        .name = "ya16be",
-        .nb_components = 2,
-        .comp = {
-            { 0, 4, 0, 0, 16, 3, 15, 1 },        /* Y */
-            { 0, 4, 2, 0, 16, 3, 15, 3 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_VIDEOTOOLBOX] = {
-        .name = "videotoolbox_vld",
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_GBRP] = {
-        .name = "gbrp",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 1, 0, 0, 8, 0, 7, 1 },        /* R */
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* G */
-            { 1, 1, 0, 0, 8, 0, 7, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_GBRP9LE] = {
-        .name = "gbrp9le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 2, 0, 0, 9, 1, 8, 1 },        /* R */
-            { 0, 2, 0, 0, 9, 1, 8, 1 },        /* G */
-            { 1, 2, 0, 0, 9, 1, 8, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_GBRP9BE] = {
-        .name = "gbrp9be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 2, 0, 0, 9, 1, 8, 1 },        /* R */
-            { 0, 2, 0, 0, 9, 1, 8, 1 },        /* G */
-            { 1, 2, 0, 0, 9, 1, 8, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_GBRP10LE] = {
-        .name = "gbrp10le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 2, 0, 0, 10, 1, 9, 1 },        /* R */
-            { 0, 2, 0, 0, 10, 1, 9, 1 },        /* G */
-            { 1, 2, 0, 0, 10, 1, 9, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_GBRP10BE] = {
-        .name = "gbrp10be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 2, 0, 0, 10, 1, 9, 1 },        /* R */
-            { 0, 2, 0, 0, 10, 1, 9, 1 },        /* G */
-            { 1, 2, 0, 0, 10, 1, 9, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_GBRP12LE] = {
-        .name = "gbrp12le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 2, 0, 0, 12, 1, 11, 1 },        /* R */
-            { 0, 2, 0, 0, 12, 1, 11, 1 },        /* G */
-            { 1, 2, 0, 0, 12, 1, 11, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_GBRP12BE] = {
-        .name = "gbrp12be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 2, 0, 0, 12, 1, 11, 1 },        /* R */
-            { 0, 2, 0, 0, 12, 1, 11, 1 },        /* G */
-            { 1, 2, 0, 0, 12, 1, 11, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_GBRP14LE] = {
-        .name = "gbrp14le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 2, 0, 0, 14, 1, 13, 1 },        /* R */
-            { 0, 2, 0, 0, 14, 1, 13, 1 },        /* G */
-            { 1, 2, 0, 0, 14, 1, 13, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_GBRP14BE] = {
-        .name = "gbrp14be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 2, 0, 0, 14, 1, 13, 1 },        /* R */
-            { 0, 2, 0, 0, 14, 1, 13, 1 },        /* G */
-            { 1, 2, 0, 0, 14, 1, 13, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_GBRP16LE] = {
-        .name = "gbrp16le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 2, 0, 0, 16, 1, 15, 1 },       /* R */
-            { 0, 2, 0, 0, 16, 1, 15, 1 },       /* G */
-            { 1, 2, 0, 0, 16, 1, 15, 1 },       /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_GBRP16BE] = {
-        .name = "gbrp16be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 2, 0, 0, 16, 1, 15, 1 },       /* R */
-            { 0, 2, 0, 0, 16, 1, 15, 1 },       /* G */
-            { 1, 2, 0, 0, 16, 1, 15, 1 },       /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_GBRAP] = {
-        .name = "gbrap",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 1, 0, 0, 8, 0, 7, 1 },        /* R */
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* G */
-            { 1, 1, 0, 0, 8, 0, 7, 1 },        /* B */
-            { 3, 1, 0, 0, 8, 0, 7, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_RGB |
-                 AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_GBRAP16LE] = {
-        .name = "gbrap16le",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 2, 0, 0, 16, 1, 15, 1 },       /* R */
-            { 0, 2, 0, 0, 16, 1, 15, 1 },       /* G */
-            { 1, 2, 0, 0, 16, 1, 15, 1 },       /* B */
-            { 3, 2, 0, 0, 16, 1, 15, 1 },       /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_RGB |
-                 AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_GBRAP16BE] = {
-        .name = "gbrap16be",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 2, 0, 0, 16, 1, 15, 1 },       /* R */
-            { 0, 2, 0, 0, 16, 1, 15, 1 },       /* G */
-            { 1, 2, 0, 0, 16, 1, 15, 1 },       /* B */
-            { 3, 2, 0, 0, 16, 1, 15, 1 },       /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR |
-                 AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_VDPAU] = {
-        .name = "vdpau",
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_XYZ12LE] = {
-        .name = "xyz12le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 6, 0, 4, 12, 5, 11, 1 },       /* X */
-            { 0, 6, 2, 4, 12, 5, 11, 3 },       /* Y */
-            { 0, 6, 4, 4, 12, 5, 11, 5 },       /* Z */
-      },
-      /*.flags = -- not used*/
-    },
-    [AV_PIX_FMT_XYZ12BE] = {
-        .name = "xyz12be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 6, 0, 4, 12, 5, 11, 1 },       /* X */
-            { 0, 6, 2, 4, 12, 5, 11, 3 },       /* Y */
-            { 0, 6, 4, 4, 12, 5, 11, 5 },       /* Z */
-       },
-        .flags = AV_PIX_FMT_FLAG_BE,
-    },
+#ifdef HISI_NOT_LOW_FLASH
 
-#define BAYER8_DESC_COMMON \
-        .nb_components= 3, \
-        .log2_chroma_w= 0, \
-        .log2_chroma_h= 0, \
-        .comp = {          \
-            {0,1,0,0,2,0,1,1},\
-            {0,1,0,0,4,0,3,1},\
-            {0,1,0,0,2,0,1,1},\
-        },                 \
-
-#define BAYER16_DESC_COMMON \
-        .nb_components= 3, \
-        .log2_chroma_w= 0, \
-        .log2_chroma_h= 0, \
-        .comp = {          \
-            {0,2,0,0,4,1,3,1},\
-            {0,2,0,0,8,1,7,1},\
-            {0,2,0,0,4,1,3,1},\
-        },                 \
-
-    [AV_PIX_FMT_BAYER_BGGR8] = {
-        .name = "bayer_bggr8",
-        BAYER8_DESC_COMMON
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_BAYER,
-    },
-    [AV_PIX_FMT_BAYER_BGGR16LE] = {
-        .name = "bayer_bggr16le",
-        BAYER16_DESC_COMMON
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_BAYER,
-    },
-    [AV_PIX_FMT_BAYER_BGGR16BE] = {
-        .name = "bayer_bggr16be",
-        BAYER16_DESC_COMMON
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_BAYER,
-    },
-    [AV_PIX_FMT_BAYER_RGGB8] = {
-        .name = "bayer_rggb8",
-        BAYER8_DESC_COMMON
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_BAYER,
-    },
-    [AV_PIX_FMT_BAYER_RGGB16LE] = {
-        .name = "bayer_rggb16le",
-        BAYER16_DESC_COMMON
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_BAYER,
-    },
-    [AV_PIX_FMT_BAYER_RGGB16BE] = {
-        .name = "bayer_rggb16be",
-        BAYER16_DESC_COMMON
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_BAYER,
-    },
-    [AV_PIX_FMT_BAYER_GBRG8] = {
-        .name = "bayer_gbrg8",
-        BAYER8_DESC_COMMON
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_BAYER,
-    },
-    [AV_PIX_FMT_BAYER_GBRG16LE] = {
-        .name = "bayer_gbrg16le",
-        BAYER16_DESC_COMMON
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_BAYER,
-    },
-    [AV_PIX_FMT_BAYER_GBRG16BE] = {
-        .name = "bayer_gbrg16be",
-        BAYER16_DESC_COMMON
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_BAYER,
-    },
-    [AV_PIX_FMT_BAYER_GRBG8] = {
-        .name = "bayer_grbg8",
-        BAYER8_DESC_COMMON
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_BAYER,
-    },
-    [AV_PIX_FMT_BAYER_GRBG16LE] = {
-        .name = "bayer_grbg16le",
-        BAYER16_DESC_COMMON
-        .flags = AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_BAYER,
-    },
-    [AV_PIX_FMT_BAYER_GRBG16BE] = {
-        .name = "bayer_grbg16be",
-        BAYER16_DESC_COMMON
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_BAYER,
-    },
-    [AV_PIX_FMT_NV16] = {
-        .name = "nv16",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
-            { 1, 2, 0, 0, 8, 1, 7, 1 },        /* U */
-            { 1, 2, 1, 0, 8, 1, 7, 2 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_NV20LE] = {
-        .name = "nv20le",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 10, 1, 9, 1 },        /* Y */
-            { 1, 4, 0, 0, 10, 3, 9, 1 },        /* U */
-            { 1, 4, 2, 0, 10, 3, 9, 3 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_NV20BE] = {
-        .name = "nv20be",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 2, 0, 0, 10, 1, 9, 1 },        /* Y */
-            { 1, 4, 0, 0, 10, 3, 9, 1 },        /* U */
-            { 1, 4, 2, 0, 10, 3, 9, 3 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_BE,
-    },
-    [AV_PIX_FMT_VDA] = {
-        .name = "vda",
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_QSV] = {
-        .name = "qsv",
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_MEDIACODEC] = {
-        .name = "mediacodec",
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_MMAL] = {
-        .name = "mmal",
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_CUDA] = {
-        .name = "cuda",
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_AYUV64LE] = {
-        .name = "ayuv64le",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 8, 2, 0, 16, 7, 15, 3 },        /* Y */
-            { 0, 8, 4, 0, 16, 7, 15, 5 },        /* U */
-            { 0, 8, 6, 0, 16, 7, 15, 7 },        /* V */
-            { 0, 8, 0, 0, 16, 7, 15, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_AYUV64BE] = {
-        .name = "ayuv64be",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 0, 8, 2, 0, 16, 7, 15, 3 },        /* Y */
-            { 0, 8, 4, 0, 16, 7, 15, 5 },        /* U */
-            { 0, 8, 6, 0, 16, 7, 15, 7 },        /* V */
-            { 0, 8, 0, 0, 16, 7, 15, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_P010LE] = {
-        .name = "p010le",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 6, 10, 1, 9, 1 },        /* Y */
-            { 1, 4, 0, 6, 10, 3, 9, 1 },        /* U */
-            { 1, 4, 2, 6, 10, 3, 9, 3 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR,
-    },
-    [AV_PIX_FMT_P010BE] = {
-        .name = "p010be",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 6, 10, 1, 9, 1 },        /* Y */
-            { 1, 4, 0, 6, 10, 3, 9, 1 },        /* U */
-            { 1, 4, 2, 6, 10, 3, 9, 3 },        /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_BE,
-    },
-    [AV_PIX_FMT_P016LE] = {
-        .name = "p016le",
+    AVComponentDescriptor comp = desc->comp[c];
+    int plane = comp.plane;
+    int depth = comp.depth;
+    int mask  = (1 << depth) - 1;
+    int shift = comp.shift;
+    int step  = comp.step;
+    int flags = desc->flags;
+
+    if (flags & AV_PIX_FMT_FLAG_BITSTREAM) {
+        int skip = x * step + comp.offset;
+        const uint8_t *p = data[plane] + y * linesize[plane] + (skip >> 3);
+        int shift = 8 - depth - (skip & 7);
+
+        while (w--) {
+            int val = (*p >> shift) & mask;
+            if (read_pal_component)
+                val = data[1][4*val + c];
+            shift -= step;
+            p -= shift >> 3;
+            shift &= 7;
+            *dst++ = val;
+        }
+    } else {
+        const uint8_t *p = data[plane] + y * linesize[plane] +
+                           x * step + comp.offset;
+        int is_8bit = shift + depth <= 8;
+
+        if (is_8bit)
+            p += !!(flags & AV_PIX_FMT_FLAG_BE);
+
+        while (w--) {
+            int val = is_8bit ? *p :
+                flags & AV_PIX_FMT_FLAG_BE ? AV_RB16(p) : AV_RL16(p);
+            val = (val >> shift) & mask;
+            if (read_pal_component)
+                val = data[1][4 * val + c];
+            p += step;
+            *dst++ = val;
+        }
+    }
+#endif
+}
+
+void av_write_image_line(const uint16_t *src,
+                         uint8_t *data[4], const int linesize[4],
+                         const AVPixFmtDescriptor *desc,
+                         int x, int y, int c, int w)
+{
+#ifdef HISI_NOT_LOW_FLASH
+
+    AVComponentDescriptor comp = desc->comp[c];
+    int plane = comp.plane;
+    int depth = comp.depth;
+    int step  = comp.step;
+    int flags = desc->flags;
+
+    if (flags & AV_PIX_FMT_FLAG_BITSTREAM) {
+        int skip = x * step + comp.offset;
+        uint8_t *p = data[plane] + y * linesize[plane] + (skip >> 3);
+        int shift = 8 - depth - (skip & 7);
+
+        while (w--) {
+            *p |= *src++ << shift;
+            shift -= step;
+            p -= shift >> 3;
+            shift &= 7;
+        }
+    } else {
+        int shift = comp.shift;
+        uint8_t *p = data[plane] + y * linesize[plane] +
+                     x * step + comp.offset;
+
+        if (shift + depth <= 8) {
+            p += !!(flags & AV_PIX_FMT_FLAG_BE);
+            while (w--) {
+                *p |= (*src++ << shift);
+                p += step;
+            }
+        } else {
+            while (w--) {
+                if (flags & AV_PIX_FMT_FLAG_BE) {
+                    uint16_t val = AV_RB16(p) | (*src++ << shift);
+                    AV_WB16(p, val);
+                } else {
+                    uint16_t val = AV_RL16(p) | (*src++ << shift);
+                    AV_WL16(p, val);
+                }
+                p += step;
+            }
+        }
+    }
+    #endif
+}
+
+#if FF_API_PLUS1_MINUS1
+FF_DISABLE_DEPRECATION_WARNINGS
+#endif
+
+#define PRIV_MAX_PIX_FMT_NB (1)
+
+static const AVPixFmtDescriptor av_pix_fmt_descriptors[PRIV_MAX_PIX_FMT_NB] = {
+    [AV_PIX_FMT_YUV420P] = {
+        .name = "yuv420p",
         .nb_components = 3,
         .log2_chroma_w = 1,
         .log2_chroma_h = 1,
         .comp = {
-            { 0, 2, 0, 0, 16, 1, 15, 1 },       /* Y */
-            { 1, 4, 0, 0, 16, 3, 15, 1 },       /* U */
-            { 1, 4, 2, 0, 16, 3, 15, 3 },       /* V */
+            { 0, 1, 0, 0, 8, 0, 7, 1 },        /* Y */
+            { 1, 1, 0, 0, 8, 0, 7, 1 },        /* U */
+            { 2, 1, 0, 0, 8, 0, 7, 1 },        /* V */
         },
         .flags = AV_PIX_FMT_FLAG_PLANAR,
     },
-    [AV_PIX_FMT_P016BE] = {
-        .name = "p016be",
-        .nb_components = 3,
-        .log2_chroma_w = 1,
-        .log2_chroma_h = 1,
-        .comp = {
-            { 0, 2, 0, 0, 16, 1, 15, 1 },       /* Y */
-            { 1, 4, 0, 0, 16, 3, 15, 1 },       /* U */
-            { 1, 4, 2, 0, 16, 3, 15, 3 },       /* V */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_BE,
-    },
-    [AV_PIX_FMT_GBRAP12LE] = {
-        .name = "gbrap12le",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 2, 0, 0, 12, 1, 11, 1 },       /* R */
-            { 0, 2, 0, 0, 12, 1, 11, 1 },       /* G */
-            { 1, 2, 0, 0, 12, 1, 11, 1 },       /* B */
-            { 3, 2, 0, 0, 12, 1, 11, 1 },       /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_RGB |
-                 AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_GBRAP12BE] = {
-        .name = "gbrap12be",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 2, 0, 0, 12, 1, 11, 1 },       /* R */
-            { 0, 2, 0, 0, 12, 1, 11, 1 },       /* G */
-            { 1, 2, 0, 0, 12, 1, 11, 1 },       /* B */
-            { 3, 2, 0, 0, 12, 1, 11, 1 },       /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR |
-                 AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_GBRAP10LE] = {
-        .name = "gbrap10le",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 2, 0, 0, 10, 1, 9, 1 },       /* R */
-            { 0, 2, 0, 0, 10, 1, 9, 1 },       /* G */
-            { 1, 2, 0, 0, 10, 1, 9, 1 },       /* B */
-            { 3, 2, 0, 0, 10, 1, 9, 1 },       /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_RGB |
-                 AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_GBRAP10BE] = {
-        .name = "gbrap10be",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 2, 0, 0, 10, 1, 9, 1 },       /* R */
-            { 0, 2, 0, 0, 10, 1, 9, 1 },       /* G */
-            { 1, 2, 0, 0, 10, 1, 9, 1 },       /* B */
-            { 3, 2, 0, 0, 10, 1, 9, 1 },       /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR |
-                 AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_ALPHA,
-    },
-    [AV_PIX_FMT_D3D11] = {
-        .name = "d3d11",
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
-    [AV_PIX_FMT_GBRPF32BE] = {
-        .name = "gbrpf32be",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 4, 0, 0, 32, 3, 31, 1 },        /* R */
-            { 0, 4, 0, 0, 32, 3, 31, 1 },        /* G */
-            { 1, 4, 0, 0, 32, 3, 31, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR |
-                 AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_FLOAT,
-    },
-    [AV_PIX_FMT_GBRPF32LE] = {
-        .name = "gbrpf32le",
-        .nb_components = 3,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 4, 0, 0, 32, 3, 31, 1 },        /* R */
-            { 0, 4, 0, 0, 32, 3, 31, 1 },        /* G */
-            { 1, 4, 0, 0, 32, 3, 31, 1 },        /* B */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_FLOAT | AV_PIX_FMT_FLAG_RGB,
-    },
-    [AV_PIX_FMT_GBRAPF32BE] = {
-        .name = "gbrapf32be",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 4, 0, 0, 32, 3, 31, 1 },        /* R */
-            { 0, 4, 0, 0, 32, 3, 31, 1 },        /* G */
-            { 1, 4, 0, 0, 32, 3, 31, 1 },        /* B */
-            { 3, 4, 0, 0, 32, 3, 31, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_BE | AV_PIX_FMT_FLAG_PLANAR |
-                 AV_PIX_FMT_FLAG_ALPHA | AV_PIX_FMT_FLAG_RGB |
-                 AV_PIX_FMT_FLAG_FLOAT,
-    },
-    [AV_PIX_FMT_GBRAPF32LE] = {
-        .name = "gbrapf32le",
-        .nb_components = 4,
-        .log2_chroma_w = 0,
-        .log2_chroma_h = 0,
-        .comp = {
-            { 2, 4, 0, 0, 32, 3, 31, 1 },        /* R */
-            { 0, 4, 0, 0, 32, 3, 31, 1 },        /* G */
-            { 1, 4, 0, 0, 32, 3, 31, 1 },        /* B */
-            { 3, 4, 0, 0, 32, 3, 31, 1 },        /* A */
-        },
-        .flags = AV_PIX_FMT_FLAG_PLANAR | AV_PIX_FMT_FLAG_ALPHA |
-                 AV_PIX_FMT_FLAG_RGB | AV_PIX_FMT_FLAG_FLOAT,
-    },
-    [AV_PIX_FMT_DRM_PRIME] = {
-        .name = "drm_prime",
-        .flags = AV_PIX_FMT_FLAG_HWACCEL,
-    },
 };
 #if FF_API_PLUS1_MINUS1
 FF_ENABLE_DEPRECATION_WARNINGS
 #endif
+#ifdef HISI_NOT_LOW_FLASH
 
 static const char * const color_range_names[] = {
     [AVCOL_RANGE_UNSPECIFIED] = "unknown",
     [AVCOL_RANGE_MPEG] = "tv",
     [AVCOL_RANGE_JPEG] = "pc",
 };
-
 static const char * const color_primaries_names[AVCOL_PRI_NB] = {
     [AVCOL_PRI_RESERVED0] = "reserved",
     [AVCOL_PRI_BT709] = "bt709",
@@ -2318,12 +229,12 @@ static const char * const chroma_locatio
     [AVCHROMA_LOC_BOTTOMLEFT] = "bottomleft",
     [AVCHROMA_LOC_BOTTOM] = "bottom",
 };
-
+#endif
 static enum AVPixelFormat get_pix_fmt_internal(const char *name)
 {
     enum AVPixelFormat pix_fmt;
 
-    for (pix_fmt = 0; pix_fmt < AV_PIX_FMT_NB; pix_fmt++)
+    for (pix_fmt = 0; pix_fmt < PRIV_MAX_PIX_FMT_NB; pix_fmt++)
         if (av_pix_fmt_descriptors[pix_fmt].name &&
             (!strcmp(av_pix_fmt_descriptors[pix_fmt].name, name) ||
              av_match_name(name, av_pix_fmt_descriptors[pix_fmt].alias)))
@@ -2334,7 +245,7 @@ static enum AVPixelFormat get_pix_fmt_in
 
 const char *av_get_pix_fmt_name(enum AVPixelFormat pix_fmt)
 {
-    return (unsigned)pix_fmt < AV_PIX_FMT_NB ?
+    return (unsigned)pix_fmt < PRIV_MAX_PIX_FMT_NB ?
         av_pix_fmt_descriptors[pix_fmt].name : NULL;
 }
 
@@ -2418,7 +329,7 @@ char *av_get_pix_fmt_string(char *buf, i
 
 const AVPixFmtDescriptor *av_pix_fmt_desc_get(enum AVPixelFormat pix_fmt)
 {
-    if (pix_fmt < 0 || pix_fmt >= AV_PIX_FMT_NB)
+    if (pix_fmt < 0 || pix_fmt >= PRIV_MAX_PIX_FMT_NB)
         return NULL;
     return &av_pix_fmt_descriptors[pix_fmt];
 }
@@ -2447,17 +358,21 @@ enum AVPixelFormat av_pix_fmt_desc_get_i
 int av_pix_fmt_get_chroma_sub_sample(enum AVPixelFormat pix_fmt,
                                      int *h_shift, int *v_shift)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(pix_fmt);
     if (!desc)
         return AVERROR(ENOSYS);
     *h_shift = desc->log2_chroma_w;
     *v_shift = desc->log2_chroma_h;
-
+#endif
     return 0;
 }
 
 int av_pix_fmt_count_planes(enum AVPixelFormat pix_fmt)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(pix_fmt);
     int i, planes[4] = { 0 }, ret = 0;
 
@@ -2469,10 +384,14 @@ int av_pix_fmt_count_planes(enum AVPixel
     for (i = 0; i < FF_ARRAY_ELEMS(planes); i++)
         ret += planes[i];
     return ret;
+#else
+    return 0;
+#endif
 }
 
 void ff_check_pixfmt_descriptors(void){
     int i, j;
+#ifdef HISI_NOT_LOW_FLASH
 
     for (i=0; i<FF_ARRAY_ELEMS(av_pix_fmt_descriptors); i++) {
         const AVPixFmtDescriptor *d = &av_pix_fmt_descriptors[i];
@@ -2510,11 +429,15 @@ void ff_check_pixfmt_descriptors(void){
             av_write_image_line(tmp, data, linesize, d, 0, 0, j, 2);
         }
     }
+#endif
+    
 }
 
 
 enum AVPixelFormat av_pix_fmt_swap_endianness(enum AVPixelFormat pix_fmt)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(pix_fmt);
     char name[16];
     int i;
@@ -2529,6 +452,9 @@ enum AVPixelFormat av_pix_fmt_swap_endia
     name[i] ^= 'b' ^ 'l';
 
     return get_pix_fmt_internal(name);
+#else
+    return AV_PIX_FMT_NONE;
+#endif
 }
 
 #define FF_COLOR_NA      -1
@@ -2543,6 +469,8 @@ enum AVPixelFormat av_pix_fmt_swap_endia
 
 
 static int get_color_type(const AVPixFmtDescriptor *desc) {
+#ifdef HISI_NOT_LOW_FLASH
+
     if (desc->flags & AV_PIX_FMT_FLAG_PAL)
         return FF_COLOR_RGB;
 
@@ -2560,12 +488,14 @@ static int get_color_type(const AVPixFmt
 
     if(desc->nb_components == 0)
         return FF_COLOR_NA;
-
+#endif
     return FF_COLOR_YUV;
 }
 
 static int get_pix_fmt_depth(int *min, int *max, enum AVPixelFormat pix_fmt)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(pix_fmt);
     int i;
 
@@ -2579,13 +509,16 @@ static int get_pix_fmt_depth(int *min, i
         *min = FFMIN(desc->comp[i].depth, *min);
         *max = FFMAX(desc->comp[i].depth, *max);
     }
+#endif
     return 0;
 }
+#ifdef HISI_NOT_LOW_FLASH
 
 static int get_pix_fmt_score(enum AVPixelFormat dst_pix_fmt,
                               enum AVPixelFormat src_pix_fmt,
                               unsigned *lossp, unsigned consider)
 {
+
     const AVPixFmtDescriptor *src_desc = av_pix_fmt_desc_get(src_pix_fmt);
     const AVPixFmtDescriptor *dst_desc = av_pix_fmt_desc_get(dst_pix_fmt);
     int src_color, dst_color;
@@ -2694,22 +627,30 @@ static int get_pix_fmt_score(enum AVPixe
     *lossp = loss;
     return score;
 }
+#endif
 
 int av_get_pix_fmt_loss(enum AVPixelFormat dst_pix_fmt,
                             enum AVPixelFormat src_pix_fmt,
                             int has_alpha)
 {
+
     int loss;
+    
+#ifdef HISI_NOT_LOW_FLASH
     int ret = get_pix_fmt_score(dst_pix_fmt, src_pix_fmt, &loss, has_alpha ? ~0 : ~FF_LOSS_ALPHA);
     if (ret < 0)
         return ret;
+#endif
     return loss;
 }
 
 enum AVPixelFormat av_find_best_pix_fmt_of_2(enum AVPixelFormat dst_pix_fmt1, enum AVPixelFormat dst_pix_fmt2,
                                              enum AVPixelFormat src_pix_fmt, int has_alpha, int *loss_ptr)
 {
+
     enum AVPixelFormat dst_pix_fmt;
+    
+#ifdef HISI_NOT_LOW_FLASH
     int loss1, loss2, loss_mask;
     const AVPixFmtDescriptor *desc1 = av_pix_fmt_desc_get(dst_pix_fmt1);
     const AVPixFmtDescriptor *desc2 = av_pix_fmt_desc_get(dst_pix_fmt2);
@@ -2740,36 +681,51 @@ enum AVPixelFormat av_find_best_pix_fmt_
 
     if (loss_ptr)
         *loss_ptr = av_get_pix_fmt_loss(dst_pix_fmt, src_pix_fmt, has_alpha);
+#endif
     return dst_pix_fmt;
+
 }
 
 const char *av_color_range_name(enum AVColorRange range)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     return (unsigned) range < AVCOL_RANGE_NB ?
         color_range_names[range] : NULL;
+#else
+    return NULL;
+#endif
 }
 
 int av_color_range_from_name(const char *name)
 {
     int i;
+#ifdef HISI_NOT_LOW_FLASH
 
     for (i = 0; i < FF_ARRAY_ELEMS(color_range_names); i++) {
         size_t len = strlen(color_range_names[i]);
         if (!strncmp(color_range_names[i], name, len))
             return i;
     }
-
+#endif
     return AVERROR(EINVAL);
 }
 
 const char *av_color_primaries_name(enum AVColorPrimaries primaries)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     return (unsigned) primaries < AVCOL_PRI_NB ?
         color_primaries_names[primaries] : NULL;
+#else
+    return NULL;
+#endif
 }
 
 int av_color_primaries_from_name(const char *name)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     int i;
 
     for (i = 0; i < FF_ARRAY_ELEMS(color_primaries_names); i++) {
@@ -2777,18 +733,24 @@ int av_color_primaries_from_name(const c
         if (!strncmp(color_primaries_names[i], name, len))
             return i;
     }
-
+#endif
     return AVERROR(EINVAL);
 }
 
 const char *av_color_transfer_name(enum AVColorTransferCharacteristic transfer)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     return (unsigned) transfer < AVCOL_TRC_NB ?
         color_transfer_names[transfer] : NULL;
+#else
+    return NULL;
+#endif
 }
 
 int av_color_transfer_from_name(const char *name)
 {
+#ifdef HISI_NOT_LOW_FLASH
     int i;
 
     for (i = 0; i < FF_ARRAY_ELEMS(color_transfer_names); i++) {
@@ -2796,18 +758,25 @@ int av_color_transfer_from_name(const ch
         if (!strncmp(color_transfer_names[i], name, len))
             return i;
     }
-
+#endif
     return AVERROR(EINVAL);
 }
 
 const char *av_color_space_name(enum AVColorSpace space)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     return (unsigned) space < AVCOL_SPC_NB ?
         color_space_names[space] : NULL;
+#else 
+    return NULL;
+#endif
 }
 
 int av_color_space_from_name(const char *name)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     int i;
 
     for (i = 0; i < FF_ARRAY_ELEMS(color_space_names); i++) {
@@ -2815,18 +784,25 @@ int av_color_space_from_name(const char
         if (!strncmp(color_space_names[i], name, len))
             return i;
     }
-
+#endif 
     return AVERROR(EINVAL);
 }
 
 const char *av_chroma_location_name(enum AVChromaLocation location)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     return (unsigned) location < AVCHROMA_LOC_NB ?
         chroma_location_names[location] : NULL;
+#else
+return NULL;
+#endif
 }
 
 int av_chroma_location_from_name(const char *name)
 {
+#ifdef HISI_NOT_LOW_FLASH
+
     int i;
 
     for (i = 0; i < FF_ARRAY_ELEMS(chroma_location_names); i++) {
@@ -2834,6 +810,7 @@ int av_chroma_location_from_name(const c
         if (!strncmp(chroma_location_names[i], name, len))
             return i;
     }
+#endif
 
     return AVERROR(EINVAL);
 }
diff -uparN ffmpeg-3.4.1/libswresample/audioconvert.c ffmpeg-y/libswresample/audioconvert.c
--- ffmpeg-3.4.1/libswresample/audioconvert.c	2017-12-11 05:35:11.000000000 +0800
+++ ffmpeg-y/libswresample/audioconvert.c	2019-02-22 15:07:00.000000000 +0800
@@ -239,7 +239,7 @@ int swri_audio_convert(AudioConvert *ctx
         const uint8_t *pi= ich < 0 ? ctx->silence : in->ch[ich];
         uint8_t       *po= out->ch[ch];
         uint8_t *end= po + os*len;
-        if(!po)
+        if (!pi || !po)
             continue;
         ctx->conv_f(po+off*os, pi+off*is, is, os, end);
     }
